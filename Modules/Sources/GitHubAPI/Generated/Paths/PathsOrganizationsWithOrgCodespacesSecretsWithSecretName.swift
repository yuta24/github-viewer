// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Organizations.WithOrg.Codespaces.Secrets {
    public func secretName(_ secretName: String) -> WithSecretName {
        WithSecretName(path: "\(path)/\(secretName)")
    }

    public struct WithSecretName {
        /// Path: `/organizations/{org}/codespaces/secrets/{secret_name}`
        public let path: String

        /// Get an organization secret
        ///
        /// Gets an organization secret without revealing its encrypted value.
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#get-an-organization-secret)
        public var get: Request<GitHubAPI.CodespacesOrgSecret> {
            Request(method: "GET", url: path, id: "codespaces/get-org-secret")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        /// Create or update an organization secret
        ///
        /// Creates or updates an organization secret with an encrypted value. Encrypt your secret using
        /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
        /// token with the `admin:org` scope to use this endpoint.
        /// 
        /// #### Example encrypting a secret using Node.js
        /// 
        /// Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
        /// 
        /// ```
        /// // Written with ❤️ by PSJ and free to use under The Unlicense.
        /// const sodium=require('libsodium-wrappers')
        /// const secret = 'plain-text-secret' // replace with secret before running the script.
        /// const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key.
        /// 
        /// //Check if libsodium is ready and then proceed.
        /// 
        /// sodium.ready.then( ()=>{
        /// 
        /// // Convert Secret & Base64 key to Uint8Array.
        /// let binkey= sodium.from_base64(key, sodium.base64_variants.ORIGINAL) //Equivalent of Buffer.from(key, 'base64')
        /// let binsec= sodium.from_string(secret) // Equivalent of Buffer.from(secret)
        /// 
        /// //Encrypt the secret using LibSodium
        /// let encBytes= sodium.crypto_box_seal(binsec,binkey) // Similar to tweetsodium.seal(binsec,binkey)
        /// 
        /// // Convert encrypted Uint8Array to Base64
        /// let output=sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL) //Equivalent of Buffer.from(encBytes).toString('base64')
        /// 
        /// console.log(output)
        /// });
        /// ```
        /// 
        /// #### Example encrypting a secret using Python
        /// 
        /// Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
        /// 
        /// ```
        /// from base64 import b64encode
        /// from nacl import encoding, public
        /// 
        /// def encrypt(public_key: str, secret_value: str) -> str:
        ///   """Encrypt a Unicode string using the public key."""
        ///   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
        ///   sealed_box = public.SealedBox(public_key)
        ///   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
        ///   return b64encode(encrypted).decode("utf-8")
        /// ```
        /// 
        /// #### Example encrypting a secret using C#
        /// 
        /// Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
        /// 
        /// ```
        /// var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
        /// var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
        /// 
        /// var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
        /// 
        /// Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
        /// ```
        /// 
        /// #### Example encrypting a secret using Ruby
        /// 
        /// Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
        /// 
        /// ```ruby
        /// require "rbnacl"
        /// require "base64"
        /// 
        /// key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
        /// public_key = RbNaCl::PublicKey.new(key)
        /// 
        /// box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
        /// encrypted_secret = box.encrypt("my_secret")
        /// 
        /// # Print the base64 encoded secret
        /// puts Base64.strict_encode64(encrypted_secret)
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret)
        public func put(_ body: PutRequest) -> Request<Void> {
            Request(method: "PUT", url: path, body: body, id: "codespaces/create-or-update-org-secret")
        }

        public struct PutRequest: Encodable {
            /// The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key) endpoint.
            public var encryptedValue: String?
            /// The ID of the key you used to encrypt the secret.
            public var keyID: String?
            /// Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
            public var visibility: Visibility
            /// An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints.
            public var selectedRepositoryIDs: [Int]?

            /// Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
            public enum Visibility: String, Codable, CaseIterable {
                case all
                case `private`
                case selected
            }

            public init(encryptedValue: String? = nil, keyID: String? = nil, visibility: Visibility, selectedRepositoryIDs: [Int]? = nil) {
                self.encryptedValue = encryptedValue
                self.keyID = keyID
                self.visibility = visibility
                self.selectedRepositoryIDs = selectedRepositoryIDs
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(encryptedValue, forKey: "encrypted_value")
                try values.encodeIfPresent(keyID, forKey: "key_id")
                try values.encode(visibility, forKey: "visibility")
                try values.encodeIfPresent(selectedRepositoryIDs, forKey: "selected_repository_ids")
            }
        }

        /// Delete an organization secret
        ///
        /// Deletes an organization secret using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#delete-an-organization-secret)
        public var delete: Request<Void> {
            Request(method: "DELETE", url: path, id: "codespaces/delete-org-secret")
        }
    }
}
