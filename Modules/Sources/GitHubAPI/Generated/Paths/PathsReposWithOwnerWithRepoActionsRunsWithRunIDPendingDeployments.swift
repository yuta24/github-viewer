// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var pendingDeployments: PendingDeployments {
        PendingDeployments(path: path + "/pending_deployments")
    }

    public struct PendingDeployments {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`
        public let path: String

        /// Get pending deployments for a workflow run
        ///
        /// Get all deployment environments for a workflow run that are waiting for protection rules to pass.
        /// 
        /// Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-pending-deployments-for-a-workflow-run)
        public var get: Request<[GitHubAPI.PendingDeployment]> {
            Request(method: "GET", url: path, id: "actions/get-pending-deployments-for-run")
        }

        /// Review pending deployments for a workflow run
        ///
        /// Approve or reject pending deployments that are waiting on approval by a required reviewer.
        /// 
        /// Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#review-pending-deployments-for-a-workflow-run)
        public func post(_ body: PostRequest) -> Request<[GitHubAPI.Deployment]> {
            Request(method: "POST", url: path, body: body, id: "actions/review-pending-deployments-for-run")
        }

        public struct PostRequest: Encodable {
            /// The list of environment ids to approve or reject
            ///
            /// Example: [161171787, 161171795]
            public var environmentIDs: [Int]
            /// Whether to approve or reject deployment to the specified environments.
            ///
            /// Example: "approved"
            public var state: State
            /// A comment to accompany the deployment review
            ///
            /// Example: "Ship it!"
            public var comment: String

            /// Whether to approve or reject deployment to the specified environments.
            ///
            /// Example: "approved"
            public enum State: String, Codable, CaseIterable {
                case approved
                case rejected
            }

            public init(environmentIDs: [Int], state: State, comment: String) {
                self.environmentIDs = environmentIDs
                self.state = state
                self.comment = comment
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(environmentIDs, forKey: "environment_ids")
                try values.encode(state, forKey: "state")
                try values.encode(comment, forKey: "comment")
            }
        }
    }
}
