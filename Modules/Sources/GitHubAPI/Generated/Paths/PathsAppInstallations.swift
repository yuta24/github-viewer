// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.App {
    public var installations: Installations {
        Installations(path: path + "/installations")
    }

    public struct Installations {
        /// Path: `/app/installations`
        public let path: String

        /// List installations for the authenticated app
        ///
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        /// 
        /// The permissions the installation has are included under the `permissions` key.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)
        public func get(parameters: GetParameters? = nil) -> Request<[GitHubAPI.Installation]> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "apps/list-installations")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var perPage: Int?
            public var page: Int?
            public var since: Date?
            public var outdated: String?

            public init(perPage: Int? = nil, page: Int? = nil, since: Date? = nil, outdated: String? = nil) {
                self.perPage = perPage
                self.page = page
                self.since = since
                self.outdated = outdated
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(since, forKey: "since")
                encoder.encode(outdated, forKey: "outdated")
                return encoder.items
            }
        }
    }
}
