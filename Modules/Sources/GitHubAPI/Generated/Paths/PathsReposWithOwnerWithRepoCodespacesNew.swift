// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Codespaces {
    public var new: New {
        New(path: path + "/new")
    }

    public struct New {
        /// Path: `/repos/{owner}/{repo}/codespaces/new`
        public let path: String

        /// Get default attributes for a codespace
        ///
        /// Gets the default attributes for codespaces created by the user with the repository.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        /// 
        /// GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#preview-attributes-for-a-new-codespace)
        public func get(ref: String? = nil, clientIp: String? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: makeGetQuery(ref, clientIp), id: "codespaces/pre-flight-with-repo-for-authenticated-user")
        }

        public struct GetResponse: Decodable {
            /// Simple User
            public var billableOwner: GitHubAPI.SimpleUser?
            public var defaults: Defaults?

            public struct Defaults: Decodable {
                public var location: String
                public var devcontainerPath: String?

                public init(location: String, devcontainerPath: String? = nil) {
                    self.location = location
                    self.devcontainerPath = devcontainerPath
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.location = try values.decode(String.self, forKey: "location")
                    self.devcontainerPath = try values.decodeIfPresent(String.self, forKey: "devcontainer_path")
                }
            }

            public init(billableOwner: GitHubAPI.SimpleUser? = nil, defaults: Defaults? = nil) {
                self.billableOwner = billableOwner
                self.defaults = defaults
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.billableOwner = try values.decodeIfPresent(GitHubAPI.SimpleUser.self, forKey: "billable_owner")
                self.defaults = try values.decodeIfPresent(Defaults.self, forKey: "defaults")
            }
        }

        private func makeGetQuery(_ ref: String?, _ clientIp: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(ref, forKey: "ref")
            encoder.encode(clientIp, forKey: "client_ip")
            return encoder.items
        }
    }
}
