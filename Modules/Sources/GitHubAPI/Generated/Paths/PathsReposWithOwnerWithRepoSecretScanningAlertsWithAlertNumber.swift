// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.SecretScanning.Alerts {
    public func alertNumber(_ alertNumber: Int) -> WithAlertNumber {
        WithAlertNumber(path: "\(path)/\(alertNumber)")
    }

    public struct WithAlertNumber {
        /// Path: `/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}`
        public let path: String

        /// Get a secret scanning alert
        ///
        /// Gets a single secret scanning alert detected in an eligible repository.
        /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
        /// For public repositories, you may instead use the `public_repo` scope.
        /// 
        /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/secret-scanning#get-a-secret-scanning-alert)
        public var get: Request<GitHubAPI.SecretScanningAlert> {
            Request(method: "GET", url: path, id: "secret-scanning/get-alert")
        }

        /// Update a secret scanning alert
        ///
        /// Updates the status of a secret scanning alert in an eligible repository.
        /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
        /// For public repositories, you may instead use the `public_repo` scope.
        /// 
        /// GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/secret-scanning#update-a-secret-scanning-alert)
        public func patch(_ body: PatchRequest) -> Request<GitHubAPI.SecretScanningAlert> {
            Request(method: "PATCH", url: path, body: body, id: "secret-scanning/update-alert")
        }

        public struct PatchRequest: Encodable {
            /// Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
            public var state: GitHubAPI.SecretScanningAlertState
            /// **Required when the `state` is `resolved`.** The reason for resolving the alert.
            public var resolution: GitHubAPI.SecretScanningAlertResolution?
            /// Sets an optional comment when closing an alert. Must be null when changing `state` to `open`.
            public var resolutionComment: String?

            public init(state: GitHubAPI.SecretScanningAlertState, resolution: GitHubAPI.SecretScanningAlertResolution? = nil, resolutionComment: String? = nil) {
                self.state = state
                self.resolution = resolution
                self.resolutionComment = resolutionComment
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(state, forKey: "state")
                try values.encodeIfPresent(resolution, forKey: "resolution")
                try values.encodeIfPresent(resolutionComment, forKey: "resolution_comment")
            }
        }
    }
}
