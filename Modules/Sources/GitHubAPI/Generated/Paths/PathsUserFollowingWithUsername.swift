// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.User.Following {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/user/following/{username}`
        public let path: String

        /// Check if a person is followed by the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user)
        public var get: Request<Void> {
            Request(method: "GET", url: path, id: "users/check-person-is-followed-by-authenticated")
        }

        /// Follow a user
        ///
        /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        /// 
        /// Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#follow-a-user)
        public var put: Request<Void> {
            Request(method: "PUT", url: path, id: "users/follow")
        }

        /// Unfollow a user
        ///
        /// Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#unfollow-a-user)
        public var delete: Request<Void> {
            Request(method: "DELETE", url: path, id: "users/unfollow")
        }
    }
}
