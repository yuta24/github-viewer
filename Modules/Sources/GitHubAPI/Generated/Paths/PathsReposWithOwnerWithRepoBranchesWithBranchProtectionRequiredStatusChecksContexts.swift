// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection.RequiredStatusChecks {
    public var contexts: Contexts {
        Contexts(path: path + "/contexts")
    }

    public struct Contexts {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`
        public let path: String

        /// Get all status check contexts
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-all-status-check-contexts)
        public var get: Request<[String]> {
            Request(method: "GET", url: path, id: "repos/get-all-status-check-contexts")
        }

        /// Add status check contexts
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#add-status-check-contexts)
        public func post(_ body: PostRequest? = nil) -> Request<[String]> {
            Request(method: "POST", url: path, body: body, id: "repos/add-status-check-contexts")
        }

        public enum PostRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "contexts" : [
            ///     "contexts"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// The name of the status checks
                public var contexts: [String]

                public init(contexts: [String]) {
                    self.contexts = contexts
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(contexts, forKey: "contexts")
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }

        /// Set status check contexts
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#set-status-check-contexts)
        public func put(_ body: PutRequest? = nil) -> Request<[String]> {
            Request(method: "PUT", url: path, body: body, id: "repos/set-status-check-contexts")
        }

        public enum PutRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "contexts" : [
            ///     "contexts"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// The name of the status checks
                public var contexts: [String]

                public init(contexts: [String]) {
                    self.contexts = contexts
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(contexts, forKey: "contexts")
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }

        /// Remove status check contexts
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-status-check-contexts)
        public func delete(_ body: DeleteRequest? = nil) -> Request<[String]> {
            Request(method: "DELETE", url: path, body: body, id: "repos/remove-status-check-contexts")
        }

        public enum DeleteRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "contexts" : [
            ///     "contexts"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// The name of the status checks
                public var contexts: [String]

                public init(contexts: [String]) {
                    self.contexts = contexts
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(contexts, forKey: "contexts")
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }
    }
}
