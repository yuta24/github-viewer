// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var lock: Lock {
        Lock(path: path + "/lock")
    }

    public struct Lock {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/lock`
        public let path: String

        /// Lock an issue
        ///
        /// Users with push access can lock an issue or pull request's conversation.
        /// 
        /// Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#lock-an-issue)
        public func put(lockReason: PutRequest.LockReason? = nil) -> Request<Void> {
            Request(method: "PUT", url: path, body: PutRequest(lockReason: lockReason), id: "issues/lock")
        }

        public struct PutRequest: Encodable {
            /// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
            /// \* `off-topic`  
            /// \* `too heated`  
            /// \* `resolved`  
            /// \* `spam`
            public var lockReason: LockReason?

            /// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
            /// \* `off-topic`  
            /// \* `too heated`  
            /// \* `resolved`  
            /// \* `spam`
            public enum LockReason: String, Codable, CaseIterable {
                case offTopic = "off-topic"
                case tooHeated = "too heated"
                case resolved
                case spam
            }

            public init(lockReason: LockReason? = nil) {
                self.lockReason = lockReason
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(lockReason, forKey: "lock_reason")
            }
        }

        /// Unlock an issue
        ///
        /// Users with push access can unlock an issue's conversation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#unlock-an-issue)
        public var delete: Request<Void> {
            Request(method: "DELETE", url: path, id: "issues/unlock")
        }
    }
}
