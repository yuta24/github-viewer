// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber.Reviews.WithReviewID {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events`
        public let path: String

        /// Submit a review for a pull request
        ///
        /// Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls#create-a-review-for-a-pull-request)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request)
        public func post(_ body: PostRequest) -> Request<GitHubAPI.PullRequestReview> {
            Request(method: "POST", url: path, body: body, id: "pulls/submit-review")
        }

        public struct PostRequest: Encodable {
            /// The body text of the pull request review
            public var body: String?
            /// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
            public var event: Event

            /// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
            public enum Event: String, Codable, CaseIterable {
                case approve = "APPROVE"
                case requestChanges = "REQUEST_CHANGES"
                case comment = "COMMENT"
            }

            public init(body: String? = nil, event: Event) {
                self.body = body
                self.event = event
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(body, forKey: "body")
                try values.encode(event, forKey: "event")
            }
        }
    }
}
