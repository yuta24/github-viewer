// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Releases {
    public func releaseID(_ releaseID: Int) -> WithReleaseID {
        WithReleaseID(path: "\(path)/\(releaseID)")
    }

    public struct WithReleaseID {
        /// Path: `/repos/{owner}/{repo}/releases/{release_id}`
        public let path: String

        /// Get a release
        ///
        /// **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-release)
        public var get: Request<GitHubAPI.Release> {
            Request(method: "GET", url: path, id: "repos/get-release")
        }

        /// Update a release
        ///
        /// Users with push access to the repository can edit a release.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#update-a-release)
        public func patch(_ body: PatchRequest? = nil) -> Request<GitHubAPI.Release> {
            Request(method: "PATCH", url: path, body: body, id: "repos/update-release")
        }

        public struct PatchRequest: Encodable {
            /// The name of the tag.
            public var tagName: String?
            /// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
            public var targetCommitish: String?
            /// The name of the release.
            public var name: String?
            /// Text describing the contents of the tag.
            public var body: String?
            /// `true` makes the release a draft, and `false` publishes the release.
            public var isDraft: Bool?
            /// `true` to identify the release as a prerelease, `false` to identify the release as a full release.
            public var isPrerelease: Bool?
            /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
            public var discussionCategoryName: String?

            public init(tagName: String? = nil, targetCommitish: String? = nil, name: String? = nil, body: String? = nil, isDraft: Bool? = nil, isPrerelease: Bool? = nil, discussionCategoryName: String? = nil) {
                self.tagName = tagName
                self.targetCommitish = targetCommitish
                self.name = name
                self.body = body
                self.isDraft = isDraft
                self.isPrerelease = isPrerelease
                self.discussionCategoryName = discussionCategoryName
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(tagName, forKey: "tag_name")
                try values.encodeIfPresent(targetCommitish, forKey: "target_commitish")
                try values.encodeIfPresent(name, forKey: "name")
                try values.encodeIfPresent(body, forKey: "body")
                try values.encodeIfPresent(isDraft, forKey: "draft")
                try values.encodeIfPresent(isPrerelease, forKey: "prerelease")
                try values.encodeIfPresent(discussionCategoryName, forKey: "discussion_category_name")
            }
        }

        /// Delete a release
        ///
        /// Users with push access to the repository can delete a release.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-release)
        public var delete: Request<Void> {
            Request(method: "DELETE", url: path, id: "repos/delete-release")
        }
    }
}
