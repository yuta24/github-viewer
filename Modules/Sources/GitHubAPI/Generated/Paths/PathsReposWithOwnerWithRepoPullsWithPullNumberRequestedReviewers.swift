// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var requestedReviewers: RequestedReviewers {
        RequestedReviewers(path: path + "/requested_reviewers")
    }

    public struct RequestedReviewers {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`
        public let path: String

        /// Get all requested reviewers for a pull request
        ///
        /// Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#get-all-requested-reviewers-for-a-pull-request)
        public var get: Request<GitHubAPI.PullRequestReviewRequest> {
            Request(method: "GET", url: path, id: "pulls/list-requested-reviewers")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        /// Request reviewers for a pull request
        ///
        /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request)
        public func post(_ body: PostRequest? = nil) -> Request<GitHubAPI.PullRequestSimple> {
            Request(method: "POST", url: path, body: body, id: "pulls/request-reviewers")
        }

        public struct PostRequest: Encodable {
            public var a: A?
            public var b: B?

            public struct A: Encodable {
                public var reviewers: AnyJSON

                public init(reviewers: AnyJSON) {
                    self.reviewers = reviewers
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(reviewers, forKey: "reviewers")
                }
            }

            public struct B: Encodable {
                public var teamReviewers: AnyJSON

                public init(teamReviewers: AnyJSON) {
                    self.teamReviewers = teamReviewers
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(teamReviewers, forKey: "team_reviewers")
                }
            }

            public init(a: A? = nil, b: B? = nil) {
                self.a = a
                self.b = b
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                if let value = a { try container.encode(value) }
                if let value = b { try container.encode(value) }
            }
        }

        /// Remove requested reviewers from a pull request
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request)
        public func delete(_ body: DeleteRequest) -> Request<GitHubAPI.PullRequestSimple> {
            Request(method: "DELETE", url: path, body: body, id: "pulls/remove-requested-reviewers")
        }

        public struct DeleteRequest: Encodable {
            /// An array of user `login`s that will be removed.
            public var reviewers: [String]
            /// An array of team `slug`s that will be removed.
            public var teamReviewers: [String]?

            public init(reviewers: [String], teamReviewers: [String]? = nil) {
                self.reviewers = reviewers
                self.teamReviewers = teamReviewers
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(reviewers, forKey: "reviewers")
                try values.encodeIfPresent(teamReviewers, forKey: "team_reviewers")
            }
        }
    }
}
