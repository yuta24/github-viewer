// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.CodeScanning.Alerts.WithAlertNumber {
    public var instances: Instances {
        Instances(path: path + "/instances")
    }

    public struct Instances {
        /// Path: `/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances`
        public let path: String

        /// List instances of a code scanning alert
        ///
        /// Lists all instances of the specified code scanning alert.
        /// You must use an access token with the `security_events` scope to use this endpoint with private repos,
        /// the `public_repo` scope also grants permission to read security events on public repos only.
        /// GitHub Apps must have the `security_events` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert)
        public func get(parameters: GetParameters? = nil) -> Request<[GitHubAPI.CodeScanningAlertInstance]> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "code-scanning/list-alert-instances")
        }

        public struct GetParameters {
            public var page: Int?
            public var perPage: Int?
            /// The full Git reference, formatted as `refs/heads/<branch name>`,
            /// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
            public var ref: String?

            public init(page: Int? = nil, perPage: Int? = nil, ref: String? = nil) {
                self.page = page
                self.perPage = perPage
                self.ref = ref
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(page, forKey: "page")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(ref, forKey: "ref")
                return encoder.items
            }
        }
    }
}
