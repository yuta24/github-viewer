// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Teams.WithTeamID {
    public var members: Members {
        Members(path: path + "/members")
    }

    public struct Members {
        /// Path: `/teams/{team_id}/members`
        public let path: String

        /// List team members (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
        /// 
        /// Team members will include the members of child teams.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-team-members-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get(parameters: GetParameters? = nil) -> Request<[GitHubAPI.SimpleUser]> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "teams/list-members-legacy")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var role: Role?
            public var perPage: Int?
            public var page: Int?

            public enum Role: String, Codable, CaseIterable {
                case member
                case maintainer
                case all
            }

            public init(role: Role? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.role = role
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(role, forKey: "role")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}
