// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Projects {
    public func projectID(_ projectID: Int) -> WithProjectID {
        WithProjectID(path: "\(path)/\(projectID)")
    }

    public struct WithProjectID {
        /// Path: `/projects/{project_id}`
        public let path: String

        /// Get a project
        ///
        /// Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#get-a-project)
        public var get: Request<GitHubAPI.Project> {
            Request(method: "GET", url: path, id: "projects/get")
        }

        /// Update a project
        ///
        /// Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#update-a-project)
        public func patch(_ body: PatchRequest? = nil) -> Request<GitHubAPI.Project> {
            Request(method: "PATCH", url: path, body: body, id: "projects/update")
        }

        public struct PatchRequest: Encodable {
            /// Name of the project
            ///
            /// Example: "Week One Sprint"
            public var name: String?
            /// Body of the project
            ///
            /// Example: "This project represents the sprint of the first week in January"
            public var body: String?
            /// State of the project; either 'open' or 'closed'
            ///
            /// Example: "open"
            public var state: String?
            /// The baseline permission that all organization members have on this project
            public var organizationPermission: OrganizationPermission?
            /// Whether or not this project can be seen by everyone.
            public var isPrivate: Bool?

            /// The baseline permission that all organization members have on this project
            public enum OrganizationPermission: String, Codable, CaseIterable {
                case read
                case write
                case admin
                case `none`
            }

            public init(name: String? = nil, body: String? = nil, state: String? = nil, organizationPermission: OrganizationPermission? = nil, isPrivate: Bool? = nil) {
                self.name = name
                self.body = body
                self.state = state
                self.organizationPermission = organizationPermission
                self.isPrivate = isPrivate
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(name, forKey: "name")
                try values.encodeIfPresent(body, forKey: "body")
                try values.encodeIfPresent(state, forKey: "state")
                try values.encodeIfPresent(organizationPermission, forKey: "organization_permission")
                try values.encodeIfPresent(isPrivate, forKey: "private")
            }
        }

        /// Delete a project
        ///
        /// Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#delete-a-project)
        public var delete: Request<Void> {
            Request(method: "DELETE", url: path, id: "projects/delete")
        }
    }
}
