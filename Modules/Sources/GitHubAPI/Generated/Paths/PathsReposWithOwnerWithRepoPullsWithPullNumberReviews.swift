// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var reviews: Reviews {
        Reviews(path: path + "/reviews")
    }

    public struct Reviews {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/reviews`
        public let path: String

        /// List reviews for a pull request
        ///
        /// The list of reviews returns in chronological order.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-reviews-for-a-pull-request)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[GitHubAPI.PullRequestReview]> {
            Request(method: "GET", url: path, query: makeGetQuery(perPage, page), id: "pulls/list-reviews")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a review for a pull request
        ///
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        /// 
        /// Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request)."
        /// 
        /// **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
        /// 
        /// The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#create-a-review-for-a-pull-request)
        public func post(_ body: PostRequest? = nil) -> Request<GitHubAPI.PullRequestReview> {
            Request(method: "POST", url: path, body: body, id: "pulls/create-review")
        }

        public struct PostRequest: Encodable {
            /// The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
            public var commitID: String?
            /// **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
            public var body: String?
            /// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request) when you are ready.
            public var event: Event?
            /// Use the following table to specify the location, destination, and contents of the draft review comment.
            public var comments: [Commants]?

            /// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request) when you are ready.
            public enum Event: String, Codable, CaseIterable {
                case approve = "APPROVE"
                case requestChanges = "REQUEST_CHANGES"
                case comment = "COMMENT"
            }

            public struct Commants: Encodable {
                /// The relative path to the file that necessitates a review comment.
                public var path: String
                /// The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
                public var position: Int?
                /// Text of the review comment.
                public var body: String
                /// Example: 28
                public var line: Int?
                /// Example: "RIGHT"
                public var side: String?
                /// Example: 26
                public var startLine: Int?
                /// Example: "LEFT"
                public var startSide: String?

                public init(path: String, position: Int? = nil, body: String, line: Int? = nil, side: String? = nil, startLine: Int? = nil, startSide: String? = nil) {
                    self.path = path
                    self.position = position
                    self.body = body
                    self.line = line
                    self.side = side
                    self.startLine = startLine
                    self.startSide = startSide
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(path, forKey: "path")
                    try values.encodeIfPresent(position, forKey: "position")
                    try values.encode(body, forKey: "body")
                    try values.encodeIfPresent(line, forKey: "line")
                    try values.encodeIfPresent(side, forKey: "side")
                    try values.encodeIfPresent(startLine, forKey: "start_line")
                    try values.encodeIfPresent(startSide, forKey: "start_side")
                }
            }

            public init(commitID: String? = nil, body: String? = nil, event: Event? = nil, comments: [Commants]? = nil) {
                self.commitID = commitID
                self.body = body
                self.event = event
                self.comments = comments
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(commitID, forKey: "commit_id")
                try values.encodeIfPresent(body, forKey: "body")
                try values.encodeIfPresent(event, forKey: "event")
                try values.encodeIfPresent(comments, forKey: "comments")
            }
        }
    }
}
