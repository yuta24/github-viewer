// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Enterprises.WithEnterprise.SecretScanning {
    public var alerts: Alerts {
        Alerts(path: path + "/alerts")
    }

    public struct Alerts {
        /// Path: `/enterprises/{enterprise}/secret-scanning/alerts`
        public let path: String

        /// List secret scanning alerts for an enterprise
        ///
        /// Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
        /// To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-enterprise)
        public func get(parameters: GetParameters? = nil) -> Request<[GitHubAPI.OrganizationSecretScanningAlert]> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "secret-scanning/list-alerts-for-enterprise")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var state: State?
            public var secretType: String?
            public var resolution: String?
            public var sort: Sort?
            public var direction: Direction?
            public var perPage: Int?
            public var before: String?
            public var after: String?

            public enum State: String, Codable, CaseIterable {
                case `open`
                case resolved
            }

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(state: State? = nil, secretType: String? = nil, resolution: String? = nil, sort: Sort? = nil, direction: Direction? = nil, perPage: Int? = nil, before: String? = nil, after: String? = nil) {
                self.state = state
                self.secretType = secretType
                self.resolution = resolution
                self.sort = sort
                self.direction = direction
                self.perPage = perPage
                self.before = before
                self.after = after
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(state, forKey: "state")
                encoder.encode(secretType, forKey: "secret_type")
                encoder.encode(resolution, forKey: "resolution")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(before, forKey: "before")
                encoder.encode(after, forKey: "after")
                return encoder.items
            }
        }
    }
}
