// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var refs: Refs {
        Refs(path: path + "/refs")
    }

    public struct Refs {
        /// Path: `/repos/{owner}/{repo}/git/refs`
        public let path: String

        /// Create a reference
        ///
        /// Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#create-a-reference)
        public func post(_ body: PostRequest) -> Request<GitHubAPI.GitRef> {
            Request(method: "POST", url: path, body: body, id: "git/create-ref")
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
            public var ref: String
            /// The SHA1 value for this reference.
            public var sha: String
            /// Example: "refs/heads/newbranch"
            public var key: String?

            public init(ref: String, sha: String, key: String? = nil) {
                self.ref = ref
                self.sha = sha
                self.key = key
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(ref, forKey: "ref")
                try values.encode(sha, forKey: "sha")
                try values.encodeIfPresent(key, forKey: "key")
            }
        }
    }
}
