// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths {
    public static var gists: Gists {
        Gists(path: "/gists")
    }

    public struct Gists {
        /// Path: `/gists`
        public let path: String

        /// List gists for the authenticated user
        ///
        /// Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-gists-for-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<[GitHubAPI.BaseGist]> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "gists/list")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public init(since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create a gist
        ///
        /// Allows you to add a new gist with one or more files.
        /// 
        /// **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#create-a-gist)
        public func post(_ body: PostRequest) -> Request<GitHubAPI.GistSimple> {
            Request(method: "POST", url: path, body: body, id: "gists/create")
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// Description of the gist
            ///
            /// Example: "Example Ruby script"
            public var description: String?
            /// Names and content for the files that make up the gist
            ///
            /// Example:
            ///
            /// {
            ///   "hello.rb" : {
            ///     "content" : "puts \"Hello, World!\""
            ///   }
            /// }
            public var files: [String: File]
            public var `public`: Public?

            public struct File: Encodable {
                /// Content of the file
                public var content: String

                public init(content: String) {
                    self.content = content
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(content, forKey: "content")
                }
            }

            public enum Public: Encodable {
                case bool(Bool)
                case object(Object)

                /// Example: true
                public enum Object: String, Codable, CaseIterable {
                    case `true`
                    case `false`
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .bool(let value): try container.encode(value)
                    case .object(let value): try container.encode(value)
                    }
                }
            }

            public init(description: String? = nil, files: [String: File], `public`: Public? = nil) {
                self.description = description
                self.files = files
                self.public = `public`
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(description, forKey: "description")
                try values.encode(files, forKey: "files")
                try values.encodeIfPresent(`public`, forKey: "public")
            }
        }
    }
}
