// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Releases {
    public var generateNotes: GenerateNotes {
        GenerateNotes(path: path + "/generate-notes")
    }

    public struct GenerateNotes {
        /// Path: `/repos/{owner}/{repo}/releases/generate-notes`
        public let path: String

        /// Generate release notes content for a release
        ///
        /// Generate a name and body describing a [release](https://docs.github.com/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#generate-release-notes)
        public func post(_ body: PostRequest) -> Request<GitHubAPI.ReleaseNotesContent> {
            Request(method: "POST", url: path, body: body, id: "repos/generate-release-notes")
        }

        public struct PostRequest: Encodable {
            /// The tag name for the release. This can be an existing tag or a new one.
            public var tagName: String
            /// Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
            public var targetCommitish: String?
            /// The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
            public var previousTagName: String?
            /// Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
            public var configurationFilePath: String?

            public init(tagName: String, targetCommitish: String? = nil, previousTagName: String? = nil, configurationFilePath: String? = nil) {
                self.tagName = tagName
                self.targetCommitish = targetCommitish
                self.previousTagName = previousTagName
                self.configurationFilePath = configurationFilePath
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(tagName, forKey: "tag_name")
                try values.encodeIfPresent(targetCommitish, forKey: "target_commitish")
                try values.encodeIfPresent(previousTagName, forKey: "previous_tag_name")
                try values.encodeIfPresent(configurationFilePath, forKey: "configuration_file_path")
            }
        }
    }
}
