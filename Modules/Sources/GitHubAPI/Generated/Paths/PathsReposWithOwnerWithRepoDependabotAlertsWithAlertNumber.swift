// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Dependabot.Alerts {
    public func alertNumber(_ alertNumber: Int) -> WithAlertNumber {
        WithAlertNumber(path: "\(path)/\(alertNumber)")
    }

    public struct WithAlertNumber {
        /// Path: `/repos/{owner}/{repo}/dependabot/alerts/{alert_number}`
        public let path: String

        /// Get a Dependabot alert
        ///
        /// You must use an access token with the `security_events` scope to use this endpoint with private repositories.
        /// You can also use tokens with the `public_repo` scope for public repositories only.
        /// GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/dependabot#get-a-dependabot-alert)
        public var get: Request<GitHubAPI.DependabotAlert> {
            Request(method: "GET", url: path, id: "dependabot/get-alert")
        }

        /// Update a Dependabot alert
        ///
        /// You must use an access token with the `security_events` scope to use this endpoint with private repositories.
        /// You can also use tokens with the `public_repo` scope for public repositories only.
        /// GitHub Apps must have **Dependabot alerts** write permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/dependabot#update-a-dependabot-alert)
        public func patch(_ body: PatchRequest) -> Request<GitHubAPI.DependabotAlert> {
            Request(method: "PATCH", url: path, body: body, id: "dependabot/update-alert")
        }

        public struct PatchRequest: Encodable {
            /// Sets the status of the dependabot alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
            public var state: GitHubAPI.DependabotAlertSetState
            /// **Required when the `state` is `dismissed`.** The reason for dismissing the Dependabot alert.
            public var dismissedReason: GitHubAPI.DependabotAlertDismissedReason?
            /// An optional comment associated with the alert's dismissal. The maximum size is 280 characters.
            public var dismissedComment: String?

            public init(state: GitHubAPI.DependabotAlertSetState, dismissedReason: GitHubAPI.DependabotAlertDismissedReason? = nil, dismissedComment: String? = nil) {
                self.state = state
                self.dismissedReason = dismissedReason
                self.dismissedComment = dismissedComment
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(state, forKey: "state")
                try values.encodeIfPresent(dismissedReason, forKey: "dismissed_reason")
                try values.encodeIfPresent(dismissedComment, forKey: "dismissed_comment")
            }
        }
    }
}
