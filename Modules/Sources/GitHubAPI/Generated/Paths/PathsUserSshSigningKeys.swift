// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.User {
    public var sshSigningKeys: SshSigningKeys {
        SshSigningKeys(path: path + "/ssh_signing_keys")
    }

    public struct SshSigningKeys {
        /// Path: `/user/ssh_signing_keys`
        public let path: String

        /// List SSH signing keys for the authenticated user
        ///
        /// Lists the SSH signing keys for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-public-ssh-signing-keys-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[GitHubAPI.SshSigningKey]> {
            Request(method: "GET", url: path, query: makeGetQuery(perPage, page), id: "users/list-ssh-signing-keys-for-authenticated-user")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a SSH signing key for the authenticated user
        ///
        /// Creates an SSH signing key for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `write:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#create-an-ssh-signing-key-for-the-authenticated-user)
        public func post(_ body: PostRequest) -> Request<GitHubAPI.SshSigningKey> {
            Request(method: "POST", url: path, body: body, id: "users/create-ssh-signing-key-for-authenticated-user")
        }

        public struct PostRequest: Encodable {
            /// A descriptive name for the new key.
            ///
            /// Example: "Personal MacBook Air"
            public var title: String?
            /// The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
            public var key: String

            public init(title: String? = nil, key: String) {
                self.title = title
                self.key = key
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(title, forKey: "title")
                try values.encode(key, forKey: "key")
            }
        }
    }
}
