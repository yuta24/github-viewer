// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection {
    public var requiredPullRequestReviews: RequiredPullRequestReviews {
        RequiredPullRequestReviews(path: path + "/required_pull_request_reviews")
    }

    public struct RequiredPullRequestReviews {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`
        public let path: String

        /// Get pull request review protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-pull-request-review-protection)
        public var get: Request<GitHubAPI.ProtectedBranchPullRequestReview> {
            Request(method: "GET", url: path, id: "repos/get-pull-request-review-protection")
        }

        /// Update pull request review protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
        /// 
        /// **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#update-pull-request-review-protection)
        public func patch(_ body: PatchRequest? = nil) -> Request<GitHubAPI.ProtectedBranchPullRequestReview> {
            Request(method: "PATCH", url: path, body: body, id: "repos/update-pull-request-review-protection")
        }

        public struct PatchRequest: Encodable {
            /// Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
            public var dismissalRestrictions: DismissalRestrictions?
            /// Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
            public var dismissStaleReviews: Bool?
            /// Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
            public var requireCodeOwnerReviews: Bool?
            /// Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
            public var requiredApprovingReviewCount: Int?
            /// Allow specific users, teams, or apps to bypass pull request requirements.
            public var bypassPullRequestAllowances: BypassPullRequestAllowances?

            /// Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
            public struct DismissalRestrictions: Encodable {
                /// The list of user `login`s with dismissal access
                public var users: [String]?
                /// The list of team `slug`s with dismissal access
                public var teams: [String]?
                /// The list of app `slug`s with dismissal access
                public var apps: [String]?

                public init(users: [String]? = nil, teams: [String]? = nil, apps: [String]? = nil) {
                    self.users = users
                    self.teams = teams
                    self.apps = apps
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encodeIfPresent(users, forKey: "users")
                    try values.encodeIfPresent(teams, forKey: "teams")
                    try values.encodeIfPresent(apps, forKey: "apps")
                }
            }

            /// Allow specific users, teams, or apps to bypass pull request requirements.
            public struct BypassPullRequestAllowances: Encodable {
                /// The list of user `login`s allowed to bypass pull request requirements.
                public var users: [String]?
                /// The list of team `slug`s allowed to bypass pull request requirements.
                public var teams: [String]?
                /// The list of app `slug`s allowed to bypass pull request requirements.
                public var apps: [String]?

                public init(users: [String]? = nil, teams: [String]? = nil, apps: [String]? = nil) {
                    self.users = users
                    self.teams = teams
                    self.apps = apps
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encodeIfPresent(users, forKey: "users")
                    try values.encodeIfPresent(teams, forKey: "teams")
                    try values.encodeIfPresent(apps, forKey: "apps")
                }
            }

            public init(dismissalRestrictions: DismissalRestrictions? = nil, dismissStaleReviews: Bool? = nil, requireCodeOwnerReviews: Bool? = nil, requiredApprovingReviewCount: Int? = nil, bypassPullRequestAllowances: BypassPullRequestAllowances? = nil) {
                self.dismissalRestrictions = dismissalRestrictions
                self.dismissStaleReviews = dismissStaleReviews
                self.requireCodeOwnerReviews = requireCodeOwnerReviews
                self.requiredApprovingReviewCount = requiredApprovingReviewCount
                self.bypassPullRequestAllowances = bypassPullRequestAllowances
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(dismissalRestrictions, forKey: "dismissal_restrictions")
                try values.encodeIfPresent(dismissStaleReviews, forKey: "dismiss_stale_reviews")
                try values.encodeIfPresent(requireCodeOwnerReviews, forKey: "require_code_owner_reviews")
                try values.encodeIfPresent(requiredApprovingReviewCount, forKey: "required_approving_review_count")
                try values.encodeIfPresent(bypassPullRequestAllowances, forKey: "bypass_pull_request_allowances")
            }
        }

        /// Delete pull request review protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-pull-request-review-protection)
        public var delete: Request<Void> {
            Request(method: "DELETE", url: path, id: "repos/delete-pull-request-review-protection")
        }
    }
}
