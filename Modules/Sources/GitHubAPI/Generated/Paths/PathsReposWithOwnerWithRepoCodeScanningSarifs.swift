// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.CodeScanning {
    public var sarifs: Sarifs {
        Sarifs(path: path + "/sarifs")
    }

    public struct Sarifs {
        /// Path: `/repos/{owner}/{repo}/code-scanning/sarifs`
        public let path: String

        /// Upload an analysis as SARIF data
        ///
        /// Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
        /// 
        /// There are two places where you can upload code scanning results.
        ///  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
        ///  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
        /// 
        /// You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
        /// 
        /// ```
        /// gzip -c analysis-data.sarif | base64 -w0
        /// ```
        /// 
        /// SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
        /// 
        /// The `202 Accepted`, response includes an `id` value.
        /// You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
        /// For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#upload-a-sarif-file)
        public func post(_ body: PostRequest) -> Request<GitHubAPI.CodeScanningSarifsReceipt> {
            Request(method: "POST", url: path, body: body, id: "code-scanning/upload-sarif")
        }

        public struct PostRequest: Encodable {
            /// The SHA of the commit to which the analysis you are uploading relates.
            public var commitSha: String
            /// The full Git reference, formatted as `refs/heads/<branch name>`,
            /// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
            public var ref: String
            /// A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
            public var sarif: String
            /// The base directory used in the analysis, as it appears in the SARIF file.
            /// This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
            ///
            /// Example: "file:///github/workspace/"
            public var checkoutUri: URL?
            /// The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
            public var startedAt: Date?
            /// The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
            public var toolName: String?

            public init(commitSha: String, ref: String, sarif: String, checkoutUri: URL? = nil, startedAt: Date? = nil, toolName: String? = nil) {
                self.commitSha = commitSha
                self.ref = ref
                self.sarif = sarif
                self.checkoutUri = checkoutUri
                self.startedAt = startedAt
                self.toolName = toolName
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(commitSha, forKey: "commit_sha")
                try values.encode(ref, forKey: "ref")
                try values.encode(sarif, forKey: "sarif")
                try values.encodeIfPresent(checkoutUri, forKey: "checkout_uri")
                try values.encodeIfPresent(startedAt, forKey: "started_at")
                try values.encodeIfPresent(toolName, forKey: "tool_name")
            }
        }
    }
}
