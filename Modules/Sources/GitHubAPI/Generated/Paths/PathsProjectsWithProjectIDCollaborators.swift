// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Projects.WithProjectID {
    public var collaborators: Collaborators {
        Collaborators(path: path + "/collaborators")
    }

    public struct Collaborators {
        /// Path: `/projects/{project_id}/collaborators`
        public let path: String

        /// List project collaborators
        ///
        /// Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#list-project-collaborators)
        public func get(parameters: GetParameters? = nil) -> Request<[GitHubAPI.SimpleUser]> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "projects/list-collaborators")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var affiliation: Affiliation?
            public var perPage: Int?
            public var page: Int?

            public enum Affiliation: String, Codable, CaseIterable {
                case outside
                case direct
                case all
            }

            public init(affiliation: Affiliation? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.affiliation = affiliation
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(affiliation, forKey: "affiliation")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}
