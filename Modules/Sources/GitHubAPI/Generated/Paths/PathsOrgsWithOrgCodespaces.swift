// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Orgs.WithOrg {
    public var codespaces: Codespaces {
        Codespaces(path: path + "/codespaces")
    }

    public struct Codespaces {
        /// Path: `/orgs/{org}/codespaces`
        public let path: String

        /// List codespaces for the organization
        ///
        /// Lists the codespaces associated to a specified organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-in-organization)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: makeGetQuery(perPage, page), id: "codespaces/list-in-organization")
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var codespaces: [GitHubAPI.Codespace]

            public init(totalCount: Int, codespaces: [GitHubAPI.Codespace]) {
                self.totalCount = totalCount
                self.codespaces = codespaces
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
                self.codespaces = try values.decode([GitHubAPI.Codespace].self, forKey: "codespaces")
            }
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}
