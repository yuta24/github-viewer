// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Orgs.WithOrg.Actions.Cache {
    public var usageByRepository: UsageByRepository {
        UsageByRepository(path: path + "/usage-by-repository")
    }

    public struct UsageByRepository {
        /// Path: `/orgs/{org}/actions/cache/usage-by-repository`
        public let path: String

        /// List repositories with GitHub Actions cache usage for an organization
        ///
        /// Lists repositories and their GitHub Actions cache usage for an organization.
        /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
        /// You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-repositories-with-github-actions-cache-usage-for-an-organization)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: makeGetQuery(perPage, page), id: "actions/get-actions-cache-usage-by-repo-for-org")
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var repositoryCacheUsages: [GitHubAPI.ActionsCacheUsageByRepository]

            public init(totalCount: Int, repositoryCacheUsages: [GitHubAPI.ActionsCacheUsageByRepository]) {
                self.totalCount = totalCount
                self.repositoryCacheUsages = repositoryCacheUsages
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
                self.repositoryCacheUsages = try values.decode([GitHubAPI.ActionsCacheUsageByRepository].self, forKey: "repository_cache_usages")
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}
