// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Pages {
    public var deployment: Deployment {
        Deployment(path: path + "/deployment")
    }

    public struct Deployment {
        /// Path: `/repos/{owner}/{repo}/pages/deployment`
        public let path: String

        /// Create a GitHub Pages deployment
        ///
        /// Create a GitHub Pages deployment for a repository.
        /// 
        /// Users must have write permissions. GitHub Apps must have the `pages:write` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/pages#create-a-github-pages-deployment)
        public func post(_ body: PostRequest) -> Request<GitHubAPI.PageDeployment> {
            Request(method: "POST", url: path, body: body, id: "repos/create-pages-deployment")
        }

        /// The object used to create GitHub Pages deployment
        public struct PostRequest: Encodable {
            /// The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository.
            public var artifactURL: String
            /// The target environment for this GitHub Pages deployment.
            public var environment: String?
            /// A unique string that represents the version of the build for this deployment.
            public var pagesBuildVersion: String
            /// The OIDC token issued by GitHub Actions certifying the origin of the deployment.
            public var oidcToken: String

            public init(artifactURL: String, environment: String? = nil, pagesBuildVersion: String, oidcToken: String) {
                self.artifactURL = artifactURL
                self.environment = environment
                self.pagesBuildVersion = pagesBuildVersion
                self.oidcToken = oidcToken
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(artifactURL, forKey: "artifact_url")
                try values.encodeIfPresent(environment, forKey: "environment")
                try values.encode(pagesBuildVersion, forKey: "pages_build_version")
                try values.encode(oidcToken, forKey: "oidc_token")
            }
        }
    }
}
