// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Environments.WithEnvironmentName {
    public var deploymentBranchPolicies: DeploymentBranchPolicies {
        DeploymentBranchPolicies(path: path + "/deployment-branch-policies")
    }

    public struct DeploymentBranchPolicies {
        /// Path: `/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies`
        public let path: String

        /// List deployment branch policies
        ///
        /// Lists the deployment branch policies for an environment.
        /// 
        /// Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/deployments/branch-policies#list-deployment-branch-policies)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: makeGetQuery(perPage, page), id: "repos/list-deployment-branch-policies")
        }

        public struct GetResponse: Decodable {
            /// The number of deployment branch policies for the environment.
            public var totalCount: Int
            public var branchPolicies: [GitHubAPI.DeploymentBranchPolicy]

            public init(totalCount: Int, branchPolicies: [GitHubAPI.DeploymentBranchPolicy]) {
                self.totalCount = totalCount
                self.branchPolicies = branchPolicies
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
                self.branchPolicies = try values.decode([GitHubAPI.DeploymentBranchPolicy].self, forKey: "branch_policies")
            }
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a deployment branch policy
        ///
        /// Creates a deployment branch policy for an environment.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/deployments/branch-policies#create-deployment-branch-policy)
        public func post(_ body: GitHubAPI.DeploymentBranchPolicyNamePattern) -> Request<GitHubAPI.DeploymentBranchPolicy> {
            Request(method: "POST", url: path, body: body, id: "repos/create-deployment-branch-policy")
        }
    }
}
