// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Labels {
    public func name(_ name: String) -> WithName {
        WithName(path: "\(path)/\(name)")
    }

    public struct WithName {
        /// Path: `/repos/{owner}/{repo}/labels/{name}`
        public let path: String

        /// Get a label
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#get-a-label)
        public var get: Request<GitHubAPI.Label> {
            Request(method: "GET", url: path, id: "issues/get-label")
        }

        /// Update a label
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#update-a-label)
        public func patch(_ body: PatchRequest? = nil) -> Request<GitHubAPI.Label> {
            Request(method: "PATCH", url: path, body: body, id: "issues/update-label")
        }

        public struct PatchRequest: Encodable {
            /// The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
            public var newName: String?
            /// The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
            public var color: String?
            /// A short description of the label. Must be 100 characters or fewer.
            public var description: String?

            public init(newName: String? = nil, color: String? = nil, description: String? = nil) {
                self.newName = newName
                self.color = color
                self.description = description
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(newName, forKey: "new_name")
                try values.encodeIfPresent(color, forKey: "color")
                try values.encodeIfPresent(description, forKey: "description")
            }
        }

        /// Delete a label
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#delete-a-label)
        public var delete: Request<Void> {
            Request(method: "DELETE", url: path, id: "issues/delete-label")
        }
    }
}
