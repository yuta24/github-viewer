// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/repos/{owner}/{repo}/labels`
        public let path: String

        /// List labels for a repository
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-labels-for-a-repository)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[GitHubAPI.Label]> {
            Request(method: "GET", url: path, query: makeGetQuery(perPage, page), id: "issues/list-labels-for-repo")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a label
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#create-a-label)
        public func post(_ body: PostRequest) -> Request<GitHubAPI.Label> {
            Request(method: "POST", url: path, body: body, id: "issues/create-label")
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
            public var name: String
            /// The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
            public var color: String?
            /// A short description of the label. Must be 100 characters or fewer.
            public var description: String?

            public init(name: String, color: String? = nil, description: String? = nil) {
                self.name = name
                self.color = color
                self.description = description
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(name, forKey: "name")
                try values.encodeIfPresent(color, forKey: "color")
                try values.encodeIfPresent(description, forKey: "description")
            }
        }
    }
}
