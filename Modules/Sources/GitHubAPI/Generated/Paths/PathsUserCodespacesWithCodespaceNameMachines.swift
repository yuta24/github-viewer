// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.User.Codespaces.WithCodespaceName {
    public var machines: Machines {
        Machines(path: path + "/machines")
    }

    public struct Machines {
        /// Path: `/user/codespaces/{codespace_name}/machines`
        public let path: String

        /// List machine types for a codespace
        ///
        /// List the machine types a codespace can transition to use.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        /// 
        /// GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-machine-types-for-a-codespace)
        public var get: Request<GetResponse> {
            Request(method: "GET", url: path, id: "codespaces/codespace-machines-for-authenticated-user")
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var machines: [GitHubAPI.CodespaceMachine]

            public init(totalCount: Int, machines: [GitHubAPI.CodespaceMachine]) {
                self.totalCount = totalCount
                self.machines = machines
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
                self.machines = try values.decode([GitHubAPI.CodespaceMachine].self, forKey: "machines")
            }
        }
    }
}
