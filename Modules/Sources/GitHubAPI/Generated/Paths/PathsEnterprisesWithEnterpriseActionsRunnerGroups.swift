// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Enterprises.WithEnterprise.Actions {
    public var runnerGroups: RunnerGroups {
        RunnerGroups(path: path + "/runner-groups")
    }

    public struct RunnerGroups {
        /// Path: `/enterprises/{enterprise}/actions/runner-groups`
        public let path: String

        /// List self-hosted runner groups for an enterprise
        ///
        /// Lists all self-hosted runner groups for an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "enterprise-admin/list-self-hosted-runner-groups-for-enterprise")
        }

        public struct GetResponse: Decodable {
            public var totalCount: Double
            public var runnerGroups: [GitHubAPI.RunnerGroupsEnterprise]

            public init(totalCount: Double, runnerGroups: [GitHubAPI.RunnerGroupsEnterprise]) {
                self.totalCount = totalCount
                self.runnerGroups = runnerGroups
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalCount = try values.decode(Double.self, forKey: "total_count")
                self.runnerGroups = try values.decode([GitHubAPI.RunnerGroupsEnterprise].self, forKey: "runner_groups")
            }
        }

        public struct GetParameters {
            public var perPage: Int?
            public var page: Int?
            public var visibleToOrganization: String?

            public init(perPage: Int? = nil, page: Int? = nil, visibleToOrganization: String? = nil) {
                self.perPage = perPage
                self.page = page
                self.visibleToOrganization = visibleToOrganization
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(visibleToOrganization, forKey: "visible_to_organization")
                return encoder.items
            }
        }

        /// Create a self-hosted runner group for an enterprise
        ///
        /// Creates a new self-hosted runner group for an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise)
        public func post(_ body: PostRequest) -> Request<GitHubAPI.RunnerGroupsEnterprise> {
            Request(method: "POST", url: path, body: body, id: "enterprise-admin/create-self-hosted-runner-group-for-enterprise")
        }

        public struct PostRequest: Encodable {
            /// Name of the runner group.
            public var name: String
            /// Visibility of a runner group. You can select all organizations or select individual organization.
            public var visibility: Visibility?
            /// List of organization IDs that can access the runner group.
            public var selectedOrganizationIDs: [Int]?
            /// List of runner IDs to add to the runner group.
            public var runners: [Int]?
            /// Whether the runner group can be used by `public` repositories.
            public var allowsPublicRepositories: Bool
            /// If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
            public var isRestrictedToWorkflows: Bool
            /// List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
            public var selectedWorkflows: [String]?

            /// Visibility of a runner group. You can select all organizations or select individual organization.
            public enum Visibility: String, Codable, CaseIterable {
                case selected
                case all
            }

            public init(name: String, visibility: Visibility? = nil, selectedOrganizationIDs: [Int]? = nil, runners: [Int]? = nil, allowsPublicRepositories: Bool? = nil, isRestrictedToWorkflows: Bool? = nil, selectedWorkflows: [String]? = nil) {
                self.name = name
                self.visibility = visibility
                self.selectedOrganizationIDs = selectedOrganizationIDs
                self.runners = runners
                self.allowsPublicRepositories = allowsPublicRepositories ?? false
                self.isRestrictedToWorkflows = isRestrictedToWorkflows ?? false
                self.selectedWorkflows = selectedWorkflows
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(name, forKey: "name")
                try values.encodeIfPresent(visibility, forKey: "visibility")
                try values.encodeIfPresent(selectedOrganizationIDs, forKey: "selected_organization_ids")
                try values.encodeIfPresent(runners, forKey: "runners")
                try values.encodeIfPresent(allowsPublicRepositories, forKey: "allows_public_repositories")
                try values.encodeIfPresent(isRestrictedToWorkflows, forKey: "restricted_to_workflows")
                try values.encodeIfPresent(selectedWorkflows, forKey: "selected_workflows")
            }
        }
    }
}
