// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Gists {
    public var `public`: Public {
        Public(path: path + "/public")
    }

    public struct Public {
        /// Path: `/gists/public`
        public let path: String

        /// List public gists
        ///
        /// List public gists sorted by most recently updated to least recently updated.
        /// 
        /// Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-public-gists)
        public func get(parameters: GetParameters? = nil) -> Request<[GitHubAPI.BaseGist]> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "gists/list-public")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public init(since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}
