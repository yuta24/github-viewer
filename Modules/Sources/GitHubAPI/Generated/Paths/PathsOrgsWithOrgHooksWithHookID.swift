// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Orgs.WithOrg.Hooks {
    public func hookID(_ hookID: Int) -> WithHookID {
        WithHookID(path: "\(path)/\(hookID)")
    }

    public struct WithHookID {
        /// Path: `/orgs/{org}/hooks/{hook_id}`
        public let path: String

        /// Get an organization webhook
        ///
        /// Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-an-organization-webhook)
        public var get: Request<GitHubAPI.OrgHook> {
            Request(method: "GET", url: path, id: "orgs/get-webhook")
        }

        /// Update an organization webhook
        ///
        /// Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#update-an-organization-webhook)
        public func patch(_ body: PatchRequest? = nil) -> Request<GitHubAPI.OrgHook> {
            Request(method: "PATCH", url: path, body: body, id: "orgs/update-webhook")
        }

        public struct PatchRequest: Encodable {
            /// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
            public var config: Config?
            /// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
            public var events: [String]?
            /// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
            public var isActive: Bool
            /// Example: "web"
            public var name: String?

            /// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
            public struct Config: Encodable {
                /// The URL to which the payloads will be delivered.
                ///
                /// Example: "https://example.com/webhook"
                public var url: URL
                /// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
                ///
                /// Example: "json"
                public var contentType: String?
                /// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
                ///
                /// Example: "********"
                public var secret: String?
                public var insecureSSL: GitHubAPI.WebhookConfigInsecureSSL?

                public init(url: URL, contentType: String? = nil, secret: String? = nil, insecureSSL: GitHubAPI.WebhookConfigInsecureSSL? = nil) {
                    self.url = url
                    self.contentType = contentType
                    self.secret = secret
                    self.insecureSSL = insecureSSL
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(url, forKey: "url")
                    try values.encodeIfPresent(contentType, forKey: "content_type")
                    try values.encodeIfPresent(secret, forKey: "secret")
                    try values.encodeIfPresent(insecureSSL, forKey: "insecure_ssl")
                }
            }

            public init(config: Config? = nil, events: [String]? = nil, isActive: Bool? = nil, name: String? = nil) {
                self.config = config
                self.events = events
                self.isActive = isActive ?? true
                self.name = name
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(config, forKey: "config")
                try values.encodeIfPresent(events, forKey: "events")
                try values.encodeIfPresent(isActive, forKey: "active")
                try values.encodeIfPresent(name, forKey: "name")
            }
        }

        /// Delete an organization webhook
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#delete-an-organization-webhook)
        public var delete: Request<Void> {
            Request(method: "DELETE", url: path, id: "orgs/delete-webhook")
        }
    }
}
