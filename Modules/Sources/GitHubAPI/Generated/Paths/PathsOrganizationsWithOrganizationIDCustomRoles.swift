// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Organizations.WithOrganizationID {
    public var customRoles: CustomRoles {
        CustomRoles(path: path + "/custom_roles")
    }

    public struct CustomRoles {
        /// Path: `/organizations/{organization_id}/custom_roles`
        public let path: String

        /// List custom repository roles in an organization
        ///
        /// List the custom repository roles available in this organization. In order to see custom
        /// repository roles in an organization, the authenticated user must be an organization owner.
        /// 
        /// To use this endpoint the authenticated user must be an administrator for the organization or of an repository of the organizaiton and must use an access token with `admin:org repo` scope.
        /// GitHub Apps must have the `organization_custom_roles:read` organization permission to use this endpoint.
        /// 
        /// For more information on custom repository roles, see "[Managing custom repository roles for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-custom-repository-roles-in-an-organization)
        public var get: Request<GetResponse> {
            Request(method: "GET", url: path, id: "orgs/list-custom-roles")
        }

        public struct GetResponse: Decodable {
            /// The number of custom roles in this organization
            public var totalCount: Int?
            public var customRoles: [GitHubAPI.OrganizationCustomRepositoryRole]?

            public init(totalCount: Int? = nil, customRoles: [GitHubAPI.OrganizationCustomRepositoryRole]? = nil) {
                self.totalCount = totalCount
                self.customRoles = customRoles
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalCount = try values.decodeIfPresent(Int.self, forKey: "total_count")
                self.customRoles = try values.decodeIfPresent([GitHubAPI.OrganizationCustomRepositoryRole].self, forKey: "custom_roles")
            }
        }
    }
}
