// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo {
    public var releases: Releases {
        Releases(path: path + "/releases")
    }

    public struct Releases {
        /// Path: `/repos/{owner}/{repo}/releases`
        public let path: String

        /// List releases
        ///
        /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
        /// 
        /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-releases)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[GitHubAPI.Release]> {
            Request(method: "GET", url: path, query: makeGetQuery(perPage, page), id: "repos/list-releases")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a release
        ///
        /// Users with push access to the repository can create a release.
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-release)
        public func post(_ body: PostRequest) -> Request<GitHubAPI.Release> {
            Request(method: "POST", url: path, body: body, id: "repos/create-release")
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The name of the tag.
            public var tagName: String
            /// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
            public var targetCommitish: String?
            /// The name of the release.
            public var name: String?
            /// Text describing the contents of the tag.
            public var body: String?
            /// `true` to create a draft (unpublished) release, `false` to create a published one.
            public var isDraft: Bool
            /// `true` to identify the release as a prerelease. `false` to identify the release as a full release.
            public var isPrerelease: Bool
            /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
            public var discussionCategoryName: String?
            /// Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
            public var isGenerateReleaseNotes: Bool

            public init(tagName: String, targetCommitish: String? = nil, name: String? = nil, body: String? = nil, isDraft: Bool? = nil, isPrerelease: Bool? = nil, discussionCategoryName: String? = nil, isGenerateReleaseNotes: Bool? = nil) {
                self.tagName = tagName
                self.targetCommitish = targetCommitish
                self.name = name
                self.body = body
                self.isDraft = isDraft ?? false
                self.isPrerelease = isPrerelease ?? false
                self.discussionCategoryName = discussionCategoryName
                self.isGenerateReleaseNotes = isGenerateReleaseNotes ?? false
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(tagName, forKey: "tag_name")
                try values.encodeIfPresent(targetCommitish, forKey: "target_commitish")
                try values.encodeIfPresent(name, forKey: "name")
                try values.encodeIfPresent(body, forKey: "body")
                try values.encodeIfPresent(isDraft, forKey: "draft")
                try values.encodeIfPresent(isPrerelease, forKey: "prerelease")
                try values.encodeIfPresent(discussionCategoryName, forKey: "discussion_category_name")
                try values.encodeIfPresent(isGenerateReleaseNotes, forKey: "generate_release_notes")
            }
        }
    }
}
