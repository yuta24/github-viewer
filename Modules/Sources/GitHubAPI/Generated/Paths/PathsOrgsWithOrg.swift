// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Orgs {
    public func org(_ org: String) -> WithOrg {
        WithOrg(path: "\(path)/\(org)")
    }

    public struct WithOrg {
        /// Path: `/orgs/{org}`
        public let path: String

        /// Get an organization
        ///
        /// To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
        /// 
        /// GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-an-organization)
        public var get: Request<GitHubAPI.OrganizationFull> {
            Request(method: "GET", url: path, id: "orgs/get")
        }

        /// Update an organization
        ///
        /// **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
        /// 
        /// Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs/#update-an-organization)
        public func patch(_ body: PatchRequest? = nil) -> Request<GitHubAPI.OrganizationFull> {
            Request(method: "PATCH", url: path, body: body, id: "orgs/update")
        }

        public struct PatchRequest: Encodable {
            /// Billing email address. This address is not publicized.
            public var billingEmail: String?
            /// The company name.
            public var company: String?
            /// The publicly visible email address.
            public var email: String?
            /// The Twitter username of the company.
            public var twitterUsername: String?
            /// The location.
            public var location: String?
            /// The shorthand name of the company.
            public var name: String?
            /// The description of the company.
            public var description: String?
            /// Whether an organization can use organization projects.
            public var hasOrganizationProjects: Bool?
            /// Whether repositories that belong to the organization can use repository projects.
            public var hasRepositoryProjects: Bool?
            /// Default permission level members have for organization repositories.
            public var defaultRepositoryPermission: DefaultRepositoryPermission?
            /// Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
            public var membersCanCreateRepositories: Bool
            /// Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
            public var membersCanCreateInternalRepositories: Bool?
            /// Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
            public var membersCanCreatePrivateRepositories: Bool?
            /// Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
            public var membersCanCreatePublicRepositories: Bool?
            /// Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. 
            /// **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
            public var membersAllowedRepositoryCreationType: MembersAllowedRepositoryCreationType?
            /// Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
            public var membersCanCreatePages: Bool
            /// Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
            public var membersCanCreatePublicPages: Bool
            /// Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
            public var membersCanCreatePrivatePages: Bool
            /// Whether organization members can fork private organization repositories.
            public var membersCanForkPrivateRepositories: Bool
            /// Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
            public var isWebCommitSignoffRequired: Bool
            /// Example: "http://github.blog"
            public var blog: String?
            /// Whether GitHub Advanced Security is automatically enabled for new repositories.
            /// 
            /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
            /// 
            /// You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
            public var isAdvancedSecurityEnabledForNewRepositories: Bool?
            /// Whether Dependabot alerts is automatically enabled for new repositories.
            /// 
            /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
            /// 
            /// You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
            public var isDependabotAlertsEnabledForNewRepositories: Bool?
            /// Whether Dependabot security updates is automatically enabled for new repositories.
            /// 
            /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
            /// 
            /// You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
            public var isDependabotSecurityUpdatesEnabledForNewRepositories: Bool?
            /// Whether dependency graph is automatically enabled for new repositories.
            /// 
            /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
            /// 
            /// You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
            public var isDependencyGraphEnabledForNewRepositories: Bool?
            /// Whether secret scanning is automatically enabled for new repositories.
            /// 
            /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
            /// 
            /// You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
            public var isSecretScanningEnabledForNewRepositories: Bool?
            /// Whether secret scanning push protection is automatically enabled for new repositories.
            /// 
            /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
            /// 
            /// You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
            public var isSecretScanningPushProtectionEnabledForNewRepositories: Bool?

            /// Default permission level members have for organization repositories.
            public enum DefaultRepositoryPermission: String, Codable, CaseIterable {
                case read
                case write
                case admin
                case `none`
            }

            /// Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. 
            /// **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
            public enum MembersAllowedRepositoryCreationType: String, Codable, CaseIterable {
                case all
                case `private`
                case `none`
            }

            public init(billingEmail: String? = nil, company: String? = nil, email: String? = nil, twitterUsername: String? = nil, location: String? = nil, name: String? = nil, description: String? = nil, hasOrganizationProjects: Bool? = nil, hasRepositoryProjects: Bool? = nil, defaultRepositoryPermission: DefaultRepositoryPermission? = nil, membersCanCreateRepositories: Bool? = nil, membersCanCreateInternalRepositories: Bool? = nil, membersCanCreatePrivateRepositories: Bool? = nil, membersCanCreatePublicRepositories: Bool? = nil, membersAllowedRepositoryCreationType: MembersAllowedRepositoryCreationType? = nil, membersCanCreatePages: Bool? = nil, membersCanCreatePublicPages: Bool? = nil, membersCanCreatePrivatePages: Bool? = nil, membersCanForkPrivateRepositories: Bool? = nil, isWebCommitSignoffRequired: Bool? = nil, blog: String? = nil, isAdvancedSecurityEnabledForNewRepositories: Bool? = nil, isDependabotAlertsEnabledForNewRepositories: Bool? = nil, isDependabotSecurityUpdatesEnabledForNewRepositories: Bool? = nil, isDependencyGraphEnabledForNewRepositories: Bool? = nil, isSecretScanningEnabledForNewRepositories: Bool? = nil, isSecretScanningPushProtectionEnabledForNewRepositories: Bool? = nil) {
                self.billingEmail = billingEmail
                self.company = company
                self.email = email
                self.twitterUsername = twitterUsername
                self.location = location
                self.name = name
                self.description = description
                self.hasOrganizationProjects = hasOrganizationProjects
                self.hasRepositoryProjects = hasRepositoryProjects
                self.defaultRepositoryPermission = defaultRepositoryPermission
                self.membersCanCreateRepositories = membersCanCreateRepositories ?? true
                self.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories
                self.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories
                self.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories
                self.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType
                self.membersCanCreatePages = membersCanCreatePages ?? true
                self.membersCanCreatePublicPages = membersCanCreatePublicPages ?? true
                self.membersCanCreatePrivatePages = membersCanCreatePrivatePages ?? true
                self.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories ?? false
                self.isWebCommitSignoffRequired = isWebCommitSignoffRequired ?? false
                self.blog = blog
                self.isAdvancedSecurityEnabledForNewRepositories = isAdvancedSecurityEnabledForNewRepositories
                self.isDependabotAlertsEnabledForNewRepositories = isDependabotAlertsEnabledForNewRepositories
                self.isDependabotSecurityUpdatesEnabledForNewRepositories = isDependabotSecurityUpdatesEnabledForNewRepositories
                self.isDependencyGraphEnabledForNewRepositories = isDependencyGraphEnabledForNewRepositories
                self.isSecretScanningEnabledForNewRepositories = isSecretScanningEnabledForNewRepositories
                self.isSecretScanningPushProtectionEnabledForNewRepositories = isSecretScanningPushProtectionEnabledForNewRepositories
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(billingEmail, forKey: "billing_email")
                try values.encodeIfPresent(company, forKey: "company")
                try values.encodeIfPresent(email, forKey: "email")
                try values.encodeIfPresent(twitterUsername, forKey: "twitter_username")
                try values.encodeIfPresent(location, forKey: "location")
                try values.encodeIfPresent(name, forKey: "name")
                try values.encodeIfPresent(description, forKey: "description")
                try values.encodeIfPresent(hasOrganizationProjects, forKey: "has_organization_projects")
                try values.encodeIfPresent(hasRepositoryProjects, forKey: "has_repository_projects")
                try values.encodeIfPresent(defaultRepositoryPermission, forKey: "default_repository_permission")
                try values.encodeIfPresent(membersCanCreateRepositories, forKey: "members_can_create_repositories")
                try values.encodeIfPresent(membersCanCreateInternalRepositories, forKey: "members_can_create_internal_repositories")
                try values.encodeIfPresent(membersCanCreatePrivateRepositories, forKey: "members_can_create_private_repositories")
                try values.encodeIfPresent(membersCanCreatePublicRepositories, forKey: "members_can_create_public_repositories")
                try values.encodeIfPresent(membersAllowedRepositoryCreationType, forKey: "members_allowed_repository_creation_type")
                try values.encodeIfPresent(membersCanCreatePages, forKey: "members_can_create_pages")
                try values.encodeIfPresent(membersCanCreatePublicPages, forKey: "members_can_create_public_pages")
                try values.encodeIfPresent(membersCanCreatePrivatePages, forKey: "members_can_create_private_pages")
                try values.encodeIfPresent(membersCanForkPrivateRepositories, forKey: "members_can_fork_private_repositories")
                try values.encodeIfPresent(isWebCommitSignoffRequired, forKey: "web_commit_signoff_required")
                try values.encodeIfPresent(blog, forKey: "blog")
                try values.encodeIfPresent(isAdvancedSecurityEnabledForNewRepositories, forKey: "advanced_security_enabled_for_new_repositories")
                try values.encodeIfPresent(isDependabotAlertsEnabledForNewRepositories, forKey: "dependabot_alerts_enabled_for_new_repositories")
                try values.encodeIfPresent(isDependabotSecurityUpdatesEnabledForNewRepositories, forKey: "dependabot_security_updates_enabled_for_new_repositories")
                try values.encodeIfPresent(isDependencyGraphEnabledForNewRepositories, forKey: "dependency_graph_enabled_for_new_repositories")
                try values.encodeIfPresent(isSecretScanningEnabledForNewRepositories, forKey: "secret_scanning_enabled_for_new_repositories")
                try values.encodeIfPresent(isSecretScanningPushProtectionEnabledForNewRepositories, forKey: "secret_scanning_push_protection_enabled_for_new_repositories")
            }
        }
    }
}
