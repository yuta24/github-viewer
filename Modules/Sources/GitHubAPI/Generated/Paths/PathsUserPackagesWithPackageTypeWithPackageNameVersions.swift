// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.User.Packages.WithPackageType.WithPackageName {
    public var versions: Versions {
        Versions(path: path + "/versions")
    }

    public struct Versions {
        /// Path: `/user/packages/{package_type}/{package_name}/versions`
        public let path: String

        /// List package versions for a package owned by the authenticated user
        ///
        /// Lists package versions for a package owned by the authenticated user.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<[GitHubAPI.PackageVersion]> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "packages/get-all-package-versions-for-package-owned-by-authenticated-user")
        }

        public struct GetParameters {
            public var page: Int?
            public var perPage: Int?
            public var state: State?

            public enum State: String, Codable, CaseIterable {
                case active
                case deleted
            }

            public init(page: Int? = nil, perPage: Int? = nil, state: State? = nil) {
                self.page = page
                self.perPage = perPage
                self.state = state
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(page, forKey: "page")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(state, forKey: "state")
                return encoder.items
            }
        }
    }
}
