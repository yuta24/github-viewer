// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo {
    public var issues: Issues {
        Issues(path: path + "/issues")
    }

    public struct Issues {
        /// Path: `/repos/{owner}/{repo}/issues`
        public let path: String

        /// List repository issues
        ///
        /// List issues in a repository.
        /// 
        /// **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
        /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
        /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
        /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-repository-issues)
        public func get(parameters: GetParameters? = nil) -> Request<[GitHubAPI.Issue]> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "issues/list-for-repo")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var milestone: String?
            public var state: State?
            public var assignee: String?
            public var creator: String?
            public var mentioned: String?
            public var labels: String?
            public var sort: Sort?
            public var direction: Direction?
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
                case all
            }

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
                case comments
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(milestone: String? = nil, state: State? = nil, assignee: String? = nil, creator: String? = nil, mentioned: String? = nil, labels: String? = nil, sort: Sort? = nil, direction: Direction? = nil, since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.milestone = milestone
                self.state = state
                self.assignee = assignee
                self.creator = creator
                self.mentioned = mentioned
                self.labels = labels
                self.sort = sort
                self.direction = direction
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(milestone, forKey: "milestone")
                encoder.encode(state, forKey: "state")
                encoder.encode(assignee, forKey: "assignee")
                encoder.encode(creator, forKey: "creator")
                encoder.encode(mentioned, forKey: "mentioned")
                encoder.encode(labels, forKey: "labels")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create an issue
        ///
        /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#create-an-issue)
        public func post(_ body: PostRequest) -> Request<GitHubAPI.Issue> {
            Request(method: "POST", url: path, body: body, id: "issues/create")
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The title of the issue.
            public var title: Title
            /// The contents of the issue.
            public var body: String?
            /// Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
            public var assignee: String?
            public var milestone: Milestone?
            /// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
            public var labels: [Label]?
            /// Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
            public var assignees: [String]?

            /// The title of the issue.
            public enum Title: Encodable, Hashable {
                case string(String)
                case int(Int)

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .string(let value): try container.encode(value)
                    case .int(let value): try container.encode(value)
                    }
                }
            }

            public enum Milestone: Encodable, Hashable {
                case string(String)
                case int(Int)

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .string(let value): try container.encode(value)
                    case .int(let value): try container.encode(value)
                    }
                }
            }

            public enum Label: Encodable {
                case string(String)
                case object(Object)

                public struct Object: Encodable, Identifiable {
                    public var id: Int?
                    public var name: String?
                    public var description: String?
                    public var color: String?

                    public init(id: Int? = nil, name: String? = nil, description: String? = nil, color: String? = nil) {
                        self.id = id
                        self.name = name
                        self.description = description
                        self.color = color
                    }

                    public func encode(to encoder: Encoder) throws {
                        var values = encoder.container(keyedBy: StringCodingKey.self)
                        try values.encodeIfPresent(id, forKey: "id")
                        try values.encodeIfPresent(name, forKey: "name")
                        try values.encodeIfPresent(description, forKey: "description")
                        try values.encodeIfPresent(color, forKey: "color")
                    }
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .string(let value): try container.encode(value)
                    case .object(let value): try container.encode(value)
                    }
                }
            }

            public init(title: Title, body: String? = nil, assignee: String? = nil, milestone: Milestone? = nil, labels: [Label]? = nil, assignees: [String]? = nil) {
                self.title = title
                self.body = body
                self.assignee = assignee
                self.milestone = milestone
                self.labels = labels
                self.assignees = assignees
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(title, forKey: "title")
                try values.encodeIfPresent(body, forKey: "body")
                try values.encodeIfPresent(assignee, forKey: "assignee")
                try values.encodeIfPresent(milestone, forKey: "milestone")
                try values.encodeIfPresent(labels, forKey: "labels")
                try values.encodeIfPresent(assignees, forKey: "assignees")
            }
        }
    }
}
