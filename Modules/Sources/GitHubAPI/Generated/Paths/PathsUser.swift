// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths {
    public static var user: User {
        User(path: "/user")
    }

    public struct User {
        /// Path: `/user`
        public let path: String

        /// Get the authenticated user
        ///
        /// If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
        /// 
        /// If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#get-the-authenticated-user)
        public var get: Request<GetResponse> {
            Request(method: "GET", url: path, id: "users/get-authenticated")
        }

        public enum GetResponse: Decodable {
            case privateUser(GitHubAPI.PrivateUser)
            case publicUser(GitHubAPI.PublicUser)

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(GitHubAPI.PrivateUser.self) {
                    self = .privateUser(value)
                } else if let value = try? container.decode(GitHubAPI.PublicUser.self) {
                    self = .publicUser(value)
                } else {
                    throw DecodingError.dataCorruptedError(
                        in: container,
                        debugDescription: "Data could not be decoded as any of the expected types (GitHubAPI.PrivateUser, GitHubAPI.PublicUser)."
                    )
                }
            }
        }

        /// Update the authenticated user
        ///
        /// **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users/#update-the-authenticated-user)
        public func patch(_ body: PatchRequest? = nil) -> Request<GitHubAPI.PrivateUser> {
            Request(method: "PATCH", url: path, body: body, id: "users/update-authenticated")
        }

        public struct PatchRequest: Encodable {
            /// The new name of the user.
            ///
            /// Example: "Omar Jahandar"
            public var name: String?
            /// The publicly visible email address of the user.
            ///
            /// Example: "omar@example.com"
            public var email: String?
            /// The new blog URL of the user.
            ///
            /// Example: "blog.example.com"
            public var blog: String?
            /// The new Twitter username of the user.
            ///
            /// Example: "therealomarj"
            public var twitterUsername: String?
            /// The new company of the user.
            ///
            /// Example: "Acme corporation"
            public var company: String?
            /// The new location of the user.
            ///
            /// Example: "Berlin, Germany"
            public var location: String?
            /// The new hiring availability of the user.
            public var isHireable: Bool?
            /// The new short biography of the user.
            public var bio: String?

            public init(name: String? = nil, email: String? = nil, blog: String? = nil, twitterUsername: String? = nil, company: String? = nil, location: String? = nil, isHireable: Bool? = nil, bio: String? = nil) {
                self.name = name
                self.email = email
                self.blog = blog
                self.twitterUsername = twitterUsername
                self.company = company
                self.location = location
                self.isHireable = isHireable
                self.bio = bio
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(name, forKey: "name")
                try values.encodeIfPresent(email, forKey: "email")
                try values.encodeIfPresent(blog, forKey: "blog")
                try values.encodeIfPresent(twitterUsername, forKey: "twitter_username")
                try values.encodeIfPresent(company, forKey: "company")
                try values.encodeIfPresent(location, forKey: "location")
                try values.encodeIfPresent(isHireable, forKey: "hireable")
                try values.encodeIfPresent(bio, forKey: "bio")
            }
        }
    }
}
