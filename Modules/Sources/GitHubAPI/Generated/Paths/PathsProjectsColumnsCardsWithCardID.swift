// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Projects.Columns.Cards {
    public func cardID(_ cardID: Int) -> WithCardID {
        WithCardID(path: "\(path)/\(cardID)")
    }

    public struct WithCardID {
        /// Path: `/projects/columns/cards/{card_id}`
        public let path: String

        /// Get a project card
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#get-a-project-card)
        public var get: Request<GitHubAPI.ProjectCard> {
            Request(method: "GET", url: path, id: "projects/get-card")
        }

        /// Update an existing project card
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#update-a-project-card)
        public func patch(_ body: PatchRequest? = nil) -> Request<GitHubAPI.ProjectCard> {
            Request(method: "PATCH", url: path, body: body, id: "projects/update-card")
        }

        public struct PatchRequest: Encodable {
            /// The project card's note
            ///
            /// Example: "Update all gems"
            public var note: String?
            /// Whether or not the card is archived
            ///
            /// Example: false
            public var isArchived: Bool?

            public init(note: String? = nil, isArchived: Bool? = nil) {
                self.note = note
                self.isArchived = isArchived
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(note, forKey: "note")
                try values.encodeIfPresent(isArchived, forKey: "archived")
            }
        }

        /// Delete a project card
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#delete-a-project-card)
        public var delete: Request<Void> {
            Request(method: "DELETE", url: path, id: "projects/delete-card")
        }
    }
}
