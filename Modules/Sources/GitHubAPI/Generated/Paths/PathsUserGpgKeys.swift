// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.User {
    public var gpgKeys: GpgKeys {
        GpgKeys(path: path + "/gpg_keys")
    }

    public struct GpgKeys {
        /// Path: `/user/gpg_keys`
        public let path: String

        /// List GPG keys for the authenticated user
        ///
        /// Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[GitHubAPI.GpgKey]> {
            Request(method: "GET", url: path, query: makeGetQuery(perPage, page), id: "users/list-gpg-keys-for-authenticated-user")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a GPG key for the authenticated user
        ///
        /// Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#create-a-gpg-key-for-the-authenticated-user)
        public func post(_ body: PostRequest) -> Request<GitHubAPI.GpgKey> {
            Request(method: "POST", url: path, body: body, id: "users/create-gpg-key-for-authenticated-user")
        }

        public struct PostRequest: Encodable {
            /// A descriptive name for the new key.
            public var name: String?
            /// A GPG key in ASCII-armored format.
            public var armoredPublicKey: String

            public init(name: String? = nil, armoredPublicKey: String) {
                self.name = name
                self.armoredPublicKey = armoredPublicKey
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(name, forKey: "name")
                try values.encode(armoredPublicKey, forKey: "armored_public_key")
            }
        }
    }
}
