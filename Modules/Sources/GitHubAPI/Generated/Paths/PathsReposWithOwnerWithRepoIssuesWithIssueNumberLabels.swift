// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/labels`
        public let path: String

        /// List labels for an issue
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-labels-for-an-issue)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[GitHubAPI.Label]> {
            Request(method: "GET", url: path, query: makeGetQuery(perPage, page), id: "issues/list-labels-on-issue")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Add labels to an issue
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue)
        public func post(_ body: PostRequest? = nil) -> Request<[GitHubAPI.Label]> {
            Request(method: "POST", url: path, body: body, id: "issues/add-labels")
        }

        public enum PostRequest: Encodable {
            case object1(Object1)
            case strings([String])
            case object2(Object2)
            case placeholderItems([PlaceholderItem])
            case string(String)

            public struct Object1: Encodable {
                /// The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue)."
                public var labels: [String]?

                public init(labels: [String]? = nil) {
                    self.labels = labels
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encodeIfPresent(labels, forKey: "labels")
                }
            }

            public struct Object2: Encodable {
                public var labels: [Label]?

                public struct Label: Encodable {
                    public var name: String

                    public init(name: String) {
                        self.name = name
                    }

                    public func encode(to encoder: Encoder) throws {
                        var values = encoder.container(keyedBy: StringCodingKey.self)
                        try values.encode(name, forKey: "name")
                    }
                }

                public init(labels: [Label]? = nil) {
                    self.labels = labels
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encodeIfPresent(labels, forKey: "labels")
                }
            }

            public struct PlaceholderItem: Encodable {
                public var name: String

                public init(name: String) {
                    self.name = name
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(name, forKey: "name")
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object1(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                case .object2(let value): try container.encode(value)
                case .placeholderItems(let value): try container.encode(value)
                case .string(let value): try container.encode(value)
                }
            }
        }

        /// Set labels for an issue
        ///
        /// Removes any previous labels and sets the new labels for an issue.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue)
        public func put(_ body: PutRequest? = nil) -> Request<[GitHubAPI.Label]> {
            Request(method: "PUT", url: path, body: body, id: "issues/set-labels")
        }

        public enum PutRequest: Encodable {
            case object1(Object1)
            case strings([String])
            case object2(Object2)
            case placeholderItems([PlaceholderItem])
            case string(String)

            public struct Object1: Encodable {
                /// The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue)."
                public var labels: [String]?

                public init(labels: [String]? = nil) {
                    self.labels = labels
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encodeIfPresent(labels, forKey: "labels")
                }
            }

            public struct Object2: Encodable {
                public var labels: [Label]?

                public struct Label: Encodable {
                    public var name: String

                    public init(name: String) {
                        self.name = name
                    }

                    public func encode(to encoder: Encoder) throws {
                        var values = encoder.container(keyedBy: StringCodingKey.self)
                        try values.encode(name, forKey: "name")
                    }
                }

                public init(labels: [Label]? = nil) {
                    self.labels = labels
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encodeIfPresent(labels, forKey: "labels")
                }
            }

            public struct PlaceholderItem: Encodable {
                public var name: String

                public init(name: String) {
                    self.name = name
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(name, forKey: "name")
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object1(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                case .object2(let value): try container.encode(value)
                case .placeholderItems(let value): try container.encode(value)
                case .string(let value): try container.encode(value)
                }
            }
        }

        /// Remove all labels from an issue
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#remove-all-labels-from-an-issue)
        public var delete: Request<Void> {
            Request(method: "DELETE", url: path, id: "issues/remove-all-labels")
        }
    }
}
