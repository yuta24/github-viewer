// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var caches: Caches {
        Caches(path: path + "/caches")
    }

    public struct Caches {
        /// Path: `/repos/{owner}/{repo}/actions/caches`
        public let path: String

        /// List GitHub Actions caches for a repository
        ///
        /// Lists the GitHub Actions caches for a repository.
        /// You must authenticate using an access token with the `repo` scope to use this endpoint.
        /// GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/actions/cache#list-github-actions-caches-for-a-repository)
        public func get(parameters: GetParameters? = nil) -> Request<GitHubAPI.ActionsCacheList> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "actions/get-actions-cache-list")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var perPage: Int?
            public var page: Int?
            /// The full Git reference, formatted as `refs/heads/<branch name>`,
            /// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
            public var ref: String?
            public var key: String?
            public var sort: Sort?
            public var direction: Direction?

            public enum Sort: String, Codable, CaseIterable {
                case createdAt = "created_at"
                case lastAccessedAt = "last_accessed_at"
                case sizeInBytes = "size_in_bytes"
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(perPage: Int? = nil, page: Int? = nil, ref: String? = nil, key: String? = nil, sort: Sort? = nil, direction: Direction? = nil) {
                self.perPage = perPage
                self.page = page
                self.ref = ref
                self.key = key
                self.sort = sort
                self.direction = direction
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(ref, forKey: "ref")
                encoder.encode(key, forKey: "key")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                return encoder.items
            }
        }

        /// Delete GitHub Actions caches for a repository (using a cache key)
        ///
        /// Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint.
        /// 
        /// GitHub Apps must have the `actions:write` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key)
        public func delete(key: String, ref: String? = nil) -> Request<GitHubAPI.ActionsCacheList> {
            Request(method: "DELETE", url: path, query: makeDeleteQuery(key, ref), id: "actions/delete-actions-cache-by-key")
        }

        private func makeDeleteQuery(_ key: String, _ ref: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(key, forKey: "key")
            encoder.encode(ref, forKey: "ref")
            return encoder.items
        }
    }
}
