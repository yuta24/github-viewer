// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection.Restrictions {
    public var users: Users {
        Users(path: path + "/users")
    }

    public struct Users {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`
        public let path: String

        /// Get users with access to the protected branch
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Lists the people who have push access to this branch.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-users-with-access-to-the-protected-branch)
        public var get: Request<[GitHubAPI.SimpleUser]> {
            Request(method: "GET", url: path, id: "repos/get-users-with-access-to-protected-branch")
        }

        /// Add user access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Grants the specified people push access for this branch.
        /// 
        /// | Type    | Description                                                                                                                   |
        /// | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
        /// | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#add-user-access-restrictions)
        public func post(_ body: PostRequest? = nil) -> Request<[GitHubAPI.SimpleUser]> {
            Request(method: "POST", url: path, body: body, id: "repos/add-user-access-restrictions")
        }

        public enum PostRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "users" : [
            ///     "mona"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// The username for users
                public var users: [String]

                public init(users: [String]) {
                    self.users = users
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(users, forKey: "users")
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }

        /// Set user access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
        /// 
        /// | Type    | Description                                                                                                                   |
        /// | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
        /// | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#set-user-access-restrictions)
        public func put(_ body: PutRequest? = nil) -> Request<[GitHubAPI.SimpleUser]> {
            Request(method: "PUT", url: path, body: body, id: "repos/set-user-access-restrictions")
        }

        public enum PutRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "users" : [
            ///     "mona"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// The username for users
                public var users: [String]

                public init(users: [String]) {
                    self.users = users
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(users, forKey: "users")
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }

        /// Remove user access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Removes the ability of a user to push to this branch.
        /// 
        /// | Type    | Description                                                                                                                                   |
        /// | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
        /// | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-user-access-restrictions)
        public func delete(_ body: DeleteRequest? = nil) -> Request<[GitHubAPI.SimpleUser]> {
            Request(method: "DELETE", url: path, body: body, id: "repos/remove-user-access-restrictions")
        }

        public enum DeleteRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "users" : [
            ///     "mona"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// The username for users
                public var users: [String]

                public init(users: [String]) {
                    self.users = users
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(users, forKey: "users")
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }
    }
}
