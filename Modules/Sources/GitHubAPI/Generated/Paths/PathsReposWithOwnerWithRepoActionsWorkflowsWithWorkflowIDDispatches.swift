// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Actions.Workflows.WithWorkflowID {
    public var dispatches: Dispatches {
        Dispatches(path: path + "/dispatches")
    }

    public struct Dispatches {
        /// Path: `/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches`
        public let path: String

        /// Create a workflow dispatch event
        ///
        /// You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
        /// 
        /// You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event)
        public func post(_ body: PostRequest) -> Request<Void> {
            Request(method: "POST", url: path, body: body, id: "actions/create-workflow-dispatch")
        }

        public struct PostRequest: Encodable {
            /// The git reference for the workflow. The reference can be a branch or tag name.
            public var ref: String
            /// Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
            public var inputs: [String: String]?

            public init(ref: String, inputs: [String: String]? = nil) {
                self.ref = ref
                self.inputs = inputs
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(ref, forKey: "ref")
                try values.encodeIfPresent(inputs, forKey: "inputs")
            }
        }
    }
}
