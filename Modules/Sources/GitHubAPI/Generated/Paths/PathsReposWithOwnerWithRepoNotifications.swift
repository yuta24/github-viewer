// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo {
    public var notifications: Notifications {
        Notifications(path: path + "/notifications")
    }

    public struct Notifications {
        /// Path: `/repos/{owner}/{repo}/notifications`
        public let path: String

        /// List repository notifications for the authenticated user
        ///
        /// List all notifications for the current user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<[GitHubAPI.Thread]> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "activity/list-repo-notifications-for-authenticated-user")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var isAll: Bool?
            public var isParticipating: Bool?
            public var since: Date?
            public var before: Date?
            public var perPage: Int?
            public var page: Int?

            public init(isAll: Bool? = nil, isParticipating: Bool? = nil, since: Date? = nil, before: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.isAll = isAll
                self.isParticipating = isParticipating
                self.since = since
                self.before = before
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isAll, forKey: "all")
                encoder.encode(isParticipating, forKey: "participating")
                encoder.encode(since, forKey: "since")
                encoder.encode(before, forKey: "before")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Mark repository notifications as read
        ///
        /// Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#mark-repository-notifications-as-read)
        public func put(lastReadAt: Date? = nil) -> Request<PutResponse> {
            Request(method: "PUT", url: path, body: ["last_read_at": lastReadAt], id: "activity/mark-repo-notifications-as-read")
        }

        public struct PutResponse: Decodable {
            public var message: String?
            public var url: String?

            public init(message: String? = nil, url: String? = nil) {
                self.message = message
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.message = try values.decodeIfPresent(String.self, forKey: "message")
                self.url = try values.decodeIfPresent(String.self, forKey: "url")
            }
        }
    }
}
