// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.User.Codespaces {
    public func codespaceName(_ codespaceName: String) -> WithCodespaceName {
        WithCodespaceName(path: "\(path)/\(codespaceName)")
    }

    public struct WithCodespaceName {
        /// Path: `/user/codespaces/{codespace_name}`
        public let path: String

        /// Get a codespace for the authenticated user
        ///
        /// Gets information about a user's codespace.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        /// 
        /// GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#get-a-codespace-for-the-authenticated-user)
        public var get: Request<GitHubAPI.Codespace> {
            Request(method: "GET", url: path, id: "codespaces/get-for-authenticated-user")
        }

        /// Update a codespace for the authenticated user
        ///
        /// Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
        /// 
        /// If you specify a new machine type it will be applied the next time your codespace is started.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        /// 
        /// GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#update-a-codespace-for-the-authenticated-user)
        public func patch(_ body: PatchRequest? = nil) -> Request<GitHubAPI.Codespace> {
            Request(method: "PATCH", url: path, body: body, id: "codespaces/update-for-authenticated-user")
        }

        public struct PatchRequest: Encodable {
            /// A valid machine to transition this codespace to.
            public var machine: String?
            /// Display name for this codespace
            public var displayName: String?
            /// Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.
            public var recentFolders: [String]?

            public init(machine: String? = nil, displayName: String? = nil, recentFolders: [String]? = nil) {
                self.machine = machine
                self.displayName = displayName
                self.recentFolders = recentFolders
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(machine, forKey: "machine")
                try values.encodeIfPresent(displayName, forKey: "display_name")
                try values.encodeIfPresent(recentFolders, forKey: "recent_folders")
            }
        }

        /// Delete a codespace for the authenticated user
        ///
        /// Deletes a user's codespace.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        /// 
        /// GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#delete-a-codespace-for-the-authenticated-user)
        public var delete: Request<[String: AnyJSON]> {
            Request(method: "DELETE", url: path, id: "codespaces/delete-for-authenticated-user")
        }
    }
}
