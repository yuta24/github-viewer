// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct RateLimitOverview: Codable {
    public var resources: Resources
    /// Rate Limit
    public var rate: RateLimit

    public struct Resources: Codable {
        /// Rate Limit
        public var core: RateLimit
        /// Rate Limit
        public var graphql: RateLimit?
        /// Rate Limit
        public var search: RateLimit
        /// Rate Limit
        public var sourceImport: RateLimit?
        /// Rate Limit
        public var integrationManifest: RateLimit?
        /// Rate Limit
        public var codeScanningUpload: RateLimit?
        /// Rate Limit
        public var actionsRunnerRegistration: RateLimit?
        /// Rate Limit
        public var scim: RateLimit?
        /// Rate Limit
        public var dependencySnapshots: RateLimit?

        public init(core: RateLimit, graphql: RateLimit? = nil, search: RateLimit, sourceImport: RateLimit? = nil, integrationManifest: RateLimit? = nil, codeScanningUpload: RateLimit? = nil, actionsRunnerRegistration: RateLimit? = nil, scim: RateLimit? = nil, dependencySnapshots: RateLimit? = nil) {
            self.core = core
            self.graphql = graphql
            self.search = search
            self.sourceImport = sourceImport
            self.integrationManifest = integrationManifest
            self.codeScanningUpload = codeScanningUpload
            self.actionsRunnerRegistration = actionsRunnerRegistration
            self.scim = scim
            self.dependencySnapshots = dependencySnapshots
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.core = try values.decode(RateLimit.self, forKey: "core")
            self.graphql = try values.decodeIfPresent(RateLimit.self, forKey: "graphql")
            self.search = try values.decode(RateLimit.self, forKey: "search")
            self.sourceImport = try values.decodeIfPresent(RateLimit.self, forKey: "source_import")
            self.integrationManifest = try values.decodeIfPresent(RateLimit.self, forKey: "integration_manifest")
            self.codeScanningUpload = try values.decodeIfPresent(RateLimit.self, forKey: "code_scanning_upload")
            self.actionsRunnerRegistration = try values.decodeIfPresent(RateLimit.self, forKey: "actions_runner_registration")
            self.scim = try values.decodeIfPresent(RateLimit.self, forKey: "scim")
            self.dependencySnapshots = try values.decodeIfPresent(RateLimit.self, forKey: "dependency_snapshots")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(core, forKey: "core")
            try values.encodeIfPresent(graphql, forKey: "graphql")
            try values.encode(search, forKey: "search")
            try values.encodeIfPresent(sourceImport, forKey: "source_import")
            try values.encodeIfPresent(integrationManifest, forKey: "integration_manifest")
            try values.encodeIfPresent(codeScanningUpload, forKey: "code_scanning_upload")
            try values.encodeIfPresent(actionsRunnerRegistration, forKey: "actions_runner_registration")
            try values.encodeIfPresent(scim, forKey: "scim")
            try values.encodeIfPresent(dependencySnapshots, forKey: "dependency_snapshots")
        }
    }

    public init(resources: Resources, rate: RateLimit) {
        self.resources = resources
        self.rate = rate
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.resources = try values.decode(Resources.self, forKey: "resources")
        self.rate = try values.decode(RateLimit.self, forKey: "rate")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(resources, forKey: "resources")
        try values.encode(rate, forKey: "rate")
    }
}
