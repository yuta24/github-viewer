// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
public struct SecretScanningLocationCommit: Codable {
    /// The file path in the repository
    ///
    /// Example: "/example/secrets.txt"
    public var path: String
    /// Line number at which the secret starts in the file
    public var startLine: Double
    /// Line number at which the secret ends in the file
    public var endLine: Double
    /// The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
    public var startColumn: Double
    /// The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
    public var endColumn: Double
    /// SHA-1 hash ID of the associated blob
    ///
    /// Example: "af5626b4a114abcb82d63db7c8082c3c4756e51b"
    public var blobSha: String
    /// The API URL to get the associated blob resource
    public var blobURL: String
    /// SHA-1 hash ID of the associated commit
    ///
    /// Example: "af5626b4a114abcb82d63db7c8082c3c4756e51b"
    public var commitSha: String
    /// The API URL to get the associated commit resource
    public var commitURL: String

    public init(path: String, startLine: Double, endLine: Double, startColumn: Double, endColumn: Double, blobSha: String, blobURL: String, commitSha: String, commitURL: String) {
        self.path = path
        self.startLine = startLine
        self.endLine = endLine
        self.startColumn = startColumn
        self.endColumn = endColumn
        self.blobSha = blobSha
        self.blobURL = blobURL
        self.commitSha = commitSha
        self.commitURL = commitURL
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.path = try values.decode(String.self, forKey: "path")
        self.startLine = try values.decode(Double.self, forKey: "start_line")
        self.endLine = try values.decode(Double.self, forKey: "end_line")
        self.startColumn = try values.decode(Double.self, forKey: "start_column")
        self.endColumn = try values.decode(Double.self, forKey: "end_column")
        self.blobSha = try values.decode(String.self, forKey: "blob_sha")
        self.blobURL = try values.decode(String.self, forKey: "blob_url")
        self.commitSha = try values.decode(String.self, forKey: "commit_sha")
        self.commitURL = try values.decode(String.self, forKey: "commit_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(path, forKey: "path")
        try values.encode(startLine, forKey: "start_line")
        try values.encode(endLine, forKey: "end_line")
        try values.encode(startColumn, forKey: "start_column")
        try values.encode(endColumn, forKey: "end_column")
        try values.encode(blobSha, forKey: "blob_sha")
        try values.encode(blobURL, forKey: "blob_url")
        try values.encode(commitSha, forKey: "commit_sha")
        try values.encode(commitURL, forKey: "commit_url")
    }
}
