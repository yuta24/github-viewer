// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Contributor: Codable, Identifiable {
    public var login: String?
    public var id: Int?
    public var nodeID: String?
    public var avatarURL: URL?
    public var gravatarID: String?
    public var url: URL?
    public var htmlURL: URL?
    public var followersURL: URL?
    public var followingURL: String?
    public var gistsURL: String?
    public var starredURL: String?
    public var subscriptionsURL: URL?
    public var organizationsURL: URL?
    public var reposURL: URL?
    public var eventsURL: String?
    public var receivedEventsURL: URL?
    public var type: String
    public var isSiteAdmin: Bool?
    public var contributions: Int
    public var email: String?
    public var name: String?

    public init(login: String? = nil, id: Int? = nil, nodeID: String? = nil, avatarURL: URL? = nil, gravatarID: String? = nil, url: URL? = nil, htmlURL: URL? = nil, followersURL: URL? = nil, followingURL: String? = nil, gistsURL: String? = nil, starredURL: String? = nil, subscriptionsURL: URL? = nil, organizationsURL: URL? = nil, reposURL: URL? = nil, eventsURL: String? = nil, receivedEventsURL: URL? = nil, type: String, isSiteAdmin: Bool? = nil, contributions: Int, email: String? = nil, name: String? = nil) {
        self.login = login
        self.id = id
        self.nodeID = nodeID
        self.avatarURL = avatarURL
        self.gravatarID = gravatarID
        self.url = url
        self.htmlURL = htmlURL
        self.followersURL = followersURL
        self.followingURL = followingURL
        self.gistsURL = gistsURL
        self.starredURL = starredURL
        self.subscriptionsURL = subscriptionsURL
        self.organizationsURL = organizationsURL
        self.reposURL = reposURL
        self.eventsURL = eventsURL
        self.receivedEventsURL = receivedEventsURL
        self.type = type
        self.isSiteAdmin = isSiteAdmin
        self.contributions = contributions
        self.email = email
        self.name = name
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.login = try values.decodeIfPresent(String.self, forKey: "login")
        self.id = try values.decodeIfPresent(Int.self, forKey: "id")
        self.nodeID = try values.decodeIfPresent(String.self, forKey: "node_id")
        self.avatarURL = try values.decodeIfPresent(URL.self, forKey: "avatar_url")
        self.gravatarID = try values.decodeIfPresent(String.self, forKey: "gravatar_id")
        self.url = try values.decodeIfPresent(URL.self, forKey: "url")
        self.htmlURL = try values.decodeIfPresent(URL.self, forKey: "html_url")
        self.followersURL = try values.decodeIfPresent(URL.self, forKey: "followers_url")
        self.followingURL = try values.decodeIfPresent(String.self, forKey: "following_url")
        self.gistsURL = try values.decodeIfPresent(String.self, forKey: "gists_url")
        self.starredURL = try values.decodeIfPresent(String.self, forKey: "starred_url")
        self.subscriptionsURL = try values.decodeIfPresent(URL.self, forKey: "subscriptions_url")
        self.organizationsURL = try values.decodeIfPresent(URL.self, forKey: "organizations_url")
        self.reposURL = try values.decodeIfPresent(URL.self, forKey: "repos_url")
        self.eventsURL = try values.decodeIfPresent(String.self, forKey: "events_url")
        self.receivedEventsURL = try values.decodeIfPresent(URL.self, forKey: "received_events_url")
        self.type = try values.decode(String.self, forKey: "type")
        self.isSiteAdmin = try values.decodeIfPresent(Bool.self, forKey: "site_admin")
        self.contributions = try values.decode(Int.self, forKey: "contributions")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(login, forKey: "login")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(nodeID, forKey: "node_id")
        try values.encodeIfPresent(avatarURL, forKey: "avatar_url")
        try values.encodeIfPresent(gravatarID, forKey: "gravatar_id")
        try values.encodeIfPresent(url, forKey: "url")
        try values.encodeIfPresent(htmlURL, forKey: "html_url")
        try values.encodeIfPresent(followersURL, forKey: "followers_url")
        try values.encodeIfPresent(followingURL, forKey: "following_url")
        try values.encodeIfPresent(gistsURL, forKey: "gists_url")
        try values.encodeIfPresent(starredURL, forKey: "starred_url")
        try values.encodeIfPresent(subscriptionsURL, forKey: "subscriptions_url")
        try values.encodeIfPresent(organizationsURL, forKey: "organizations_url")
        try values.encodeIfPresent(reposURL, forKey: "repos_url")
        try values.encodeIfPresent(eventsURL, forKey: "events_url")
        try values.encodeIfPresent(receivedEventsURL, forKey: "received_events_url")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(isSiteAdmin, forKey: "site_admin")
        try values.encode(contributions, forKey: "contributions")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encodeIfPresent(name, forKey: "name")
    }
}
