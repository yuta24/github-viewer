// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct BranchRestrictionPolicy: Codable {
    public var url: URL
    public var usersURL: URL
    public var teamsURL: URL
    public var appsURL: URL
    public var users: [User]
    public var teams: [Team]
    public var apps: [App]

    public struct User: Codable, Identifiable {
        public var login: String?
        public var id: Int?
        public var nodeID: String?
        public var avatarURL: String?
        public var gravatarID: String?
        public var url: String?
        public var htmlURL: String?
        public var followersURL: String?
        public var followingURL: String?
        public var gistsURL: String?
        public var starredURL: String?
        public var subscriptionsURL: String?
        public var organizationsURL: String?
        public var reposURL: String?
        public var eventsURL: String?
        public var receivedEventsURL: String?
        public var type: String?
        public var isSiteAdmin: Bool?

        public init(login: String? = nil, id: Int? = nil, nodeID: String? = nil, avatarURL: String? = nil, gravatarID: String? = nil, url: String? = nil, htmlURL: String? = nil, followersURL: String? = nil, followingURL: String? = nil, gistsURL: String? = nil, starredURL: String? = nil, subscriptionsURL: String? = nil, organizationsURL: String? = nil, reposURL: String? = nil, eventsURL: String? = nil, receivedEventsURL: String? = nil, type: String? = nil, isSiteAdmin: Bool? = nil) {
            self.login = login
            self.id = id
            self.nodeID = nodeID
            self.avatarURL = avatarURL
            self.gravatarID = gravatarID
            self.url = url
            self.htmlURL = htmlURL
            self.followersURL = followersURL
            self.followingURL = followingURL
            self.gistsURL = gistsURL
            self.starredURL = starredURL
            self.subscriptionsURL = subscriptionsURL
            self.organizationsURL = organizationsURL
            self.reposURL = reposURL
            self.eventsURL = eventsURL
            self.receivedEventsURL = receivedEventsURL
            self.type = type
            self.isSiteAdmin = isSiteAdmin
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.login = try values.decodeIfPresent(String.self, forKey: "login")
            self.id = try values.decodeIfPresent(Int.self, forKey: "id")
            self.nodeID = try values.decodeIfPresent(String.self, forKey: "node_id")
            self.avatarURL = try values.decodeIfPresent(String.self, forKey: "avatar_url")
            self.gravatarID = try values.decodeIfPresent(String.self, forKey: "gravatar_id")
            self.url = try values.decodeIfPresent(String.self, forKey: "url")
            self.htmlURL = try values.decodeIfPresent(String.self, forKey: "html_url")
            self.followersURL = try values.decodeIfPresent(String.self, forKey: "followers_url")
            self.followingURL = try values.decodeIfPresent(String.self, forKey: "following_url")
            self.gistsURL = try values.decodeIfPresent(String.self, forKey: "gists_url")
            self.starredURL = try values.decodeIfPresent(String.self, forKey: "starred_url")
            self.subscriptionsURL = try values.decodeIfPresent(String.self, forKey: "subscriptions_url")
            self.organizationsURL = try values.decodeIfPresent(String.self, forKey: "organizations_url")
            self.reposURL = try values.decodeIfPresent(String.self, forKey: "repos_url")
            self.eventsURL = try values.decodeIfPresent(String.self, forKey: "events_url")
            self.receivedEventsURL = try values.decodeIfPresent(String.self, forKey: "received_events_url")
            self.type = try values.decodeIfPresent(String.self, forKey: "type")
            self.isSiteAdmin = try values.decodeIfPresent(Bool.self, forKey: "site_admin")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(login, forKey: "login")
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(nodeID, forKey: "node_id")
            try values.encodeIfPresent(avatarURL, forKey: "avatar_url")
            try values.encodeIfPresent(gravatarID, forKey: "gravatar_id")
            try values.encodeIfPresent(url, forKey: "url")
            try values.encodeIfPresent(htmlURL, forKey: "html_url")
            try values.encodeIfPresent(followersURL, forKey: "followers_url")
            try values.encodeIfPresent(followingURL, forKey: "following_url")
            try values.encodeIfPresent(gistsURL, forKey: "gists_url")
            try values.encodeIfPresent(starredURL, forKey: "starred_url")
            try values.encodeIfPresent(subscriptionsURL, forKey: "subscriptions_url")
            try values.encodeIfPresent(organizationsURL, forKey: "organizations_url")
            try values.encodeIfPresent(reposURL, forKey: "repos_url")
            try values.encodeIfPresent(eventsURL, forKey: "events_url")
            try values.encodeIfPresent(receivedEventsURL, forKey: "received_events_url")
            try values.encodeIfPresent(type, forKey: "type")
            try values.encodeIfPresent(isSiteAdmin, forKey: "site_admin")
        }
    }

    public struct Team: Codable, Identifiable {
        public var id: Int?
        public var nodeID: String?
        public var url: String?
        public var htmlURL: String?
        public var name: String?
        public var slug: String?
        public var description: String?
        public var privacy: String?
        public var permission: String?
        public var membersURL: String?
        public var repositoriesURL: String?
        public var parent: String?

        public init(id: Int? = nil, nodeID: String? = nil, url: String? = nil, htmlURL: String? = nil, name: String? = nil, slug: String? = nil, description: String? = nil, privacy: String? = nil, permission: String? = nil, membersURL: String? = nil, repositoriesURL: String? = nil, parent: String? = nil) {
            self.id = id
            self.nodeID = nodeID
            self.url = url
            self.htmlURL = htmlURL
            self.name = name
            self.slug = slug
            self.description = description
            self.privacy = privacy
            self.permission = permission
            self.membersURL = membersURL
            self.repositoriesURL = repositoriesURL
            self.parent = parent
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(Int.self, forKey: "id")
            self.nodeID = try values.decodeIfPresent(String.self, forKey: "node_id")
            self.url = try values.decodeIfPresent(String.self, forKey: "url")
            self.htmlURL = try values.decodeIfPresent(String.self, forKey: "html_url")
            self.name = try values.decodeIfPresent(String.self, forKey: "name")
            self.slug = try values.decodeIfPresent(String.self, forKey: "slug")
            self.description = try values.decodeIfPresent(String.self, forKey: "description")
            self.privacy = try values.decodeIfPresent(String.self, forKey: "privacy")
            self.permission = try values.decodeIfPresent(String.self, forKey: "permission")
            self.membersURL = try values.decodeIfPresent(String.self, forKey: "members_url")
            self.repositoriesURL = try values.decodeIfPresent(String.self, forKey: "repositories_url")
            self.parent = try values.decodeIfPresent(String.self, forKey: "parent")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(nodeID, forKey: "node_id")
            try values.encodeIfPresent(url, forKey: "url")
            try values.encodeIfPresent(htmlURL, forKey: "html_url")
            try values.encodeIfPresent(name, forKey: "name")
            try values.encodeIfPresent(slug, forKey: "slug")
            try values.encodeIfPresent(description, forKey: "description")
            try values.encodeIfPresent(privacy, forKey: "privacy")
            try values.encodeIfPresent(permission, forKey: "permission")
            try values.encodeIfPresent(membersURL, forKey: "members_url")
            try values.encodeIfPresent(repositoriesURL, forKey: "repositories_url")
            try values.encodeIfPresent(parent, forKey: "parent")
        }
    }

    public struct App: Codable, Identifiable {
        public var id: Int?
        public var slug: String?
        public var nodeID: String?
        public var owner: Owner?
        public var name: String?
        public var description: String?
        public var externalURL: String?
        public var htmlURL: String?
        public var createdAt: String?
        public var updatedAt: String?
        public var permissions: Permissions?
        public var events: [String]?

        public struct Owner: Codable, Identifiable {
            public var login: String?
            public var id: Int?
            public var nodeID: String?
            public var url: String?
            public var reposURL: String?
            public var eventsURL: String?
            public var hooksURL: String?
            public var issuesURL: String?
            public var membersURL: String?
            public var publicMembersURL: String?
            public var avatarURL: String?
            public var description: String?
            /// Example: ""
            public var gravatarID: String?
            /// Example: "https://github.com/testorg-ea8ec76d71c3af4b"
            public var htmlURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"
            public var followersURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"
            public var followingURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"
            public var gistsURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"
            public var starredURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"
            public var subscriptionsURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"
            public var organizationsURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"
            public var receivedEventsURL: String?
            /// Example: "Organization"
            public var type: String?
            /// Example: false
            public var isSiteAdmin: Bool?

            public init(login: String? = nil, id: Int? = nil, nodeID: String? = nil, url: String? = nil, reposURL: String? = nil, eventsURL: String? = nil, hooksURL: String? = nil, issuesURL: String? = nil, membersURL: String? = nil, publicMembersURL: String? = nil, avatarURL: String? = nil, description: String? = nil, gravatarID: String? = nil, htmlURL: String? = nil, followersURL: String? = nil, followingURL: String? = nil, gistsURL: String? = nil, starredURL: String? = nil, subscriptionsURL: String? = nil, organizationsURL: String? = nil, receivedEventsURL: String? = nil, type: String? = nil, isSiteAdmin: Bool? = nil) {
                self.login = login
                self.id = id
                self.nodeID = nodeID
                self.url = url
                self.reposURL = reposURL
                self.eventsURL = eventsURL
                self.hooksURL = hooksURL
                self.issuesURL = issuesURL
                self.membersURL = membersURL
                self.publicMembersURL = publicMembersURL
                self.avatarURL = avatarURL
                self.description = description
                self.gravatarID = gravatarID
                self.htmlURL = htmlURL
                self.followersURL = followersURL
                self.followingURL = followingURL
                self.gistsURL = gistsURL
                self.starredURL = starredURL
                self.subscriptionsURL = subscriptionsURL
                self.organizationsURL = organizationsURL
                self.receivedEventsURL = receivedEventsURL
                self.type = type
                self.isSiteAdmin = isSiteAdmin
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.login = try values.decodeIfPresent(String.self, forKey: "login")
                self.id = try values.decodeIfPresent(Int.self, forKey: "id")
                self.nodeID = try values.decodeIfPresent(String.self, forKey: "node_id")
                self.url = try values.decodeIfPresent(String.self, forKey: "url")
                self.reposURL = try values.decodeIfPresent(String.self, forKey: "repos_url")
                self.eventsURL = try values.decodeIfPresent(String.self, forKey: "events_url")
                self.hooksURL = try values.decodeIfPresent(String.self, forKey: "hooks_url")
                self.issuesURL = try values.decodeIfPresent(String.self, forKey: "issues_url")
                self.membersURL = try values.decodeIfPresent(String.self, forKey: "members_url")
                self.publicMembersURL = try values.decodeIfPresent(String.self, forKey: "public_members_url")
                self.avatarURL = try values.decodeIfPresent(String.self, forKey: "avatar_url")
                self.description = try values.decodeIfPresent(String.self, forKey: "description")
                self.gravatarID = try values.decodeIfPresent(String.self, forKey: "gravatar_id")
                self.htmlURL = try values.decodeIfPresent(String.self, forKey: "html_url")
                self.followersURL = try values.decodeIfPresent(String.self, forKey: "followers_url")
                self.followingURL = try values.decodeIfPresent(String.self, forKey: "following_url")
                self.gistsURL = try values.decodeIfPresent(String.self, forKey: "gists_url")
                self.starredURL = try values.decodeIfPresent(String.self, forKey: "starred_url")
                self.subscriptionsURL = try values.decodeIfPresent(String.self, forKey: "subscriptions_url")
                self.organizationsURL = try values.decodeIfPresent(String.self, forKey: "organizations_url")
                self.receivedEventsURL = try values.decodeIfPresent(String.self, forKey: "received_events_url")
                self.type = try values.decodeIfPresent(String.self, forKey: "type")
                self.isSiteAdmin = try values.decodeIfPresent(Bool.self, forKey: "site_admin")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(login, forKey: "login")
                try values.encodeIfPresent(id, forKey: "id")
                try values.encodeIfPresent(nodeID, forKey: "node_id")
                try values.encodeIfPresent(url, forKey: "url")
                try values.encodeIfPresent(reposURL, forKey: "repos_url")
                try values.encodeIfPresent(eventsURL, forKey: "events_url")
                try values.encodeIfPresent(hooksURL, forKey: "hooks_url")
                try values.encodeIfPresent(issuesURL, forKey: "issues_url")
                try values.encodeIfPresent(membersURL, forKey: "members_url")
                try values.encodeIfPresent(publicMembersURL, forKey: "public_members_url")
                try values.encodeIfPresent(avatarURL, forKey: "avatar_url")
                try values.encodeIfPresent(description, forKey: "description")
                try values.encodeIfPresent(gravatarID, forKey: "gravatar_id")
                try values.encodeIfPresent(htmlURL, forKey: "html_url")
                try values.encodeIfPresent(followersURL, forKey: "followers_url")
                try values.encodeIfPresent(followingURL, forKey: "following_url")
                try values.encodeIfPresent(gistsURL, forKey: "gists_url")
                try values.encodeIfPresent(starredURL, forKey: "starred_url")
                try values.encodeIfPresent(subscriptionsURL, forKey: "subscriptions_url")
                try values.encodeIfPresent(organizationsURL, forKey: "organizations_url")
                try values.encodeIfPresent(receivedEventsURL, forKey: "received_events_url")
                try values.encodeIfPresent(type, forKey: "type")
                try values.encodeIfPresent(isSiteAdmin, forKey: "site_admin")
            }
        }

        public struct Permissions: Codable {
            public var metadata: String?
            public var contents: String?
            public var issues: String?
            public var singleFile: String?

            public init(metadata: String? = nil, contents: String? = nil, issues: String? = nil, singleFile: String? = nil) {
                self.metadata = metadata
                self.contents = contents
                self.issues = issues
                self.singleFile = singleFile
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.metadata = try values.decodeIfPresent(String.self, forKey: "metadata")
                self.contents = try values.decodeIfPresent(String.self, forKey: "contents")
                self.issues = try values.decodeIfPresent(String.self, forKey: "issues")
                self.singleFile = try values.decodeIfPresent(String.self, forKey: "single_file")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(metadata, forKey: "metadata")
                try values.encodeIfPresent(contents, forKey: "contents")
                try values.encodeIfPresent(issues, forKey: "issues")
                try values.encodeIfPresent(singleFile, forKey: "single_file")
            }
        }

        public init(id: Int? = nil, slug: String? = nil, nodeID: String? = nil, owner: Owner? = nil, name: String? = nil, description: String? = nil, externalURL: String? = nil, htmlURL: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, permissions: Permissions? = nil, events: [String]? = nil) {
            self.id = id
            self.slug = slug
            self.nodeID = nodeID
            self.owner = owner
            self.name = name
            self.description = description
            self.externalURL = externalURL
            self.htmlURL = htmlURL
            self.createdAt = createdAt
            self.updatedAt = updatedAt
            self.permissions = permissions
            self.events = events
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(Int.self, forKey: "id")
            self.slug = try values.decodeIfPresent(String.self, forKey: "slug")
            self.nodeID = try values.decodeIfPresent(String.self, forKey: "node_id")
            self.owner = try values.decodeIfPresent(Owner.self, forKey: "owner")
            self.name = try values.decodeIfPresent(String.self, forKey: "name")
            self.description = try values.decodeIfPresent(String.self, forKey: "description")
            self.externalURL = try values.decodeIfPresent(String.self, forKey: "external_url")
            self.htmlURL = try values.decodeIfPresent(String.self, forKey: "html_url")
            self.createdAt = try values.decodeIfPresent(String.self, forKey: "created_at")
            self.updatedAt = try values.decodeIfPresent(String.self, forKey: "updated_at")
            self.permissions = try values.decodeIfPresent(Permissions.self, forKey: "permissions")
            self.events = try values.decodeIfPresent([String].self, forKey: "events")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(slug, forKey: "slug")
            try values.encodeIfPresent(nodeID, forKey: "node_id")
            try values.encodeIfPresent(owner, forKey: "owner")
            try values.encodeIfPresent(name, forKey: "name")
            try values.encodeIfPresent(description, forKey: "description")
            try values.encodeIfPresent(externalURL, forKey: "external_url")
            try values.encodeIfPresent(htmlURL, forKey: "html_url")
            try values.encodeIfPresent(createdAt, forKey: "created_at")
            try values.encodeIfPresent(updatedAt, forKey: "updated_at")
            try values.encodeIfPresent(permissions, forKey: "permissions")
            try values.encodeIfPresent(events, forKey: "events")
        }
    }

    public init(url: URL, usersURL: URL, teamsURL: URL, appsURL: URL, users: [User], teams: [Team], apps: [App]) {
        self.url = url
        self.usersURL = usersURL
        self.teamsURL = teamsURL
        self.appsURL = appsURL
        self.users = users
        self.teams = teams
        self.apps = apps
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.url = try values.decode(URL.self, forKey: "url")
        self.usersURL = try values.decode(URL.self, forKey: "users_url")
        self.teamsURL = try values.decode(URL.self, forKey: "teams_url")
        self.appsURL = try values.decode(URL.self, forKey: "apps_url")
        self.users = try values.decode([User].self, forKey: "users")
        self.teams = try values.decode([Team].self, forKey: "teams")
        self.apps = try values.decode([App].self, forKey: "apps")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(url, forKey: "url")
        try values.encode(usersURL, forKey: "users_url")
        try values.encode(teamsURL, forKey: "teams_url")
        try values.encode(appsURL, forKey: "apps_url")
        try values.encode(users, forKey: "users")
        try values.encode(teams, forKey: "teams")
        try values.encode(apps, forKey: "apps")
    }
}
