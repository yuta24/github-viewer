// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Timeline Event
public struct TimelineIssueEvents: Codable {
    public var labeledIssueEvent: LabeledIssueEvent?
    public var unlabeledIssueEvent: UnlabeledIssueEvent?
    public var milestonedIssueEvent: MilestonedIssueEvent?
    public var demilestonedIssueEvent: DemilestonedIssueEvent?
    public var renamedIssueEvent: RenamedIssueEvent?
    public var reviewRequestedIssueEvent: ReviewRequestedIssueEvent?
    public var reviewRequestRemovedIssueEvent: ReviewRequestRemovedIssueEvent?
    public var reviewDismissedIssueEvent: ReviewDismissedIssueEvent?
    public var lockedIssueEvent: LockedIssueEvent?
    public var addedToProjectIssueEvent: AddedToProjectIssueEvent?
    public var movedColumnInProjectIssueEvent: MovedColumnInProjectIssueEvent?
    public var removedFromProjectIssueEvent: RemovedFromProjectIssueEvent?
    public var convertedNoteToIssueIssueEvent: ConvertedNoteToIssueIssueEvent?
    public var timelineCommentEvent: TimelineCommentEvent?
    public var timelineCrossReferencedEvent: TimelineCrossReferencedEvent?
    public var timelineCommittedEvent: TimelineCommittedEvent?
    public var timelineReviewedEvent: TimelineReviewedEvent?
    public var timelineLineCommentedEvent: TimelineLineCommentedEvent?
    public var timelineCommitCommentedEvent: TimelineCommitCommentedEvent?
    public var timelineAssignedIssueEvent: TimelineAssignedIssueEvent?
    public var timelineUnassignedIssueEvent: TimelineUnassignedIssueEvent?
    public var stateChangeIssueEvent: StateChangeIssueEvent?

    public init(labeledIssueEvent: LabeledIssueEvent? = nil, unlabeledIssueEvent: UnlabeledIssueEvent? = nil, milestonedIssueEvent: MilestonedIssueEvent? = nil, demilestonedIssueEvent: DemilestonedIssueEvent? = nil, renamedIssueEvent: RenamedIssueEvent? = nil, reviewRequestedIssueEvent: ReviewRequestedIssueEvent? = nil, reviewRequestRemovedIssueEvent: ReviewRequestRemovedIssueEvent? = nil, reviewDismissedIssueEvent: ReviewDismissedIssueEvent? = nil, lockedIssueEvent: LockedIssueEvent? = nil, addedToProjectIssueEvent: AddedToProjectIssueEvent? = nil, movedColumnInProjectIssueEvent: MovedColumnInProjectIssueEvent? = nil, removedFromProjectIssueEvent: RemovedFromProjectIssueEvent? = nil, convertedNoteToIssueIssueEvent: ConvertedNoteToIssueIssueEvent? = nil, timelineCommentEvent: TimelineCommentEvent? = nil, timelineCrossReferencedEvent: TimelineCrossReferencedEvent? = nil, timelineCommittedEvent: TimelineCommittedEvent? = nil, timelineReviewedEvent: TimelineReviewedEvent? = nil, timelineLineCommentedEvent: TimelineLineCommentedEvent? = nil, timelineCommitCommentedEvent: TimelineCommitCommentedEvent? = nil, timelineAssignedIssueEvent: TimelineAssignedIssueEvent? = nil, timelineUnassignedIssueEvent: TimelineUnassignedIssueEvent? = nil, stateChangeIssueEvent: StateChangeIssueEvent? = nil) {
        self.labeledIssueEvent = labeledIssueEvent
        self.unlabeledIssueEvent = unlabeledIssueEvent
        self.milestonedIssueEvent = milestonedIssueEvent
        self.demilestonedIssueEvent = demilestonedIssueEvent
        self.renamedIssueEvent = renamedIssueEvent
        self.reviewRequestedIssueEvent = reviewRequestedIssueEvent
        self.reviewRequestRemovedIssueEvent = reviewRequestRemovedIssueEvent
        self.reviewDismissedIssueEvent = reviewDismissedIssueEvent
        self.lockedIssueEvent = lockedIssueEvent
        self.addedToProjectIssueEvent = addedToProjectIssueEvent
        self.movedColumnInProjectIssueEvent = movedColumnInProjectIssueEvent
        self.removedFromProjectIssueEvent = removedFromProjectIssueEvent
        self.convertedNoteToIssueIssueEvent = convertedNoteToIssueIssueEvent
        self.timelineCommentEvent = timelineCommentEvent
        self.timelineCrossReferencedEvent = timelineCrossReferencedEvent
        self.timelineCommittedEvent = timelineCommittedEvent
        self.timelineReviewedEvent = timelineReviewedEvent
        self.timelineLineCommentedEvent = timelineLineCommentedEvent
        self.timelineCommitCommentedEvent = timelineCommitCommentedEvent
        self.timelineAssignedIssueEvent = timelineAssignedIssueEvent
        self.timelineUnassignedIssueEvent = timelineUnassignedIssueEvent
        self.stateChangeIssueEvent = stateChangeIssueEvent
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.labeledIssueEvent = try? container.decode(LabeledIssueEvent.self)
        self.unlabeledIssueEvent = try? container.decode(UnlabeledIssueEvent.self)
        self.milestonedIssueEvent = try? container.decode(MilestonedIssueEvent.self)
        self.demilestonedIssueEvent = try? container.decode(DemilestonedIssueEvent.self)
        self.renamedIssueEvent = try? container.decode(RenamedIssueEvent.self)
        self.reviewRequestedIssueEvent = try? container.decode(ReviewRequestedIssueEvent.self)
        self.reviewRequestRemovedIssueEvent = try? container.decode(ReviewRequestRemovedIssueEvent.self)
        self.reviewDismissedIssueEvent = try? container.decode(ReviewDismissedIssueEvent.self)
        self.lockedIssueEvent = try? container.decode(LockedIssueEvent.self)
        self.addedToProjectIssueEvent = try? container.decode(AddedToProjectIssueEvent.self)
        self.movedColumnInProjectIssueEvent = try? container.decode(MovedColumnInProjectIssueEvent.self)
        self.removedFromProjectIssueEvent = try? container.decode(RemovedFromProjectIssueEvent.self)
        self.convertedNoteToIssueIssueEvent = try? container.decode(ConvertedNoteToIssueIssueEvent.self)
        self.timelineCommentEvent = try? container.decode(TimelineCommentEvent.self)
        self.timelineCrossReferencedEvent = try? container.decode(TimelineCrossReferencedEvent.self)
        self.timelineCommittedEvent = try? container.decode(TimelineCommittedEvent.self)
        self.timelineReviewedEvent = try? container.decode(TimelineReviewedEvent.self)
        self.timelineLineCommentedEvent = try? container.decode(TimelineLineCommentedEvent.self)
        self.timelineCommitCommentedEvent = try? container.decode(TimelineCommitCommentedEvent.self)
        self.timelineAssignedIssueEvent = try? container.decode(TimelineAssignedIssueEvent.self)
        self.timelineUnassignedIssueEvent = try? container.decode(TimelineUnassignedIssueEvent.self)
        self.stateChangeIssueEvent = try? container.decode(StateChangeIssueEvent.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        if let value = labeledIssueEvent { try container.encode(value) }
        if let value = unlabeledIssueEvent { try container.encode(value) }
        if let value = milestonedIssueEvent { try container.encode(value) }
        if let value = demilestonedIssueEvent { try container.encode(value) }
        if let value = renamedIssueEvent { try container.encode(value) }
        if let value = reviewRequestedIssueEvent { try container.encode(value) }
        if let value = reviewRequestRemovedIssueEvent { try container.encode(value) }
        if let value = reviewDismissedIssueEvent { try container.encode(value) }
        if let value = lockedIssueEvent { try container.encode(value) }
        if let value = addedToProjectIssueEvent { try container.encode(value) }
        if let value = movedColumnInProjectIssueEvent { try container.encode(value) }
        if let value = removedFromProjectIssueEvent { try container.encode(value) }
        if let value = convertedNoteToIssueIssueEvent { try container.encode(value) }
        if let value = timelineCommentEvent { try container.encode(value) }
        if let value = timelineCrossReferencedEvent { try container.encode(value) }
        if let value = timelineCommittedEvent { try container.encode(value) }
        if let value = timelineReviewedEvent { try container.encode(value) }
        if let value = timelineLineCommentedEvent { try container.encode(value) }
        if let value = timelineCommitCommentedEvent { try container.encode(value) }
        if let value = timelineAssignedIssueEvent { try container.encode(value) }
        if let value = timelineUnassignedIssueEvent { try container.encode(value) }
        if let value = stateChangeIssueEvent { try container.encode(value) }
    }
}
