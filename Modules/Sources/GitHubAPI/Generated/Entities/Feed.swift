// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Feed: Codable {
    /// Example: "https://github.com/timeline"
    public var timelineURL: String
    /// Example: "https://github.com/{user}"
    public var userURL: String
    /// Example: "https://github.com/octocat"
    public var currentUserPublicURL: String?
    /// Example: "https://github.com/octocat.private?token=abc123"
    public var currentUserURL: String?
    /// Example: "https://github.com/octocat.private.actor?token=abc123"
    public var currentUserActorURL: String?
    /// Example: "https://github.com/octocat-org"
    public var currentUserOrganizationURL: String?
    /// Example: ["https://github.com/organizations/github/octocat.private.atom?token=abc123"]
    public var currentUserOrganizationURLs: [URL]?
    /// Example: "https://github.com/security-advisories"
    public var securityAdvisoriesURL: String?
    public var links: Links

    public struct Links: Codable {
        /// Link With Type
        ///
        /// Hypermedia Link with Type
        public var timeline: LinkWithType
        /// Link With Type
        ///
        /// Hypermedia Link with Type
        public var user: LinkWithType
        /// Link With Type
        ///
        /// Hypermedia Link with Type
        public var securityAdvisories: LinkWithType?
        /// Link With Type
        ///
        /// Hypermedia Link with Type
        public var currentUser: LinkWithType?
        /// Link With Type
        ///
        /// Hypermedia Link with Type
        public var currentUserPublic: LinkWithType?
        /// Link With Type
        ///
        /// Hypermedia Link with Type
        public var currentUserActor: LinkWithType?
        /// Link With Type
        ///
        /// Hypermedia Link with Type
        public var currentUserOrganization: LinkWithType?
        public var currentUserOrganizations: [LinkWithType]?

        public init(timeline: LinkWithType, user: LinkWithType, securityAdvisories: LinkWithType? = nil, currentUser: LinkWithType? = nil, currentUserPublic: LinkWithType? = nil, currentUserActor: LinkWithType? = nil, currentUserOrganization: LinkWithType? = nil, currentUserOrganizations: [LinkWithType]? = nil) {
            self.timeline = timeline
            self.user = user
            self.securityAdvisories = securityAdvisories
            self.currentUser = currentUser
            self.currentUserPublic = currentUserPublic
            self.currentUserActor = currentUserActor
            self.currentUserOrganization = currentUserOrganization
            self.currentUserOrganizations = currentUserOrganizations
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.timeline = try values.decode(LinkWithType.self, forKey: "timeline")
            self.user = try values.decode(LinkWithType.self, forKey: "user")
            self.securityAdvisories = try values.decodeIfPresent(LinkWithType.self, forKey: "security_advisories")
            self.currentUser = try values.decodeIfPresent(LinkWithType.self, forKey: "current_user")
            self.currentUserPublic = try values.decodeIfPresent(LinkWithType.self, forKey: "current_user_public")
            self.currentUserActor = try values.decodeIfPresent(LinkWithType.self, forKey: "current_user_actor")
            self.currentUserOrganization = try values.decodeIfPresent(LinkWithType.self, forKey: "current_user_organization")
            self.currentUserOrganizations = try values.decodeIfPresent([LinkWithType].self, forKey: "current_user_organizations")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(timeline, forKey: "timeline")
            try values.encode(user, forKey: "user")
            try values.encodeIfPresent(securityAdvisories, forKey: "security_advisories")
            try values.encodeIfPresent(currentUser, forKey: "current_user")
            try values.encodeIfPresent(currentUserPublic, forKey: "current_user_public")
            try values.encodeIfPresent(currentUserActor, forKey: "current_user_actor")
            try values.encodeIfPresent(currentUserOrganization, forKey: "current_user_organization")
            try values.encodeIfPresent(currentUserOrganizations, forKey: "current_user_organizations")
        }
    }

    public init(timelineURL: String, userURL: String, currentUserPublicURL: String? = nil, currentUserURL: String? = nil, currentUserActorURL: String? = nil, currentUserOrganizationURL: String? = nil, currentUserOrganizationURLs: [URL]? = nil, securityAdvisoriesURL: String? = nil, links: Links) {
        self.timelineURL = timelineURL
        self.userURL = userURL
        self.currentUserPublicURL = currentUserPublicURL
        self.currentUserURL = currentUserURL
        self.currentUserActorURL = currentUserActorURL
        self.currentUserOrganizationURL = currentUserOrganizationURL
        self.currentUserOrganizationURLs = currentUserOrganizationURLs
        self.securityAdvisoriesURL = securityAdvisoriesURL
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.timelineURL = try values.decode(String.self, forKey: "timeline_url")
        self.userURL = try values.decode(String.self, forKey: "user_url")
        self.currentUserPublicURL = try values.decodeIfPresent(String.self, forKey: "current_user_public_url")
        self.currentUserURL = try values.decodeIfPresent(String.self, forKey: "current_user_url")
        self.currentUserActorURL = try values.decodeIfPresent(String.self, forKey: "current_user_actor_url")
        self.currentUserOrganizationURL = try values.decodeIfPresent(String.self, forKey: "current_user_organization_url")
        self.currentUserOrganizationURLs = try values.decodeIfPresent([URL].self, forKey: "current_user_organization_urls")
        self.securityAdvisoriesURL = try values.decodeIfPresent(String.self, forKey: "security_advisories_url")
        self.links = try values.decode(Links.self, forKey: "_links")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(timelineURL, forKey: "timeline_url")
        try values.encode(userURL, forKey: "user_url")
        try values.encodeIfPresent(currentUserPublicURL, forKey: "current_user_public_url")
        try values.encodeIfPresent(currentUserURL, forKey: "current_user_url")
        try values.encodeIfPresent(currentUserActorURL, forKey: "current_user_actor_url")
        try values.encodeIfPresent(currentUserOrganizationURL, forKey: "current_user_organization_url")
        try values.encodeIfPresent(currentUserOrganizationURLs, forKey: "current_user_organization_urls")
        try values.encodeIfPresent(securityAdvisoriesURL, forKey: "security_advisories_url")
        try values.encode(links, forKey: "_links")
    }
}
