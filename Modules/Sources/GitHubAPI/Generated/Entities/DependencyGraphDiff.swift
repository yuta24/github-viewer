// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct DependencyGraphDiffItem: Codable {
    public var changeType: ChangeType
    /// Example: "path/to/package-lock.json"
    public var manifest: String
    /// Example: "npm"
    public var ecosystem: String
    /// Example: "@actions/core"
    public var name: String
    /// Example: "1.0.0"
    public var version: String
    /// Example: "pkg:/npm/%40actions/core@1.1.0"
    public var packageURL: String?
    /// Example: "MIT"
    public var license: String?
    /// Example: "https://github.com/github/actions"
    public var sourceRepositoryURL: String?
    public var vulnerabilities: [Vulnerability]
    /// Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
    public var scope: Scope

    public enum ChangeType: String, Codable, CaseIterable {
        case added
        case removed
    }

    public struct Vulnerability: Codable {
        /// Example: "critical"
        public var severity: String
        /// Example: "GHSA-rf4j-j272-fj86"
        public var advisoryGhsaID: String
        /// Example: "A summary of the advisory."
        public var advisorySummary: String
        /// Example: "https://github.com/advisories/GHSA-rf4j-j272-fj86"
        public var advisoryURL: String

        public init(severity: String, advisoryGhsaID: String, advisorySummary: String, advisoryURL: String) {
            self.severity = severity
            self.advisoryGhsaID = advisoryGhsaID
            self.advisorySummary = advisorySummary
            self.advisoryURL = advisoryURL
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.severity = try values.decode(String.self, forKey: "severity")
            self.advisoryGhsaID = try values.decode(String.self, forKey: "advisory_ghsa_id")
            self.advisorySummary = try values.decode(String.self, forKey: "advisory_summary")
            self.advisoryURL = try values.decode(String.self, forKey: "advisory_url")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(severity, forKey: "severity")
            try values.encode(advisoryGhsaID, forKey: "advisory_ghsa_id")
            try values.encode(advisorySummary, forKey: "advisory_summary")
            try values.encode(advisoryURL, forKey: "advisory_url")
        }
    }

    /// Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
    public enum Scope: String, Codable, CaseIterable {
        case unknown
        case runtime
        case development
    }

    public init(changeType: ChangeType, manifest: String, ecosystem: String, name: String, version: String, packageURL: String? = nil, license: String? = nil, sourceRepositoryURL: String? = nil, vulnerabilities: [Vulnerability], scope: Scope) {
        self.changeType = changeType
        self.manifest = manifest
        self.ecosystem = ecosystem
        self.name = name
        self.version = version
        self.packageURL = packageURL
        self.license = license
        self.sourceRepositoryURL = sourceRepositoryURL
        self.vulnerabilities = vulnerabilities
        self.scope = scope
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.changeType = try values.decode(ChangeType.self, forKey: "change_type")
        self.manifest = try values.decode(String.self, forKey: "manifest")
        self.ecosystem = try values.decode(String.self, forKey: "ecosystem")
        self.name = try values.decode(String.self, forKey: "name")
        self.version = try values.decode(String.self, forKey: "version")
        self.packageURL = try values.decodeIfPresent(String.self, forKey: "package_url")
        self.license = try values.decodeIfPresent(String.self, forKey: "license")
        self.sourceRepositoryURL = try values.decodeIfPresent(String.self, forKey: "source_repository_url")
        self.vulnerabilities = try values.decode([Vulnerability].self, forKey: "vulnerabilities")
        self.scope = try values.decode(Scope.self, forKey: "scope")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(changeType, forKey: "change_type")
        try values.encode(manifest, forKey: "manifest")
        try values.encode(ecosystem, forKey: "ecosystem")
        try values.encode(name, forKey: "name")
        try values.encode(version, forKey: "version")
        try values.encodeIfPresent(packageURL, forKey: "package_url")
        try values.encodeIfPresent(license, forKey: "license")
        try values.encodeIfPresent(sourceRepositoryURL, forKey: "source_repository_url")
        try values.encode(vulnerabilities, forKey: "vulnerabilities")
        try values.encode(scope, forKey: "scope")
    }
}
