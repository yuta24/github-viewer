// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PagesHTTPSCertificate: Codable {
    /// Example: "approved"
    public var state: State
    /// Example: "Certificate is approved"
    public var description: String
    /// Array of the domain set and its alternate name (if it is configured)
    ///
    /// Example: ["example.com", "www.example.com"]
    public var domains: [String]
    public var expiresAt: String?

    /// Example: "approved"
    public enum State: String, Codable, CaseIterable {
        case new
        case authorizationCreated = "authorization_created"
        case authorizationPending = "authorization_pending"
        case authorized
        case authorizationRevoked = "authorization_revoked"
        case issued
        case uploaded
        case approved
        case errored
        case badAuthz = "bad_authz"
        case destroyPending = "destroy_pending"
        case dnsChanged = "dns_changed"
    }

    public init(state: State, description: String, domains: [String], expiresAt: String? = nil) {
        self.state = state
        self.description = description
        self.domains = domains
        self.expiresAt = expiresAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.state = try values.decode(State.self, forKey: "state")
        self.description = try values.decode(String.self, forKey: "description")
        self.domains = try values.decode([String].self, forKey: "domains")
        self.expiresAt = try values.decodeIfPresent(String.self, forKey: "expires_at")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(state, forKey: "state")
        try values.encode(description, forKey: "description")
        try values.encode(domains, forKey: "domains")
        try values.encodeIfPresent(expiresAt, forKey: "expires_at")
    }
}
