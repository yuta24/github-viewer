// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct TopicSearchResultItem: Codable {
    public var name: String
    public var displayName: String?
    public var shortDescription: String?
    public var description: String?
    public var createdBy: String?
    public var released: String?
    public var createdAt: Date
    public var updatedAt: Date
    public var isFeatured: Bool
    public var isCurated: Bool
    public var score: Double
    public var repositoryCount: Int?
    public var logoURL: URL?
    /// Search Result Text Matches
    public var textMatches: [SearchResultTextMatch]?
    public var related: [RelatedItem]?
    public var aliases: [Alias]?

    public struct RelatedItem: Codable {
        public var topicRelation: TopicRelation?

        public struct TopicRelation: Codable, Identifiable {
            public var id: Int?
            public var name: String?
            public var topicID: Int?
            public var relationType: String?

            public init(id: Int? = nil, name: String? = nil, topicID: Int? = nil, relationType: String? = nil) {
                self.id = id
                self.name = name
                self.topicID = topicID
                self.relationType = relationType
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.id = try values.decodeIfPresent(Int.self, forKey: "id")
                self.name = try values.decodeIfPresent(String.self, forKey: "name")
                self.topicID = try values.decodeIfPresent(Int.self, forKey: "topic_id")
                self.relationType = try values.decodeIfPresent(String.self, forKey: "relation_type")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(id, forKey: "id")
                try values.encodeIfPresent(name, forKey: "name")
                try values.encodeIfPresent(topicID, forKey: "topic_id")
                try values.encodeIfPresent(relationType, forKey: "relation_type")
            }
        }

        public init(topicRelation: TopicRelation? = nil) {
            self.topicRelation = topicRelation
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.topicRelation = try values.decodeIfPresent(TopicRelation.self, forKey: "topic_relation")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(topicRelation, forKey: "topic_relation")
        }
    }

    public struct Alias: Codable {
        public var topicRelation: TopicRelation?

        public struct TopicRelation: Codable, Identifiable {
            public var id: Int?
            public var name: String?
            public var topicID: Int?
            public var relationType: String?

            public init(id: Int? = nil, name: String? = nil, topicID: Int? = nil, relationType: String? = nil) {
                self.id = id
                self.name = name
                self.topicID = topicID
                self.relationType = relationType
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.id = try values.decodeIfPresent(Int.self, forKey: "id")
                self.name = try values.decodeIfPresent(String.self, forKey: "name")
                self.topicID = try values.decodeIfPresent(Int.self, forKey: "topic_id")
                self.relationType = try values.decodeIfPresent(String.self, forKey: "relation_type")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(id, forKey: "id")
                try values.encodeIfPresent(name, forKey: "name")
                try values.encodeIfPresent(topicID, forKey: "topic_id")
                try values.encodeIfPresent(relationType, forKey: "relation_type")
            }
        }

        public init(topicRelation: TopicRelation? = nil) {
            self.topicRelation = topicRelation
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.topicRelation = try values.decodeIfPresent(TopicRelation.self, forKey: "topic_relation")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(topicRelation, forKey: "topic_relation")
        }
    }

    public init(name: String, displayName: String? = nil, shortDescription: String? = nil, description: String? = nil, createdBy: String? = nil, released: String? = nil, createdAt: Date, updatedAt: Date, isFeatured: Bool, isCurated: Bool, score: Double, repositoryCount: Int? = nil, logoURL: URL? = nil, textMatches: [SearchResultTextMatch]? = nil, related: [RelatedItem]? = nil, aliases: [Alias]? = nil) {
        self.name = name
        self.displayName = displayName
        self.shortDescription = shortDescription
        self.description = description
        self.createdBy = createdBy
        self.released = released
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.isFeatured = isFeatured
        self.isCurated = isCurated
        self.score = score
        self.repositoryCount = repositoryCount
        self.logoURL = logoURL
        self.textMatches = textMatches
        self.related = related
        self.aliases = aliases
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decode(String.self, forKey: "name")
        self.displayName = try values.decodeIfPresent(String.self, forKey: "display_name")
        self.shortDescription = try values.decodeIfPresent(String.self, forKey: "short_description")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.createdBy = try values.decodeIfPresent(String.self, forKey: "created_by")
        self.released = try values.decodeIfPresent(String.self, forKey: "released")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.isFeatured = try values.decode(Bool.self, forKey: "featured")
        self.isCurated = try values.decode(Bool.self, forKey: "curated")
        self.score = try values.decode(Double.self, forKey: "score")
        self.repositoryCount = try values.decodeIfPresent(Int.self, forKey: "repository_count")
        self.logoURL = try values.decodeIfPresent(URL.self, forKey: "logo_url")
        self.textMatches = try values.decodeIfPresent([SearchResultTextMatch].self, forKey: "text_matches")
        self.related = try values.decodeIfPresent([RelatedItem].self, forKey: "related")
        self.aliases = try values.decodeIfPresent([Alias].self, forKey: "aliases")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(displayName, forKey: "display_name")
        try values.encodeIfPresent(shortDescription, forKey: "short_description")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(createdBy, forKey: "created_by")
        try values.encodeIfPresent(released, forKey: "released")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encode(isFeatured, forKey: "featured")
        try values.encode(isCurated, forKey: "curated")
        try values.encode(score, forKey: "score")
        try values.encodeIfPresent(repositoryCount, forKey: "repository_count")
        try values.encodeIfPresent(logoURL, forKey: "logo_url")
        try values.encodeIfPresent(textMatches, forKey: "text_matches")
        try values.encodeIfPresent(related, forKey: "related")
        try values.encodeIfPresent(aliases, forKey: "aliases")
    }
}
