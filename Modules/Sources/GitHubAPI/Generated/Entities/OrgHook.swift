// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct OrgHook: Codable, Identifiable {
    public var id: Int
    /// Example: "https://api.github.com/orgs/octocat/hooks/1"
    public var url: URL
    /// Example: "https://api.github.com/orgs/octocat/hooks/1/pings"
    public var pingURL: URL
    /// Example: "https://api.github.com/orgs/octocat/hooks/1/deliveries"
    public var deliveriesURL: URL?
    /// Example: "web"
    public var name: String
    /// Example: ["push", "pull_request"]
    public var events: [String]
    /// Example: true
    public var isActive: Bool
    public var config: Config
    /// Example: "2011-09-06T20:39:23Z"
    public var updatedAt: Date
    /// Example: "2011-09-06T17:26:27Z"
    public var createdAt: Date
    public var type: String

    public struct Config: Codable {
        /// Example: "http://example.com/2"
        public var url: String?
        /// Example: "0"
        public var insecureSSL: String?
        /// Example: "form"
        public var contentType: String?
        /// Example: "********"
        public var secret: String?

        public init(url: String? = nil, insecureSSL: String? = nil, contentType: String? = nil, secret: String? = nil) {
            self.url = url
            self.insecureSSL = insecureSSL
            self.contentType = contentType
            self.secret = secret
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.url = try values.decodeIfPresent(String.self, forKey: "url")
            self.insecureSSL = try values.decodeIfPresent(String.self, forKey: "insecure_ssl")
            self.contentType = try values.decodeIfPresent(String.self, forKey: "content_type")
            self.secret = try values.decodeIfPresent(String.self, forKey: "secret")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(url, forKey: "url")
            try values.encodeIfPresent(insecureSSL, forKey: "insecure_ssl")
            try values.encodeIfPresent(contentType, forKey: "content_type")
            try values.encodeIfPresent(secret, forKey: "secret")
        }
    }

    public init(id: Int, url: URL, pingURL: URL, deliveriesURL: URL? = nil, name: String, events: [String], isActive: Bool, config: Config, updatedAt: Date, createdAt: Date, type: String) {
        self.id = id
        self.url = url
        self.pingURL = pingURL
        self.deliveriesURL = deliveriesURL
        self.name = name
        self.events = events
        self.isActive = isActive
        self.config = config
        self.updatedAt = updatedAt
        self.createdAt = createdAt
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.url = try values.decode(URL.self, forKey: "url")
        self.pingURL = try values.decode(URL.self, forKey: "ping_url")
        self.deliveriesURL = try values.decodeIfPresent(URL.self, forKey: "deliveries_url")
        self.name = try values.decode(String.self, forKey: "name")
        self.events = try values.decode([String].self, forKey: "events")
        self.isActive = try values.decode(Bool.self, forKey: "active")
        self.config = try values.decode(Config.self, forKey: "config")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.type = try values.decode(String.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(url, forKey: "url")
        try values.encode(pingURL, forKey: "ping_url")
        try values.encodeIfPresent(deliveriesURL, forKey: "deliveries_url")
        try values.encode(name, forKey: "name")
        try values.encode(events, forKey: "events")
        try values.encode(isActive, forKey: "active")
        try values.encode(config, forKey: "config")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(type, forKey: "type")
    }
}
