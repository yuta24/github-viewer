// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct WebhookMergeGroupChecksRequested: Codable {
    public var action: String
    /// Simple Installation
    public var installation: SimpleInstallation?
    public var mergeGroup: MergeGroup
    /// Organization Simple
    public var organization: OrganizationSimple?
    /// A git repository
    public var repository: Repository?
    /// Simple User
    public var sender: SimpleUser?

    public struct MergeGroup: Codable {
        public var baseRef: String
        public var headRef: String
        public var headSha: String

        public init(baseRef: String, headRef: String, headSha: String) {
            self.baseRef = baseRef
            self.headRef = headRef
            self.headSha = headSha
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.baseRef = try values.decode(String.self, forKey: "base_ref")
            self.headRef = try values.decode(String.self, forKey: "head_ref")
            self.headSha = try values.decode(String.self, forKey: "head_sha")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(baseRef, forKey: "base_ref")
            try values.encode(headRef, forKey: "head_ref")
            try values.encode(headSha, forKey: "head_sha")
        }
    }

    public init(action: String, installation: SimpleInstallation? = nil, mergeGroup: MergeGroup, organization: OrganizationSimple? = nil, repository: Repository? = nil, sender: SimpleUser? = nil) {
        self.action = action
        self.installation = installation
        self.mergeGroup = mergeGroup
        self.organization = organization
        self.repository = repository
        self.sender = sender
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.action = try values.decode(String.self, forKey: "action")
        self.installation = try values.decodeIfPresent(SimpleInstallation.self, forKey: "installation")
        self.mergeGroup = try values.decode(MergeGroup.self, forKey: "merge_group")
        self.organization = try values.decodeIfPresent(OrganizationSimple.self, forKey: "organization")
        self.repository = try values.decodeIfPresent(Repository.self, forKey: "repository")
        self.sender = try values.decodeIfPresent(SimpleUser.self, forKey: "sender")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(action, forKey: "action")
        try values.encodeIfPresent(installation, forKey: "installation")
        try values.encode(mergeGroup, forKey: "merge_group")
        try values.encodeIfPresent(organization, forKey: "organization")
        try values.encodeIfPresent(repository, forKey: "repository")
        try values.encodeIfPresent(sender, forKey: "sender")
    }
}
