// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Event: Codable, Identifiable {
    public var id: String
    public var type: String?
    public var actor: Actor
    public var repo: Repo
    /// Actor
    public var org: Actor?
    public var payload: Payload
    public var isPublic: Bool
    public var createdAt: Date?

    public struct Repo: Codable, Identifiable {
        public var id: Int
        public var name: String
        public var url: URL

        public init(id: Int, name: String, url: URL) {
            self.id = id
            self.name = name
            self.url = url
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decode(Int.self, forKey: "id")
            self.name = try values.decode(String.self, forKey: "name")
            self.url = try values.decode(URL.self, forKey: "url")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(id, forKey: "id")
            try values.encode(name, forKey: "name")
            try values.encode(url, forKey: "url")
        }
    }

    public struct Payload: Codable {
        public var action: String?
        /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
        public var issue: Issue?
        /// Issue Comment
        ///
        /// Comments provide a way for people to collaborate on an issue.
        public var comment: IssueComment?
        public var pages: [Page]?

        public struct Page: Codable {
            public var pageName: String?
            public var title: String?
            public var summary: String?
            public var action: String?
            public var sha: String?
            public var htmlURL: String?

            public init(pageName: String? = nil, title: String? = nil, summary: String? = nil, action: String? = nil, sha: String? = nil, htmlURL: String? = nil) {
                self.pageName = pageName
                self.title = title
                self.summary = summary
                self.action = action
                self.sha = sha
                self.htmlURL = htmlURL
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.pageName = try values.decodeIfPresent(String.self, forKey: "page_name")
                self.title = try values.decodeIfPresent(String.self, forKey: "title")
                self.summary = try values.decodeIfPresent(String.self, forKey: "summary")
                self.action = try values.decodeIfPresent(String.self, forKey: "action")
                self.sha = try values.decodeIfPresent(String.self, forKey: "sha")
                self.htmlURL = try values.decodeIfPresent(String.self, forKey: "html_url")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(pageName, forKey: "page_name")
                try values.encodeIfPresent(title, forKey: "title")
                try values.encodeIfPresent(summary, forKey: "summary")
                try values.encodeIfPresent(action, forKey: "action")
                try values.encodeIfPresent(sha, forKey: "sha")
                try values.encodeIfPresent(htmlURL, forKey: "html_url")
            }
        }

        public init(action: String? = nil, issue: Issue? = nil, comment: IssueComment? = nil, pages: [Page]? = nil) {
            self.action = action
            self.issue = issue
            self.comment = comment
            self.pages = pages
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.action = try values.decodeIfPresent(String.self, forKey: "action")
            self.issue = try values.decodeIfPresent(Issue.self, forKey: "issue")
            self.comment = try values.decodeIfPresent(IssueComment.self, forKey: "comment")
            self.pages = try values.decodeIfPresent([Page].self, forKey: "pages")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(action, forKey: "action")
            try values.encodeIfPresent(issue, forKey: "issue")
            try values.encodeIfPresent(comment, forKey: "comment")
            try values.encodeIfPresent(pages, forKey: "pages")
        }
    }

    public init(id: String, type: String? = nil, actor: Actor, repo: Repo, org: Actor? = nil, payload: Payload, isPublic: Bool, createdAt: Date? = nil) {
        self.id = id
        self.type = type
        self.actor = actor
        self.repo = repo
        self.org = org
        self.payload = payload
        self.isPublic = isPublic
        self.createdAt = createdAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.type = try values.decodeIfPresent(String.self, forKey: "type")
        self.actor = try values.decode(Actor.self, forKey: "actor")
        self.repo = try values.decode(Repo.self, forKey: "repo")
        self.org = try values.decodeIfPresent(Actor.self, forKey: "org")
        self.payload = try values.decode(Payload.self, forKey: "payload")
        self.isPublic = try values.decode(Bool.self, forKey: "public")
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encode(actor, forKey: "actor")
        try values.encode(repo, forKey: "repo")
        try values.encodeIfPresent(org, forKey: "org")
        try values.encode(payload, forKey: "payload")
        try values.encode(isPublic, forKey: "public")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
    }
}
