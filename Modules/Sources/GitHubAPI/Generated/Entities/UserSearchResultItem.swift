// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct UserSearchResultItem: Codable, Identifiable {
    public var login: String
    public var id: Int
    public var nodeID: String
    public var avatarURL: URL
    public var gravatarID: String?
    public var url: URL
    public var htmlURL: URL
    public var followersURL: URL
    public var subscriptionsURL: URL
    public var organizationsURL: URL
    public var reposURL: URL
    public var receivedEventsURL: URL
    public var type: String
    public var score: Double
    public var followingURL: String
    public var gistsURL: String
    public var starredURL: String
    public var eventsURL: String
    public var publicRepos: Int?
    public var publicGists: Int?
    public var followers: Int?
    public var following: Int?
    public var createdAt: Date?
    public var updatedAt: Date?
    public var name: String?
    public var bio: String?
    public var email: String?
    public var location: String?
    public var isSiteAdmin: Bool
    public var isHireable: Bool?
    /// Search Result Text Matches
    public var textMatches: [SearchResultTextMatch]?
    public var blog: String?
    public var company: String?
    public var suspendedAt: Date?

    public init(login: String, id: Int, nodeID: String, avatarURL: URL, gravatarID: String? = nil, url: URL, htmlURL: URL, followersURL: URL, subscriptionsURL: URL, organizationsURL: URL, reposURL: URL, receivedEventsURL: URL, type: String, score: Double, followingURL: String, gistsURL: String, starredURL: String, eventsURL: String, publicRepos: Int? = nil, publicGists: Int? = nil, followers: Int? = nil, following: Int? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, name: String? = nil, bio: String? = nil, email: String? = nil, location: String? = nil, isSiteAdmin: Bool, isHireable: Bool? = nil, textMatches: [SearchResultTextMatch]? = nil, blog: String? = nil, company: String? = nil, suspendedAt: Date? = nil) {
        self.login = login
        self.id = id
        self.nodeID = nodeID
        self.avatarURL = avatarURL
        self.gravatarID = gravatarID
        self.url = url
        self.htmlURL = htmlURL
        self.followersURL = followersURL
        self.subscriptionsURL = subscriptionsURL
        self.organizationsURL = organizationsURL
        self.reposURL = reposURL
        self.receivedEventsURL = receivedEventsURL
        self.type = type
        self.score = score
        self.followingURL = followingURL
        self.gistsURL = gistsURL
        self.starredURL = starredURL
        self.eventsURL = eventsURL
        self.publicRepos = publicRepos
        self.publicGists = publicGists
        self.followers = followers
        self.following = following
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.name = name
        self.bio = bio
        self.email = email
        self.location = location
        self.isSiteAdmin = isSiteAdmin
        self.isHireable = isHireable
        self.textMatches = textMatches
        self.blog = blog
        self.company = company
        self.suspendedAt = suspendedAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.login = try values.decode(String.self, forKey: "login")
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.avatarURL = try values.decode(URL.self, forKey: "avatar_url")
        self.gravatarID = try values.decodeIfPresent(String.self, forKey: "gravatar_id")
        self.url = try values.decode(URL.self, forKey: "url")
        self.htmlURL = try values.decode(URL.self, forKey: "html_url")
        self.followersURL = try values.decode(URL.self, forKey: "followers_url")
        self.subscriptionsURL = try values.decode(URL.self, forKey: "subscriptions_url")
        self.organizationsURL = try values.decode(URL.self, forKey: "organizations_url")
        self.reposURL = try values.decode(URL.self, forKey: "repos_url")
        self.receivedEventsURL = try values.decode(URL.self, forKey: "received_events_url")
        self.type = try values.decode(String.self, forKey: "type")
        self.score = try values.decode(Double.self, forKey: "score")
        self.followingURL = try values.decode(String.self, forKey: "following_url")
        self.gistsURL = try values.decode(String.self, forKey: "gists_url")
        self.starredURL = try values.decode(String.self, forKey: "starred_url")
        self.eventsURL = try values.decode(String.self, forKey: "events_url")
        self.publicRepos = try values.decodeIfPresent(Int.self, forKey: "public_repos")
        self.publicGists = try values.decodeIfPresent(Int.self, forKey: "public_gists")
        self.followers = try values.decodeIfPresent(Int.self, forKey: "followers")
        self.following = try values.decodeIfPresent(Int.self, forKey: "following")
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.updatedAt = try values.decodeIfPresent(Date.self, forKey: "updated_at")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.bio = try values.decodeIfPresent(String.self, forKey: "bio")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.location = try values.decodeIfPresent(String.self, forKey: "location")
        self.isSiteAdmin = try values.decode(Bool.self, forKey: "site_admin")
        self.isHireable = try values.decodeIfPresent(Bool.self, forKey: "hireable")
        self.textMatches = try values.decodeIfPresent([SearchResultTextMatch].self, forKey: "text_matches")
        self.blog = try values.decodeIfPresent(String.self, forKey: "blog")
        self.company = try values.decodeIfPresent(String.self, forKey: "company")
        self.suspendedAt = try values.decodeIfPresent(Date.self, forKey: "suspended_at")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(login, forKey: "login")
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(avatarURL, forKey: "avatar_url")
        try values.encodeIfPresent(gravatarID, forKey: "gravatar_id")
        try values.encode(url, forKey: "url")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encode(followersURL, forKey: "followers_url")
        try values.encode(subscriptionsURL, forKey: "subscriptions_url")
        try values.encode(organizationsURL, forKey: "organizations_url")
        try values.encode(reposURL, forKey: "repos_url")
        try values.encode(receivedEventsURL, forKey: "received_events_url")
        try values.encode(type, forKey: "type")
        try values.encode(score, forKey: "score")
        try values.encode(followingURL, forKey: "following_url")
        try values.encode(gistsURL, forKey: "gists_url")
        try values.encode(starredURL, forKey: "starred_url")
        try values.encode(eventsURL, forKey: "events_url")
        try values.encodeIfPresent(publicRepos, forKey: "public_repos")
        try values.encodeIfPresent(publicGists, forKey: "public_gists")
        try values.encodeIfPresent(followers, forKey: "followers")
        try values.encodeIfPresent(following, forKey: "following")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(updatedAt, forKey: "updated_at")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(bio, forKey: "bio")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encodeIfPresent(location, forKey: "location")
        try values.encode(isSiteAdmin, forKey: "site_admin")
        try values.encodeIfPresent(isHireable, forKey: "hireable")
        try values.encodeIfPresent(textMatches, forKey: "text_matches")
        try values.encodeIfPresent(blog, forKey: "blog")
        try values.encodeIfPresent(company, forKey: "company")
        try values.encodeIfPresent(suspendedAt, forKey: "suspended_at")
    }
}
