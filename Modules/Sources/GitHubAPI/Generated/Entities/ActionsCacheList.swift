// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Repository actions caches
public struct ActionsCacheList: Codable {
    /// Total number of caches
    public var totalCount: Int
    /// Array of caches
    public var actionsCaches: [ActionsCach]

    public struct ActionsCach: Codable, Identifiable {
        public var id: Int?
        /// Example: "refs/heads/main"
        public var ref: String?
        /// Example: "Linux-node-958aff96db2d75d67787d1e634ae70b659de937b"
        public var key: String?
        /// Example: "73885106f58cc52a7df9ec4d4a5622a5614813162cb516c759a30af6bf56e6f0"
        public var version: String?
        /// Example: "2019-01-24T22:45:36.000Z"
        public var lastAccessedAt: Date?
        /// Example: "2019-01-24T22:45:36.000Z"
        public var createdAt: Date?
        /// Example: 1024
        public var sizeInBytes: Int?

        public init(id: Int? = nil, ref: String? = nil, key: String? = nil, version: String? = nil, lastAccessedAt: Date? = nil, createdAt: Date? = nil, sizeInBytes: Int? = nil) {
            self.id = id
            self.ref = ref
            self.key = key
            self.version = version
            self.lastAccessedAt = lastAccessedAt
            self.createdAt = createdAt
            self.sizeInBytes = sizeInBytes
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(Int.self, forKey: "id")
            self.ref = try values.decodeIfPresent(String.self, forKey: "ref")
            self.key = try values.decodeIfPresent(String.self, forKey: "key")
            self.version = try values.decodeIfPresent(String.self, forKey: "version")
            self.lastAccessedAt = try values.decodeIfPresent(Date.self, forKey: "last_accessed_at")
            self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
            self.sizeInBytes = try values.decodeIfPresent(Int.self, forKey: "size_in_bytes")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(ref, forKey: "ref")
            try values.encodeIfPresent(key, forKey: "key")
            try values.encodeIfPresent(version, forKey: "version")
            try values.encodeIfPresent(lastAccessedAt, forKey: "last_accessed_at")
            try values.encodeIfPresent(createdAt, forKey: "created_at")
            try values.encodeIfPresent(sizeInBytes, forKey: "size_in_bytes")
        }
    }

    public init(totalCount: Int, actionsCaches: [ActionsCach]) {
        self.totalCount = totalCount
        self.actionsCaches = actionsCaches
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.totalCount = try values.decode(Int.self, forKey: "total_count")
        self.actionsCaches = try values.decode([ActionsCach].self, forKey: "actions_caches")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(totalCount, forKey: "total_count")
        try values.encode(actionsCaches, forKey: "actions_caches")
    }
}
