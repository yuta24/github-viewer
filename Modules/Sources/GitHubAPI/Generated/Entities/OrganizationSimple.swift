// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct OrganizationSimple: Codable, Identifiable {
    /// Example: "github"
    public var login: String
    public var id: Int
    /// Example: "MDEyOk9yZ2FuaXphdGlvbjE="
    public var nodeID: String
    /// Example: "https://api.github.com/orgs/github"
    public var url: URL
    /// Example: "https://api.github.com/orgs/github/repos"
    public var reposURL: URL
    /// Example: "https://api.github.com/orgs/github/events"
    public var eventsURL: URL
    /// Example: "https://api.github.com/orgs/github/hooks"
    public var hooksURL: String
    /// Example: "https://api.github.com/orgs/github/issues"
    public var issuesURL: String
    /// Example: "https://api.github.com/orgs/github/members{/member}"
    public var membersURL: String
    /// Example: "https://api.github.com/orgs/github/public_members{/member}"
    public var publicMembersURL: String
    /// Example: "https://github.com/images/error/octocat_happy.gif"
    public var avatarURL: String
    /// Example: "A great organization"
    public var description: String?

    public init(login: String, id: Int, nodeID: String, url: URL, reposURL: URL, eventsURL: URL, hooksURL: String, issuesURL: String, membersURL: String, publicMembersURL: String, avatarURL: String, description: String? = nil) {
        self.login = login
        self.id = id
        self.nodeID = nodeID
        self.url = url
        self.reposURL = reposURL
        self.eventsURL = eventsURL
        self.hooksURL = hooksURL
        self.issuesURL = issuesURL
        self.membersURL = membersURL
        self.publicMembersURL = publicMembersURL
        self.avatarURL = avatarURL
        self.description = description
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.login = try values.decode(String.self, forKey: "login")
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.url = try values.decode(URL.self, forKey: "url")
        self.reposURL = try values.decode(URL.self, forKey: "repos_url")
        self.eventsURL = try values.decode(URL.self, forKey: "events_url")
        self.hooksURL = try values.decode(String.self, forKey: "hooks_url")
        self.issuesURL = try values.decode(String.self, forKey: "issues_url")
        self.membersURL = try values.decode(String.self, forKey: "members_url")
        self.publicMembersURL = try values.decode(String.self, forKey: "public_members_url")
        self.avatarURL = try values.decode(String.self, forKey: "avatar_url")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(login, forKey: "login")
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(url, forKey: "url")
        try values.encode(reposURL, forKey: "repos_url")
        try values.encode(eventsURL, forKey: "events_url")
        try values.encode(hooksURL, forKey: "hooks_url")
        try values.encode(issuesURL, forKey: "issues_url")
        try values.encode(membersURL, forKey: "members_url")
        try values.encode(publicMembersURL, forKey: "public_members_url")
        try values.encode(avatarURL, forKey: "avatar_url")
        try values.encodeIfPresent(description, forKey: "description")
    }
}
