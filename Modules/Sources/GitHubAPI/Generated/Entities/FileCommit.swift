// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct FileCommit: Codable {
    public var content: Content?
    public var commit: Commit

    public struct Content: Codable {
        public var name: String?
        public var path: String?
        public var sha: String?
        public var size: Int?
        public var url: String?
        public var htmlURL: String?
        public var gitURL: String?
        public var downloadURL: String?
        public var type: String?
        public var links: Links?

        public struct Links: Codable {
            public var this: String?
            public var git: String?
            public var html: String?

            public init(this: String? = nil, git: String? = nil, html: String? = nil) {
                self.this = this
                self.git = git
                self.html = html
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.this = try values.decodeIfPresent(String.self, forKey: "self")
                self.git = try values.decodeIfPresent(String.self, forKey: "git")
                self.html = try values.decodeIfPresent(String.self, forKey: "html")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(this, forKey: "self")
                try values.encodeIfPresent(git, forKey: "git")
                try values.encodeIfPresent(html, forKey: "html")
            }
        }

        public init(name: String? = nil, path: String? = nil, sha: String? = nil, size: Int? = nil, url: String? = nil, htmlURL: String? = nil, gitURL: String? = nil, downloadURL: String? = nil, type: String? = nil, links: Links? = nil) {
            self.name = name
            self.path = path
            self.sha = sha
            self.size = size
            self.url = url
            self.htmlURL = htmlURL
            self.gitURL = gitURL
            self.downloadURL = downloadURL
            self.type = type
            self.links = links
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.name = try values.decodeIfPresent(String.self, forKey: "name")
            self.path = try values.decodeIfPresent(String.self, forKey: "path")
            self.sha = try values.decodeIfPresent(String.self, forKey: "sha")
            self.size = try values.decodeIfPresent(Int.self, forKey: "size")
            self.url = try values.decodeIfPresent(String.self, forKey: "url")
            self.htmlURL = try values.decodeIfPresent(String.self, forKey: "html_url")
            self.gitURL = try values.decodeIfPresent(String.self, forKey: "git_url")
            self.downloadURL = try values.decodeIfPresent(String.self, forKey: "download_url")
            self.type = try values.decodeIfPresent(String.self, forKey: "type")
            self.links = try values.decodeIfPresent(Links.self, forKey: "_links")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(name, forKey: "name")
            try values.encodeIfPresent(path, forKey: "path")
            try values.encodeIfPresent(sha, forKey: "sha")
            try values.encodeIfPresent(size, forKey: "size")
            try values.encodeIfPresent(url, forKey: "url")
            try values.encodeIfPresent(htmlURL, forKey: "html_url")
            try values.encodeIfPresent(gitURL, forKey: "git_url")
            try values.encodeIfPresent(downloadURL, forKey: "download_url")
            try values.encodeIfPresent(type, forKey: "type")
            try values.encodeIfPresent(links, forKey: "_links")
        }
    }

    public struct Commit: Codable {
        public var sha: String?
        public var nodeID: String?
        public var url: String?
        public var htmlURL: String?
        public var author: Author?
        public var committer: Committer?
        public var message: String?
        public var tree: Tree?
        public var parents: [Parent]?
        public var verification: Verification?

        public struct Author: Codable {
            public var date: String?
            public var name: String?
            public var email: String?

            public init(date: String? = nil, name: String? = nil, email: String? = nil) {
                self.date = date
                self.name = name
                self.email = email
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.date = try values.decodeIfPresent(String.self, forKey: "date")
                self.name = try values.decodeIfPresent(String.self, forKey: "name")
                self.email = try values.decodeIfPresent(String.self, forKey: "email")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(date, forKey: "date")
                try values.encodeIfPresent(name, forKey: "name")
                try values.encodeIfPresent(email, forKey: "email")
            }
        }

        public struct Committer: Codable {
            public var date: String?
            public var name: String?
            public var email: String?

            public init(date: String? = nil, name: String? = nil, email: String? = nil) {
                self.date = date
                self.name = name
                self.email = email
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.date = try values.decodeIfPresent(String.self, forKey: "date")
                self.name = try values.decodeIfPresent(String.self, forKey: "name")
                self.email = try values.decodeIfPresent(String.self, forKey: "email")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(date, forKey: "date")
                try values.encodeIfPresent(name, forKey: "name")
                try values.encodeIfPresent(email, forKey: "email")
            }
        }

        public struct Tree: Codable {
            public var url: String?
            public var sha: String?

            public init(url: String? = nil, sha: String? = nil) {
                self.url = url
                self.sha = sha
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.url = try values.decodeIfPresent(String.self, forKey: "url")
                self.sha = try values.decodeIfPresent(String.self, forKey: "sha")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(url, forKey: "url")
                try values.encodeIfPresent(sha, forKey: "sha")
            }
        }

        public struct Parent: Codable {
            public var url: String?
            public var htmlURL: String?
            public var sha: String?

            public init(url: String? = nil, htmlURL: String? = nil, sha: String? = nil) {
                self.url = url
                self.htmlURL = htmlURL
                self.sha = sha
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.url = try values.decodeIfPresent(String.self, forKey: "url")
                self.htmlURL = try values.decodeIfPresent(String.self, forKey: "html_url")
                self.sha = try values.decodeIfPresent(String.self, forKey: "sha")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(url, forKey: "url")
                try values.encodeIfPresent(htmlURL, forKey: "html_url")
                try values.encodeIfPresent(sha, forKey: "sha")
            }
        }

        public struct Verification: Codable {
            public var isVerified: Bool?
            public var reason: String?
            public var signature: String?
            public var payload: String?

            public init(isVerified: Bool? = nil, reason: String? = nil, signature: String? = nil, payload: String? = nil) {
                self.isVerified = isVerified
                self.reason = reason
                self.signature = signature
                self.payload = payload
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.isVerified = try values.decodeIfPresent(Bool.self, forKey: "verified")
                self.reason = try values.decodeIfPresent(String.self, forKey: "reason")
                self.signature = try values.decodeIfPresent(String.self, forKey: "signature")
                self.payload = try values.decodeIfPresent(String.self, forKey: "payload")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(isVerified, forKey: "verified")
                try values.encodeIfPresent(reason, forKey: "reason")
                try values.encodeIfPresent(signature, forKey: "signature")
                try values.encodeIfPresent(payload, forKey: "payload")
            }
        }

        public init(sha: String? = nil, nodeID: String? = nil, url: String? = nil, htmlURL: String? = nil, author: Author? = nil, committer: Committer? = nil, message: String? = nil, tree: Tree? = nil, parents: [Parent]? = nil, verification: Verification? = nil) {
            self.sha = sha
            self.nodeID = nodeID
            self.url = url
            self.htmlURL = htmlURL
            self.author = author
            self.committer = committer
            self.message = message
            self.tree = tree
            self.parents = parents
            self.verification = verification
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.sha = try values.decodeIfPresent(String.self, forKey: "sha")
            self.nodeID = try values.decodeIfPresent(String.self, forKey: "node_id")
            self.url = try values.decodeIfPresent(String.self, forKey: "url")
            self.htmlURL = try values.decodeIfPresent(String.self, forKey: "html_url")
            self.author = try values.decodeIfPresent(Author.self, forKey: "author")
            self.committer = try values.decodeIfPresent(Committer.self, forKey: "committer")
            self.message = try values.decodeIfPresent(String.self, forKey: "message")
            self.tree = try values.decodeIfPresent(Tree.self, forKey: "tree")
            self.parents = try values.decodeIfPresent([Parent].self, forKey: "parents")
            self.verification = try values.decodeIfPresent(Verification.self, forKey: "verification")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(sha, forKey: "sha")
            try values.encodeIfPresent(nodeID, forKey: "node_id")
            try values.encodeIfPresent(url, forKey: "url")
            try values.encodeIfPresent(htmlURL, forKey: "html_url")
            try values.encodeIfPresent(author, forKey: "author")
            try values.encodeIfPresent(committer, forKey: "committer")
            try values.encodeIfPresent(message, forKey: "message")
            try values.encodeIfPresent(tree, forKey: "tree")
            try values.encodeIfPresent(parents, forKey: "parents")
            try values.encodeIfPresent(verification, forKey: "verification")
        }
    }

    public init(content: Content? = nil, commit: Commit) {
        self.content = content
        self.commit = commit
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.content = try values.decodeIfPresent(Content.self, forKey: "content")
        self.commit = try values.decode(Commit.self, forKey: "commit")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(content, forKey: "content")
        try values.encode(commit, forKey: "commit")
    }
}
