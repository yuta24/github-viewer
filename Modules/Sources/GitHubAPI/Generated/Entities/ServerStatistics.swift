// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ServerStatistic: Codable {
    public var serverID: String?
    public var collectionDate: String?
    public var schemaVersion: String?
    public var ghesVersion: String?
    public var hostName: String?
    public var githubConnect: GithubConnect?
    public var gheStats: GheStats?
    public var dormantUsers: DormantUsers?

    public struct GithubConnect: Codable {
        public var featuresEnabled: [String]?

        public init(featuresEnabled: [String]? = nil) {
            self.featuresEnabled = featuresEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.featuresEnabled = try values.decodeIfPresent([String].self, forKey: "features_enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(featuresEnabled, forKey: "features_enabled")
        }
    }

    public struct GheStats: Codable {
        public var comments: Comments?
        public var gists: Gists?
        public var hooks: Hooks?
        public var issues: Issues?
        public var milestones: Milestones?
        public var orgs: Orgs?
        public var pages: Pages?
        public var pulls: Pulls?
        public var repos: Repos?
        public var users: Users?

        public struct Comments: Codable {
            public var totalCommitComments: Int?
            public var totalGistComments: Int?
            public var totalIssueComments: Int?
            public var totalPullRequestComments: Int?

            public init(totalCommitComments: Int? = nil, totalGistComments: Int? = nil, totalIssueComments: Int? = nil, totalPullRequestComments: Int? = nil) {
                self.totalCommitComments = totalCommitComments
                self.totalGistComments = totalGistComments
                self.totalIssueComments = totalIssueComments
                self.totalPullRequestComments = totalPullRequestComments
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalCommitComments = try values.decodeIfPresent(Int.self, forKey: "total_commit_comments")
                self.totalGistComments = try values.decodeIfPresent(Int.self, forKey: "total_gist_comments")
                self.totalIssueComments = try values.decodeIfPresent(Int.self, forKey: "total_issue_comments")
                self.totalPullRequestComments = try values.decodeIfPresent(Int.self, forKey: "total_pull_request_comments")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(totalCommitComments, forKey: "total_commit_comments")
                try values.encodeIfPresent(totalGistComments, forKey: "total_gist_comments")
                try values.encodeIfPresent(totalIssueComments, forKey: "total_issue_comments")
                try values.encodeIfPresent(totalPullRequestComments, forKey: "total_pull_request_comments")
            }
        }

        public struct Gists: Codable {
            public var totalGists: Int?
            public var privateGists: Int?
            public var publicGists: Int?

            public init(totalGists: Int? = nil, privateGists: Int? = nil, publicGists: Int? = nil) {
                self.totalGists = totalGists
                self.privateGists = privateGists
                self.publicGists = publicGists
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalGists = try values.decodeIfPresent(Int.self, forKey: "total_gists")
                self.privateGists = try values.decodeIfPresent(Int.self, forKey: "private_gists")
                self.publicGists = try values.decodeIfPresent(Int.self, forKey: "public_gists")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(totalGists, forKey: "total_gists")
                try values.encodeIfPresent(privateGists, forKey: "private_gists")
                try values.encodeIfPresent(publicGists, forKey: "public_gists")
            }
        }

        public struct Hooks: Codable {
            public var totalHooks: Int?
            public var activeHooks: Int?
            public var inactiveHooks: Int?

            public init(totalHooks: Int? = nil, activeHooks: Int? = nil, inactiveHooks: Int? = nil) {
                self.totalHooks = totalHooks
                self.activeHooks = activeHooks
                self.inactiveHooks = inactiveHooks
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalHooks = try values.decodeIfPresent(Int.self, forKey: "total_hooks")
                self.activeHooks = try values.decodeIfPresent(Int.self, forKey: "active_hooks")
                self.inactiveHooks = try values.decodeIfPresent(Int.self, forKey: "inactive_hooks")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(totalHooks, forKey: "total_hooks")
                try values.encodeIfPresent(activeHooks, forKey: "active_hooks")
                try values.encodeIfPresent(inactiveHooks, forKey: "inactive_hooks")
            }
        }

        public struct Issues: Codable {
            public var totalIssues: Int?
            public var openIssues: Int?
            public var closedIssues: Int?

            public init(totalIssues: Int? = nil, openIssues: Int? = nil, closedIssues: Int? = nil) {
                self.totalIssues = totalIssues
                self.openIssues = openIssues
                self.closedIssues = closedIssues
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalIssues = try values.decodeIfPresent(Int.self, forKey: "total_issues")
                self.openIssues = try values.decodeIfPresent(Int.self, forKey: "open_issues")
                self.closedIssues = try values.decodeIfPresent(Int.self, forKey: "closed_issues")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(totalIssues, forKey: "total_issues")
                try values.encodeIfPresent(openIssues, forKey: "open_issues")
                try values.encodeIfPresent(closedIssues, forKey: "closed_issues")
            }
        }

        public struct Milestones: Codable {
            public var totalMilestones: Int?
            public var openMilestones: Int?
            public var closedMilestones: Int?

            public init(totalMilestones: Int? = nil, openMilestones: Int? = nil, closedMilestones: Int? = nil) {
                self.totalMilestones = totalMilestones
                self.openMilestones = openMilestones
                self.closedMilestones = closedMilestones
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalMilestones = try values.decodeIfPresent(Int.self, forKey: "total_milestones")
                self.openMilestones = try values.decodeIfPresent(Int.self, forKey: "open_milestones")
                self.closedMilestones = try values.decodeIfPresent(Int.self, forKey: "closed_milestones")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(totalMilestones, forKey: "total_milestones")
                try values.encodeIfPresent(openMilestones, forKey: "open_milestones")
                try values.encodeIfPresent(closedMilestones, forKey: "closed_milestones")
            }
        }

        public struct Orgs: Codable {
            public var totalOrgs: Int?
            public var disabledOrgs: Int?
            public var totalTeams: Int?
            public var totalTeamMembers: Int?

            public init(totalOrgs: Int? = nil, disabledOrgs: Int? = nil, totalTeams: Int? = nil, totalTeamMembers: Int? = nil) {
                self.totalOrgs = totalOrgs
                self.disabledOrgs = disabledOrgs
                self.totalTeams = totalTeams
                self.totalTeamMembers = totalTeamMembers
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalOrgs = try values.decodeIfPresent(Int.self, forKey: "total_orgs")
                self.disabledOrgs = try values.decodeIfPresent(Int.self, forKey: "disabled_orgs")
                self.totalTeams = try values.decodeIfPresent(Int.self, forKey: "total_teams")
                self.totalTeamMembers = try values.decodeIfPresent(Int.self, forKey: "total_team_members")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(totalOrgs, forKey: "total_orgs")
                try values.encodeIfPresent(disabledOrgs, forKey: "disabled_orgs")
                try values.encodeIfPresent(totalTeams, forKey: "total_teams")
                try values.encodeIfPresent(totalTeamMembers, forKey: "total_team_members")
            }
        }

        public struct Pages: Codable {
            public var totalPages: Int?

            public init(totalPages: Int? = nil) {
                self.totalPages = totalPages
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalPages = try values.decodeIfPresent(Int.self, forKey: "total_pages")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(totalPages, forKey: "total_pages")
            }
        }

        public struct Pulls: Codable {
            public var totalPulls: Int?
            public var mergedPulls: Int?
            public var mergeablePulls: Int?
            public var unmergeablePulls: Int?

            public init(totalPulls: Int? = nil, mergedPulls: Int? = nil, mergeablePulls: Int? = nil, unmergeablePulls: Int? = nil) {
                self.totalPulls = totalPulls
                self.mergedPulls = mergedPulls
                self.mergeablePulls = mergeablePulls
                self.unmergeablePulls = unmergeablePulls
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalPulls = try values.decodeIfPresent(Int.self, forKey: "total_pulls")
                self.mergedPulls = try values.decodeIfPresent(Int.self, forKey: "merged_pulls")
                self.mergeablePulls = try values.decodeIfPresent(Int.self, forKey: "mergeable_pulls")
                self.unmergeablePulls = try values.decodeIfPresent(Int.self, forKey: "unmergeable_pulls")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(totalPulls, forKey: "total_pulls")
                try values.encodeIfPresent(mergedPulls, forKey: "merged_pulls")
                try values.encodeIfPresent(mergeablePulls, forKey: "mergeable_pulls")
                try values.encodeIfPresent(unmergeablePulls, forKey: "unmergeable_pulls")
            }
        }

        public struct Repos: Codable {
            public var totalRepos: Int?
            public var rootRepos: Int?
            public var forkRepos: Int?
            public var orgRepos: Int?
            public var totalPushes: Int?
            public var totalWikis: Int?

            public init(totalRepos: Int? = nil, rootRepos: Int? = nil, forkRepos: Int? = nil, orgRepos: Int? = nil, totalPushes: Int? = nil, totalWikis: Int? = nil) {
                self.totalRepos = totalRepos
                self.rootRepos = rootRepos
                self.forkRepos = forkRepos
                self.orgRepos = orgRepos
                self.totalPushes = totalPushes
                self.totalWikis = totalWikis
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalRepos = try values.decodeIfPresent(Int.self, forKey: "total_repos")
                self.rootRepos = try values.decodeIfPresent(Int.self, forKey: "root_repos")
                self.forkRepos = try values.decodeIfPresent(Int.self, forKey: "fork_repos")
                self.orgRepos = try values.decodeIfPresent(Int.self, forKey: "org_repos")
                self.totalPushes = try values.decodeIfPresent(Int.self, forKey: "total_pushes")
                self.totalWikis = try values.decodeIfPresent(Int.self, forKey: "total_wikis")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(totalRepos, forKey: "total_repos")
                try values.encodeIfPresent(rootRepos, forKey: "root_repos")
                try values.encodeIfPresent(forkRepos, forKey: "fork_repos")
                try values.encodeIfPresent(orgRepos, forKey: "org_repos")
                try values.encodeIfPresent(totalPushes, forKey: "total_pushes")
                try values.encodeIfPresent(totalWikis, forKey: "total_wikis")
            }
        }

        public struct Users: Codable {
            public var totalUsers: Int?
            public var adminUsers: Int?
            public var suspendedUsers: Int?

            public init(totalUsers: Int? = nil, adminUsers: Int? = nil, suspendedUsers: Int? = nil) {
                self.totalUsers = totalUsers
                self.adminUsers = adminUsers
                self.suspendedUsers = suspendedUsers
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalUsers = try values.decodeIfPresent(Int.self, forKey: "total_users")
                self.adminUsers = try values.decodeIfPresent(Int.self, forKey: "admin_users")
                self.suspendedUsers = try values.decodeIfPresent(Int.self, forKey: "suspended_users")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(totalUsers, forKey: "total_users")
                try values.encodeIfPresent(adminUsers, forKey: "admin_users")
                try values.encodeIfPresent(suspendedUsers, forKey: "suspended_users")
            }
        }

        public init(comments: Comments? = nil, gists: Gists? = nil, hooks: Hooks? = nil, issues: Issues? = nil, milestones: Milestones? = nil, orgs: Orgs? = nil, pages: Pages? = nil, pulls: Pulls? = nil, repos: Repos? = nil, users: Users? = nil) {
            self.comments = comments
            self.gists = gists
            self.hooks = hooks
            self.issues = issues
            self.milestones = milestones
            self.orgs = orgs
            self.pages = pages
            self.pulls = pulls
            self.repos = repos
            self.users = users
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.comments = try values.decodeIfPresent(Comments.self, forKey: "comments")
            self.gists = try values.decodeIfPresent(Gists.self, forKey: "gists")
            self.hooks = try values.decodeIfPresent(Hooks.self, forKey: "hooks")
            self.issues = try values.decodeIfPresent(Issues.self, forKey: "issues")
            self.milestones = try values.decodeIfPresent(Milestones.self, forKey: "milestones")
            self.orgs = try values.decodeIfPresent(Orgs.self, forKey: "orgs")
            self.pages = try values.decodeIfPresent(Pages.self, forKey: "pages")
            self.pulls = try values.decodeIfPresent(Pulls.self, forKey: "pulls")
            self.repos = try values.decodeIfPresent(Repos.self, forKey: "repos")
            self.users = try values.decodeIfPresent(Users.self, forKey: "users")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(comments, forKey: "comments")
            try values.encodeIfPresent(gists, forKey: "gists")
            try values.encodeIfPresent(hooks, forKey: "hooks")
            try values.encodeIfPresent(issues, forKey: "issues")
            try values.encodeIfPresent(milestones, forKey: "milestones")
            try values.encodeIfPresent(orgs, forKey: "orgs")
            try values.encodeIfPresent(pages, forKey: "pages")
            try values.encodeIfPresent(pulls, forKey: "pulls")
            try values.encodeIfPresent(repos, forKey: "repos")
            try values.encodeIfPresent(users, forKey: "users")
        }
    }

    public struct DormantUsers: Codable {
        public var totalDormantUsers: Int?
        public var dormancyThreshold: String?

        public init(totalDormantUsers: Int? = nil, dormancyThreshold: String? = nil) {
            self.totalDormantUsers = totalDormantUsers
            self.dormancyThreshold = dormancyThreshold
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.totalDormantUsers = try values.decodeIfPresent(Int.self, forKey: "total_dormant_users")
            self.dormancyThreshold = try values.decodeIfPresent(String.self, forKey: "dormancy_threshold")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(totalDormantUsers, forKey: "total_dormant_users")
            try values.encodeIfPresent(dormancyThreshold, forKey: "dormancy_threshold")
        }
    }

    public init(serverID: String? = nil, collectionDate: String? = nil, schemaVersion: String? = nil, ghesVersion: String? = nil, hostName: String? = nil, githubConnect: GithubConnect? = nil, gheStats: GheStats? = nil, dormantUsers: DormantUsers? = nil) {
        self.serverID = serverID
        self.collectionDate = collectionDate
        self.schemaVersion = schemaVersion
        self.ghesVersion = ghesVersion
        self.hostName = hostName
        self.githubConnect = githubConnect
        self.gheStats = gheStats
        self.dormantUsers = dormantUsers
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.serverID = try values.decodeIfPresent(String.self, forKey: "server_id")
        self.collectionDate = try values.decodeIfPresent(String.self, forKey: "collection_date")
        self.schemaVersion = try values.decodeIfPresent(String.self, forKey: "schema_version")
        self.ghesVersion = try values.decodeIfPresent(String.self, forKey: "ghes_version")
        self.hostName = try values.decodeIfPresent(String.self, forKey: "host_name")
        self.githubConnect = try values.decodeIfPresent(GithubConnect.self, forKey: "github_connect")
        self.gheStats = try values.decodeIfPresent(GheStats.self, forKey: "ghe_stats")
        self.dormantUsers = try values.decodeIfPresent(DormantUsers.self, forKey: "dormant_users")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(serverID, forKey: "server_id")
        try values.encodeIfPresent(collectionDate, forKey: "collection_date")
        try values.encodeIfPresent(schemaVersion, forKey: "schema_version")
        try values.encodeIfPresent(ghesVersion, forKey: "ghes_version")
        try values.encodeIfPresent(hostName, forKey: "host_name")
        try values.encodeIfPresent(githubConnect, forKey: "github_connect")
        try values.encodeIfPresent(gheStats, forKey: "ghe_stats")
        try values.encodeIfPresent(dormantUsers, forKey: "dormant_users")
    }
}
