// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
public struct PullRequest: Codable, Identifiable {
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
    public var url: URL
    public var id: Int
    /// Example: "MDExOlB1bGxSZXF1ZXN0MQ=="
    public var nodeID: String
    /// Example: "https://github.com/octocat/Hello-World/pull/1347"
    public var htmlURL: URL
    /// Example: "https://github.com/octocat/Hello-World/pull/1347.diff"
    public var diffURL: URL
    /// Example: "https://github.com/octocat/Hello-World/pull/1347.patch"
    public var patchURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/issues/1347"
    public var issueURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
    public var commitsURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
    public var reviewCommentsURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
    public var reviewCommentURL: String
    /// Example: "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
    public var commentsURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
    public var statusesURL: URL
    /// Number uniquely identifying the pull request within its repository.
    ///
    /// Example: 42
    public var number: Int
    /// State of this Pull Request. Either `open` or `closed`.
    ///
    /// Example: "open"
    public var state: State
    /// Example: true
    public var isLocked: Bool
    /// The title of the pull request.
    ///
    /// Example: "Amazing new feature"
    public var title: String
    /// Simple User
    public var user: NullableSimpleUser?
    /// Example: "Please pull these awesome changes"
    public var body: String?
    public var labels: [Label]
    /// A collection of related issues and pull requests.
    public var milestone: NullableMilestone?
    /// Example: "too heated"
    public var activeLockReason: String?
    /// Example: "2011-01-26T19:01:12Z"
    public var createdAt: Date
    /// Example: "2011-01-26T19:01:12Z"
    public var updatedAt: Date
    /// Example: "2011-01-26T19:01:12Z"
    public var closedAt: Date?
    /// Example: "2011-01-26T19:01:12Z"
    public var mergedAt: Date?
    /// Example: "e5bd3914e2e596debea16f433f57875b5b90bcd6"
    public var mergeCommitSha: String?
    /// Simple User
    public var assignee: NullableSimpleUser?
    public var assignees: [SimpleUser]?
    public var requestedReviewers: [SimpleUser]?
    public var requestedTeams: [TeamSimple]?
    public var head: Head
    public var base: Base
    public var links: Links
    /// Author_association
    ///
    /// How the author is associated with the repository.
    ///
    /// Example: "OWNER"
    public var authorAssociation: AuthorAssociation
    /// The status of auto merging a pull request.
    public var autoMerge: AutoMerge?
    /// Indicates whether or not the pull request is a draft.
    ///
    /// Example: false
    public var isDraft: Bool?
    public var isMerged: Bool
    /// Example: true
    public var isMergeable: Bool?
    /// Example: true
    public var isRebaseable: Bool?
    /// Example: "clean"
    public var mergeableState: String
    /// Simple User
    public var mergedBy: NullableSimpleUser?
    /// Example: 10
    public var comments: Int
    public var reviewComments: Int
    /// Indicates whether maintainers can modify the pull request.
    ///
    /// Example: true
    public var maintainerCanModify: Bool
    public var commits: Int
    /// Example: 100
    public var additions: Int
    public var deletions: Int
    public var changedFiles: Int

    /// State of this Pull Request. Either `open` or `closed`.
    ///
    /// Example: "open"
    public enum State: String, Codable, CaseIterable {
        case `open`
        case closed
    }

    public struct Label: Codable, Identifiable {
        public var id: Int64
        public var nodeID: String
        public var url: String
        public var name: String
        public var description: String?
        public var color: String
        public var isDefault: Bool

        public init(id: Int64, nodeID: String, url: String, name: String, description: String? = nil, color: String, isDefault: Bool) {
            self.id = id
            self.nodeID = nodeID
            self.url = url
            self.name = name
            self.description = description
            self.color = color
            self.isDefault = isDefault
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decode(Int64.self, forKey: "id")
            self.nodeID = try values.decode(String.self, forKey: "node_id")
            self.url = try values.decode(String.self, forKey: "url")
            self.name = try values.decode(String.self, forKey: "name")
            self.description = try values.decodeIfPresent(String.self, forKey: "description")
            self.color = try values.decode(String.self, forKey: "color")
            self.isDefault = try values.decode(Bool.self, forKey: "default")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(id, forKey: "id")
            try values.encode(nodeID, forKey: "node_id")
            try values.encode(url, forKey: "url")
            try values.encode(name, forKey: "name")
            try values.encodeIfPresent(description, forKey: "description")
            try values.encode(color, forKey: "color")
            try values.encode(isDefault, forKey: "default")
        }
    }

    public struct Head: Codable {
        public var label: String
        public var ref: String
        public var repo: Repo?
        public var sha: String
        public var user: User

        public struct Repo: Codable, Identifiable {
            public var archiveURL: String
            public var assigneesURL: String
            public var blobsURL: String
            public var branchesURL: String
            public var collaboratorsURL: String
            public var commentsURL: String
            public var commitsURL: String
            public var compareURL: String
            public var contentsURL: String
            public var contributorsURL: URL
            public var deploymentsURL: URL
            public var description: String?
            public var downloadsURL: URL
            public var eventsURL: URL
            public var isFork: Bool
            public var forksURL: URL
            public var fullName: String
            public var gitCommitsURL: String
            public var gitRefsURL: String
            public var gitTagsURL: String
            public var hooksURL: URL
            public var htmlURL: URL
            public var id: Int
            public var nodeID: String
            public var issueCommentURL: String
            public var issueEventsURL: String
            public var issuesURL: String
            public var keysURL: String
            public var labelsURL: String
            public var languagesURL: URL
            public var mergesURL: URL
            public var milestonesURL: String
            public var name: String
            public var notificationsURL: String
            public var owner: Owner
            public var isPrivate: Bool
            public var pullsURL: String
            public var releasesURL: String
            public var stargazersURL: URL
            public var statusesURL: String
            public var subscribersURL: URL
            public var subscriptionURL: URL
            public var tagsURL: URL
            public var teamsURL: URL
            public var treesURL: String
            public var url: URL
            public var cloneURL: String
            public var defaultBranch: String
            public var forks: Int
            public var forksCount: Int
            public var gitURL: String
            public var hasDownloads: Bool
            public var hasIssues: Bool
            public var hasProjects: Bool
            public var hasWiki: Bool
            public var hasPages: Bool
            public var homepage: URL?
            public var language: String?
            public var masterBranch: String?
            public var isArchived: Bool
            public var isDisabled: Bool
            /// The repository visibility: public, private, or internal.
            public var visibility: String?
            public var mirrorURL: URL?
            public var openIssues: Int
            public var openIssuesCount: Int
            public var permissions: Permissions?
            public var tempCloneToken: String?
            public var allowMergeCommit: Bool?
            public var allowSquashMerge: Bool?
            public var allowRebaseMerge: Bool?
            public var license: License?
            public var pushedAt: Date
            public var size: Int
            public var sshURL: String
            public var stargazersCount: Int
            public var svnURL: URL
            public var topics: [String]?
            public var watchers: Int
            public var watchersCount: Int
            public var createdAt: Date
            public var updatedAt: Date
            public var allowForking: Bool?
            public var isTemplate: Bool?
            public var isWebCommitSignoffRequired: Bool?

            public struct Owner: Codable, Identifiable {
                public var avatarURL: URL
                public var eventsURL: String
                public var followersURL: URL
                public var followingURL: String
                public var gistsURL: String
                public var gravatarID: String?
                public var htmlURL: URL
                public var id: Int
                public var nodeID: String
                public var login: String
                public var organizationsURL: URL
                public var receivedEventsURL: URL
                public var reposURL: URL
                public var isSiteAdmin: Bool
                public var starredURL: String
                public var subscriptionsURL: URL
                public var type: String
                public var url: URL

                public init(avatarURL: URL, eventsURL: String, followersURL: URL, followingURL: String, gistsURL: String, gravatarID: String? = nil, htmlURL: URL, id: Int, nodeID: String, login: String, organizationsURL: URL, receivedEventsURL: URL, reposURL: URL, isSiteAdmin: Bool, starredURL: String, subscriptionsURL: URL, type: String, url: URL) {
                    self.avatarURL = avatarURL
                    self.eventsURL = eventsURL
                    self.followersURL = followersURL
                    self.followingURL = followingURL
                    self.gistsURL = gistsURL
                    self.gravatarID = gravatarID
                    self.htmlURL = htmlURL
                    self.id = id
                    self.nodeID = nodeID
                    self.login = login
                    self.organizationsURL = organizationsURL
                    self.receivedEventsURL = receivedEventsURL
                    self.reposURL = reposURL
                    self.isSiteAdmin = isSiteAdmin
                    self.starredURL = starredURL
                    self.subscriptionsURL = subscriptionsURL
                    self.type = type
                    self.url = url
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.avatarURL = try values.decode(URL.self, forKey: "avatar_url")
                    self.eventsURL = try values.decode(String.self, forKey: "events_url")
                    self.followersURL = try values.decode(URL.self, forKey: "followers_url")
                    self.followingURL = try values.decode(String.self, forKey: "following_url")
                    self.gistsURL = try values.decode(String.self, forKey: "gists_url")
                    self.gravatarID = try values.decodeIfPresent(String.self, forKey: "gravatar_id")
                    self.htmlURL = try values.decode(URL.self, forKey: "html_url")
                    self.id = try values.decode(Int.self, forKey: "id")
                    self.nodeID = try values.decode(String.self, forKey: "node_id")
                    self.login = try values.decode(String.self, forKey: "login")
                    self.organizationsURL = try values.decode(URL.self, forKey: "organizations_url")
                    self.receivedEventsURL = try values.decode(URL.self, forKey: "received_events_url")
                    self.reposURL = try values.decode(URL.self, forKey: "repos_url")
                    self.isSiteAdmin = try values.decode(Bool.self, forKey: "site_admin")
                    self.starredURL = try values.decode(String.self, forKey: "starred_url")
                    self.subscriptionsURL = try values.decode(URL.self, forKey: "subscriptions_url")
                    self.type = try values.decode(String.self, forKey: "type")
                    self.url = try values.decode(URL.self, forKey: "url")
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(avatarURL, forKey: "avatar_url")
                    try values.encode(eventsURL, forKey: "events_url")
                    try values.encode(followersURL, forKey: "followers_url")
                    try values.encode(followingURL, forKey: "following_url")
                    try values.encode(gistsURL, forKey: "gists_url")
                    try values.encodeIfPresent(gravatarID, forKey: "gravatar_id")
                    try values.encode(htmlURL, forKey: "html_url")
                    try values.encode(id, forKey: "id")
                    try values.encode(nodeID, forKey: "node_id")
                    try values.encode(login, forKey: "login")
                    try values.encode(organizationsURL, forKey: "organizations_url")
                    try values.encode(receivedEventsURL, forKey: "received_events_url")
                    try values.encode(reposURL, forKey: "repos_url")
                    try values.encode(isSiteAdmin, forKey: "site_admin")
                    try values.encode(starredURL, forKey: "starred_url")
                    try values.encode(subscriptionsURL, forKey: "subscriptions_url")
                    try values.encode(type, forKey: "type")
                    try values.encode(url, forKey: "url")
                }
            }

            public struct Permissions: Codable {
                public var isAdmin: Bool
                public var isMaintain: Bool?
                public var isPush: Bool
                public var isTriage: Bool?
                public var isPull: Bool

                public init(isAdmin: Bool, isMaintain: Bool? = nil, isPush: Bool, isTriage: Bool? = nil, isPull: Bool) {
                    self.isAdmin = isAdmin
                    self.isMaintain = isMaintain
                    self.isPush = isPush
                    self.isTriage = isTriage
                    self.isPull = isPull
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.isAdmin = try values.decode(Bool.self, forKey: "admin")
                    self.isMaintain = try values.decodeIfPresent(Bool.self, forKey: "maintain")
                    self.isPush = try values.decode(Bool.self, forKey: "push")
                    self.isTriage = try values.decodeIfPresent(Bool.self, forKey: "triage")
                    self.isPull = try values.decode(Bool.self, forKey: "pull")
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(isAdmin, forKey: "admin")
                    try values.encodeIfPresent(isMaintain, forKey: "maintain")
                    try values.encode(isPush, forKey: "push")
                    try values.encodeIfPresent(isTriage, forKey: "triage")
                    try values.encode(isPull, forKey: "pull")
                }
            }

            public struct License: Codable {
                public var key: String
                public var name: String
                public var url: URL?
                public var spdxID: String?
                public var nodeID: String

                public init(key: String, name: String, url: URL? = nil, spdxID: String? = nil, nodeID: String) {
                    self.key = key
                    self.name = name
                    self.url = url
                    self.spdxID = spdxID
                    self.nodeID = nodeID
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.key = try values.decode(String.self, forKey: "key")
                    self.name = try values.decode(String.self, forKey: "name")
                    self.url = try values.decodeIfPresent(URL.self, forKey: "url")
                    self.spdxID = try values.decodeIfPresent(String.self, forKey: "spdx_id")
                    self.nodeID = try values.decode(String.self, forKey: "node_id")
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(key, forKey: "key")
                    try values.encode(name, forKey: "name")
                    try values.encodeIfPresent(url, forKey: "url")
                    try values.encodeIfPresent(spdxID, forKey: "spdx_id")
                    try values.encode(nodeID, forKey: "node_id")
                }
            }

            public init(archiveURL: String, assigneesURL: String, blobsURL: String, branchesURL: String, collaboratorsURL: String, commentsURL: String, commitsURL: String, compareURL: String, contentsURL: String, contributorsURL: URL, deploymentsURL: URL, description: String? = nil, downloadsURL: URL, eventsURL: URL, isFork: Bool, forksURL: URL, fullName: String, gitCommitsURL: String, gitRefsURL: String, gitTagsURL: String, hooksURL: URL, htmlURL: URL, id: Int, nodeID: String, issueCommentURL: String, issueEventsURL: String, issuesURL: String, keysURL: String, labelsURL: String, languagesURL: URL, mergesURL: URL, milestonesURL: String, name: String, notificationsURL: String, owner: Owner, isPrivate: Bool, pullsURL: String, releasesURL: String, stargazersURL: URL, statusesURL: String, subscribersURL: URL, subscriptionURL: URL, tagsURL: URL, teamsURL: URL, treesURL: String, url: URL, cloneURL: String, defaultBranch: String, forks: Int, forksCount: Int, gitURL: String, hasDownloads: Bool, hasIssues: Bool, hasProjects: Bool, hasWiki: Bool, hasPages: Bool, homepage: URL? = nil, language: String? = nil, masterBranch: String? = nil, isArchived: Bool, isDisabled: Bool, visibility: String? = nil, mirrorURL: URL? = nil, openIssues: Int, openIssuesCount: Int, permissions: Permissions? = nil, tempCloneToken: String? = nil, allowMergeCommit: Bool? = nil, allowSquashMerge: Bool? = nil, allowRebaseMerge: Bool? = nil, license: License? = nil, pushedAt: Date, size: Int, sshURL: String, stargazersCount: Int, svnURL: URL, topics: [String]? = nil, watchers: Int, watchersCount: Int, createdAt: Date, updatedAt: Date, allowForking: Bool? = nil, isTemplate: Bool? = nil, isWebCommitSignoffRequired: Bool? = nil) {
                self.archiveURL = archiveURL
                self.assigneesURL = assigneesURL
                self.blobsURL = blobsURL
                self.branchesURL = branchesURL
                self.collaboratorsURL = collaboratorsURL
                self.commentsURL = commentsURL
                self.commitsURL = commitsURL
                self.compareURL = compareURL
                self.contentsURL = contentsURL
                self.contributorsURL = contributorsURL
                self.deploymentsURL = deploymentsURL
                self.description = description
                self.downloadsURL = downloadsURL
                self.eventsURL = eventsURL
                self.isFork = isFork
                self.forksURL = forksURL
                self.fullName = fullName
                self.gitCommitsURL = gitCommitsURL
                self.gitRefsURL = gitRefsURL
                self.gitTagsURL = gitTagsURL
                self.hooksURL = hooksURL
                self.htmlURL = htmlURL
                self.id = id
                self.nodeID = nodeID
                self.issueCommentURL = issueCommentURL
                self.issueEventsURL = issueEventsURL
                self.issuesURL = issuesURL
                self.keysURL = keysURL
                self.labelsURL = labelsURL
                self.languagesURL = languagesURL
                self.mergesURL = mergesURL
                self.milestonesURL = milestonesURL
                self.name = name
                self.notificationsURL = notificationsURL
                self.owner = owner
                self.isPrivate = isPrivate
                self.pullsURL = pullsURL
                self.releasesURL = releasesURL
                self.stargazersURL = stargazersURL
                self.statusesURL = statusesURL
                self.subscribersURL = subscribersURL
                self.subscriptionURL = subscriptionURL
                self.tagsURL = tagsURL
                self.teamsURL = teamsURL
                self.treesURL = treesURL
                self.url = url
                self.cloneURL = cloneURL
                self.defaultBranch = defaultBranch
                self.forks = forks
                self.forksCount = forksCount
                self.gitURL = gitURL
                self.hasDownloads = hasDownloads
                self.hasIssues = hasIssues
                self.hasProjects = hasProjects
                self.hasWiki = hasWiki
                self.hasPages = hasPages
                self.homepage = homepage
                self.language = language
                self.masterBranch = masterBranch
                self.isArchived = isArchived
                self.isDisabled = isDisabled
                self.visibility = visibility
                self.mirrorURL = mirrorURL
                self.openIssues = openIssues
                self.openIssuesCount = openIssuesCount
                self.permissions = permissions
                self.tempCloneToken = tempCloneToken
                self.allowMergeCommit = allowMergeCommit
                self.allowSquashMerge = allowSquashMerge
                self.allowRebaseMerge = allowRebaseMerge
                self.license = license
                self.pushedAt = pushedAt
                self.size = size
                self.sshURL = sshURL
                self.stargazersCount = stargazersCount
                self.svnURL = svnURL
                self.topics = topics
                self.watchers = watchers
                self.watchersCount = watchersCount
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.allowForking = allowForking
                self.isTemplate = isTemplate
                self.isWebCommitSignoffRequired = isWebCommitSignoffRequired
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.archiveURL = try values.decode(String.self, forKey: "archive_url")
                self.assigneesURL = try values.decode(String.self, forKey: "assignees_url")
                self.blobsURL = try values.decode(String.self, forKey: "blobs_url")
                self.branchesURL = try values.decode(String.self, forKey: "branches_url")
                self.collaboratorsURL = try values.decode(String.self, forKey: "collaborators_url")
                self.commentsURL = try values.decode(String.self, forKey: "comments_url")
                self.commitsURL = try values.decode(String.self, forKey: "commits_url")
                self.compareURL = try values.decode(String.self, forKey: "compare_url")
                self.contentsURL = try values.decode(String.self, forKey: "contents_url")
                self.contributorsURL = try values.decode(URL.self, forKey: "contributors_url")
                self.deploymentsURL = try values.decode(URL.self, forKey: "deployments_url")
                self.description = try values.decodeIfPresent(String.self, forKey: "description")
                self.downloadsURL = try values.decode(URL.self, forKey: "downloads_url")
                self.eventsURL = try values.decode(URL.self, forKey: "events_url")
                self.isFork = try values.decode(Bool.self, forKey: "fork")
                self.forksURL = try values.decode(URL.self, forKey: "forks_url")
                self.fullName = try values.decode(String.self, forKey: "full_name")
                self.gitCommitsURL = try values.decode(String.self, forKey: "git_commits_url")
                self.gitRefsURL = try values.decode(String.self, forKey: "git_refs_url")
                self.gitTagsURL = try values.decode(String.self, forKey: "git_tags_url")
                self.hooksURL = try values.decode(URL.self, forKey: "hooks_url")
                self.htmlURL = try values.decode(URL.self, forKey: "html_url")
                self.id = try values.decode(Int.self, forKey: "id")
                self.nodeID = try values.decode(String.self, forKey: "node_id")
                self.issueCommentURL = try values.decode(String.self, forKey: "issue_comment_url")
                self.issueEventsURL = try values.decode(String.self, forKey: "issue_events_url")
                self.issuesURL = try values.decode(String.self, forKey: "issues_url")
                self.keysURL = try values.decode(String.self, forKey: "keys_url")
                self.labelsURL = try values.decode(String.self, forKey: "labels_url")
                self.languagesURL = try values.decode(URL.self, forKey: "languages_url")
                self.mergesURL = try values.decode(URL.self, forKey: "merges_url")
                self.milestonesURL = try values.decode(String.self, forKey: "milestones_url")
                self.name = try values.decode(String.self, forKey: "name")
                self.notificationsURL = try values.decode(String.self, forKey: "notifications_url")
                self.owner = try values.decode(Owner.self, forKey: "owner")
                self.isPrivate = try values.decode(Bool.self, forKey: "private")
                self.pullsURL = try values.decode(String.self, forKey: "pulls_url")
                self.releasesURL = try values.decode(String.self, forKey: "releases_url")
                self.stargazersURL = try values.decode(URL.self, forKey: "stargazers_url")
                self.statusesURL = try values.decode(String.self, forKey: "statuses_url")
                self.subscribersURL = try values.decode(URL.self, forKey: "subscribers_url")
                self.subscriptionURL = try values.decode(URL.self, forKey: "subscription_url")
                self.tagsURL = try values.decode(URL.self, forKey: "tags_url")
                self.teamsURL = try values.decode(URL.self, forKey: "teams_url")
                self.treesURL = try values.decode(String.self, forKey: "trees_url")
                self.url = try values.decode(URL.self, forKey: "url")
                self.cloneURL = try values.decode(String.self, forKey: "clone_url")
                self.defaultBranch = try values.decode(String.self, forKey: "default_branch")
                self.forks = try values.decode(Int.self, forKey: "forks")
                self.forksCount = try values.decode(Int.self, forKey: "forks_count")
                self.gitURL = try values.decode(String.self, forKey: "git_url")
                self.hasDownloads = try values.decode(Bool.self, forKey: "has_downloads")
                self.hasIssues = try values.decode(Bool.self, forKey: "has_issues")
                self.hasProjects = try values.decode(Bool.self, forKey: "has_projects")
                self.hasWiki = try values.decode(Bool.self, forKey: "has_wiki")
                self.hasPages = try values.decode(Bool.self, forKey: "has_pages")
                self.homepage = try values.decodeIfPresent(URL.self, forKey: "homepage")
                self.language = try values.decodeIfPresent(String.self, forKey: "language")
                self.masterBranch = try values.decodeIfPresent(String.self, forKey: "master_branch")
                self.isArchived = try values.decode(Bool.self, forKey: "archived")
                self.isDisabled = try values.decode(Bool.self, forKey: "disabled")
                self.visibility = try values.decodeIfPresent(String.self, forKey: "visibility")
                self.mirrorURL = try values.decodeIfPresent(URL.self, forKey: "mirror_url")
                self.openIssues = try values.decode(Int.self, forKey: "open_issues")
                self.openIssuesCount = try values.decode(Int.self, forKey: "open_issues_count")
                self.permissions = try values.decodeIfPresent(Permissions.self, forKey: "permissions")
                self.tempCloneToken = try values.decodeIfPresent(String.self, forKey: "temp_clone_token")
                self.allowMergeCommit = try values.decodeIfPresent(Bool.self, forKey: "allow_merge_commit")
                self.allowSquashMerge = try values.decodeIfPresent(Bool.self, forKey: "allow_squash_merge")
                self.allowRebaseMerge = try values.decodeIfPresent(Bool.self, forKey: "allow_rebase_merge")
                self.license = try values.decodeIfPresent(License.self, forKey: "license")
                self.pushedAt = try values.decode(Date.self, forKey: "pushed_at")
                self.size = try values.decode(Int.self, forKey: "size")
                self.sshURL = try values.decode(String.self, forKey: "ssh_url")
                self.stargazersCount = try values.decode(Int.self, forKey: "stargazers_count")
                self.svnURL = try values.decode(URL.self, forKey: "svn_url")
                self.topics = try values.decodeIfPresent([String].self, forKey: "topics")
                self.watchers = try values.decode(Int.self, forKey: "watchers")
                self.watchersCount = try values.decode(Int.self, forKey: "watchers_count")
                self.createdAt = try values.decode(Date.self, forKey: "created_at")
                self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
                self.allowForking = try values.decodeIfPresent(Bool.self, forKey: "allow_forking")
                self.isTemplate = try values.decodeIfPresent(Bool.self, forKey: "is_template")
                self.isWebCommitSignoffRequired = try values.decodeIfPresent(Bool.self, forKey: "web_commit_signoff_required")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(archiveURL, forKey: "archive_url")
                try values.encode(assigneesURL, forKey: "assignees_url")
                try values.encode(blobsURL, forKey: "blobs_url")
                try values.encode(branchesURL, forKey: "branches_url")
                try values.encode(collaboratorsURL, forKey: "collaborators_url")
                try values.encode(commentsURL, forKey: "comments_url")
                try values.encode(commitsURL, forKey: "commits_url")
                try values.encode(compareURL, forKey: "compare_url")
                try values.encode(contentsURL, forKey: "contents_url")
                try values.encode(contributorsURL, forKey: "contributors_url")
                try values.encode(deploymentsURL, forKey: "deployments_url")
                try values.encodeIfPresent(description, forKey: "description")
                try values.encode(downloadsURL, forKey: "downloads_url")
                try values.encode(eventsURL, forKey: "events_url")
                try values.encode(isFork, forKey: "fork")
                try values.encode(forksURL, forKey: "forks_url")
                try values.encode(fullName, forKey: "full_name")
                try values.encode(gitCommitsURL, forKey: "git_commits_url")
                try values.encode(gitRefsURL, forKey: "git_refs_url")
                try values.encode(gitTagsURL, forKey: "git_tags_url")
                try values.encode(hooksURL, forKey: "hooks_url")
                try values.encode(htmlURL, forKey: "html_url")
                try values.encode(id, forKey: "id")
                try values.encode(nodeID, forKey: "node_id")
                try values.encode(issueCommentURL, forKey: "issue_comment_url")
                try values.encode(issueEventsURL, forKey: "issue_events_url")
                try values.encode(issuesURL, forKey: "issues_url")
                try values.encode(keysURL, forKey: "keys_url")
                try values.encode(labelsURL, forKey: "labels_url")
                try values.encode(languagesURL, forKey: "languages_url")
                try values.encode(mergesURL, forKey: "merges_url")
                try values.encode(milestonesURL, forKey: "milestones_url")
                try values.encode(name, forKey: "name")
                try values.encode(notificationsURL, forKey: "notifications_url")
                try values.encode(owner, forKey: "owner")
                try values.encode(isPrivate, forKey: "private")
                try values.encode(pullsURL, forKey: "pulls_url")
                try values.encode(releasesURL, forKey: "releases_url")
                try values.encode(stargazersURL, forKey: "stargazers_url")
                try values.encode(statusesURL, forKey: "statuses_url")
                try values.encode(subscribersURL, forKey: "subscribers_url")
                try values.encode(subscriptionURL, forKey: "subscription_url")
                try values.encode(tagsURL, forKey: "tags_url")
                try values.encode(teamsURL, forKey: "teams_url")
                try values.encode(treesURL, forKey: "trees_url")
                try values.encode(url, forKey: "url")
                try values.encode(cloneURL, forKey: "clone_url")
                try values.encode(defaultBranch, forKey: "default_branch")
                try values.encode(forks, forKey: "forks")
                try values.encode(forksCount, forKey: "forks_count")
                try values.encode(gitURL, forKey: "git_url")
                try values.encode(hasDownloads, forKey: "has_downloads")
                try values.encode(hasIssues, forKey: "has_issues")
                try values.encode(hasProjects, forKey: "has_projects")
                try values.encode(hasWiki, forKey: "has_wiki")
                try values.encode(hasPages, forKey: "has_pages")
                try values.encodeIfPresent(homepage, forKey: "homepage")
                try values.encodeIfPresent(language, forKey: "language")
                try values.encodeIfPresent(masterBranch, forKey: "master_branch")
                try values.encode(isArchived, forKey: "archived")
                try values.encode(isDisabled, forKey: "disabled")
                try values.encodeIfPresent(visibility, forKey: "visibility")
                try values.encodeIfPresent(mirrorURL, forKey: "mirror_url")
                try values.encode(openIssues, forKey: "open_issues")
                try values.encode(openIssuesCount, forKey: "open_issues_count")
                try values.encodeIfPresent(permissions, forKey: "permissions")
                try values.encodeIfPresent(tempCloneToken, forKey: "temp_clone_token")
                try values.encodeIfPresent(allowMergeCommit, forKey: "allow_merge_commit")
                try values.encodeIfPresent(allowSquashMerge, forKey: "allow_squash_merge")
                try values.encodeIfPresent(allowRebaseMerge, forKey: "allow_rebase_merge")
                try values.encodeIfPresent(license, forKey: "license")
                try values.encode(pushedAt, forKey: "pushed_at")
                try values.encode(size, forKey: "size")
                try values.encode(sshURL, forKey: "ssh_url")
                try values.encode(stargazersCount, forKey: "stargazers_count")
                try values.encode(svnURL, forKey: "svn_url")
                try values.encodeIfPresent(topics, forKey: "topics")
                try values.encode(watchers, forKey: "watchers")
                try values.encode(watchersCount, forKey: "watchers_count")
                try values.encode(createdAt, forKey: "created_at")
                try values.encode(updatedAt, forKey: "updated_at")
                try values.encodeIfPresent(allowForking, forKey: "allow_forking")
                try values.encodeIfPresent(isTemplate, forKey: "is_template")
                try values.encodeIfPresent(isWebCommitSignoffRequired, forKey: "web_commit_signoff_required")
            }
        }

        public struct User: Codable, Identifiable {
            public var avatarURL: URL
            public var eventsURL: String
            public var followersURL: URL
            public var followingURL: String
            public var gistsURL: String
            public var gravatarID: String?
            public var htmlURL: URL
            public var id: Int
            public var nodeID: String
            public var login: String
            public var organizationsURL: URL
            public var receivedEventsURL: URL
            public var reposURL: URL
            public var isSiteAdmin: Bool
            public var starredURL: String
            public var subscriptionsURL: URL
            public var type: String
            public var url: URL

            public init(avatarURL: URL, eventsURL: String, followersURL: URL, followingURL: String, gistsURL: String, gravatarID: String? = nil, htmlURL: URL, id: Int, nodeID: String, login: String, organizationsURL: URL, receivedEventsURL: URL, reposURL: URL, isSiteAdmin: Bool, starredURL: String, subscriptionsURL: URL, type: String, url: URL) {
                self.avatarURL = avatarURL
                self.eventsURL = eventsURL
                self.followersURL = followersURL
                self.followingURL = followingURL
                self.gistsURL = gistsURL
                self.gravatarID = gravatarID
                self.htmlURL = htmlURL
                self.id = id
                self.nodeID = nodeID
                self.login = login
                self.organizationsURL = organizationsURL
                self.receivedEventsURL = receivedEventsURL
                self.reposURL = reposURL
                self.isSiteAdmin = isSiteAdmin
                self.starredURL = starredURL
                self.subscriptionsURL = subscriptionsURL
                self.type = type
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.avatarURL = try values.decode(URL.self, forKey: "avatar_url")
                self.eventsURL = try values.decode(String.self, forKey: "events_url")
                self.followersURL = try values.decode(URL.self, forKey: "followers_url")
                self.followingURL = try values.decode(String.self, forKey: "following_url")
                self.gistsURL = try values.decode(String.self, forKey: "gists_url")
                self.gravatarID = try values.decodeIfPresent(String.self, forKey: "gravatar_id")
                self.htmlURL = try values.decode(URL.self, forKey: "html_url")
                self.id = try values.decode(Int.self, forKey: "id")
                self.nodeID = try values.decode(String.self, forKey: "node_id")
                self.login = try values.decode(String.self, forKey: "login")
                self.organizationsURL = try values.decode(URL.self, forKey: "organizations_url")
                self.receivedEventsURL = try values.decode(URL.self, forKey: "received_events_url")
                self.reposURL = try values.decode(URL.self, forKey: "repos_url")
                self.isSiteAdmin = try values.decode(Bool.self, forKey: "site_admin")
                self.starredURL = try values.decode(String.self, forKey: "starred_url")
                self.subscriptionsURL = try values.decode(URL.self, forKey: "subscriptions_url")
                self.type = try values.decode(String.self, forKey: "type")
                self.url = try values.decode(URL.self, forKey: "url")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(avatarURL, forKey: "avatar_url")
                try values.encode(eventsURL, forKey: "events_url")
                try values.encode(followersURL, forKey: "followers_url")
                try values.encode(followingURL, forKey: "following_url")
                try values.encode(gistsURL, forKey: "gists_url")
                try values.encodeIfPresent(gravatarID, forKey: "gravatar_id")
                try values.encode(htmlURL, forKey: "html_url")
                try values.encode(id, forKey: "id")
                try values.encode(nodeID, forKey: "node_id")
                try values.encode(login, forKey: "login")
                try values.encode(organizationsURL, forKey: "organizations_url")
                try values.encode(receivedEventsURL, forKey: "received_events_url")
                try values.encode(reposURL, forKey: "repos_url")
                try values.encode(isSiteAdmin, forKey: "site_admin")
                try values.encode(starredURL, forKey: "starred_url")
                try values.encode(subscriptionsURL, forKey: "subscriptions_url")
                try values.encode(type, forKey: "type")
                try values.encode(url, forKey: "url")
            }
        }

        public init(label: String, ref: String, repo: Repo? = nil, sha: String, user: User) {
            self.label = label
            self.ref = ref
            self.repo = repo
            self.sha = sha
            self.user = user
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.label = try values.decode(String.self, forKey: "label")
            self.ref = try values.decode(String.self, forKey: "ref")
            self.repo = try values.decodeIfPresent(Repo.self, forKey: "repo")
            self.sha = try values.decode(String.self, forKey: "sha")
            self.user = try values.decode(User.self, forKey: "user")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(label, forKey: "label")
            try values.encode(ref, forKey: "ref")
            try values.encodeIfPresent(repo, forKey: "repo")
            try values.encode(sha, forKey: "sha")
            try values.encode(user, forKey: "user")
        }
    }

    public struct Base: Codable {
        public var label: String
        public var ref: String
        public var repo: Repo
        public var sha: String
        public var user: User

        public struct Repo: Codable, Identifiable {
            public var archiveURL: String
            public var assigneesURL: String
            public var blobsURL: String
            public var branchesURL: String
            public var collaboratorsURL: String
            public var commentsURL: String
            public var commitsURL: String
            public var compareURL: String
            public var contentsURL: String
            public var contributorsURL: URL
            public var deploymentsURL: URL
            public var description: String?
            public var downloadsURL: URL
            public var eventsURL: URL
            public var isFork: Bool
            public var forksURL: URL
            public var fullName: String
            public var gitCommitsURL: String
            public var gitRefsURL: String
            public var gitTagsURL: String
            public var hooksURL: URL
            public var htmlURL: URL
            public var id: Int
            public var isTemplate: Bool?
            public var nodeID: String
            public var issueCommentURL: String
            public var issueEventsURL: String
            public var issuesURL: String
            public var keysURL: String
            public var labelsURL: String
            public var languagesURL: URL
            public var mergesURL: URL
            public var milestonesURL: String
            public var name: String
            public var notificationsURL: String
            public var owner: Owner
            public var isPrivate: Bool
            public var pullsURL: String
            public var releasesURL: String
            public var stargazersURL: URL
            public var statusesURL: String
            public var subscribersURL: URL
            public var subscriptionURL: URL
            public var tagsURL: URL
            public var teamsURL: URL
            public var treesURL: String
            public var url: URL
            public var cloneURL: String
            public var defaultBranch: String
            public var forks: Int
            public var forksCount: Int
            public var gitURL: String
            public var hasDownloads: Bool
            public var hasIssues: Bool
            public var hasProjects: Bool
            public var hasWiki: Bool
            public var hasPages: Bool
            public var homepage: URL?
            public var language: String?
            public var masterBranch: String?
            public var isArchived: Bool
            public var isDisabled: Bool
            /// The repository visibility: public, private, or internal.
            public var visibility: String?
            public var mirrorURL: URL?
            public var openIssues: Int
            public var openIssuesCount: Int
            public var permissions: Permissions?
            public var tempCloneToken: String?
            public var allowMergeCommit: Bool?
            public var allowSquashMerge: Bool?
            public var allowRebaseMerge: Bool?
            /// License Simple
            public var license: NullableLicenseSimple?
            public var pushedAt: Date
            public var size: Int
            public var sshURL: String
            public var stargazersCount: Int
            public var svnURL: URL
            public var topics: [String]?
            public var watchers: Int
            public var watchersCount: Int
            public var createdAt: Date
            public var updatedAt: Date
            public var allowForking: Bool?
            public var isWebCommitSignoffRequired: Bool?

            public struct Owner: Codable, Identifiable {
                public var avatarURL: URL
                public var eventsURL: String
                public var followersURL: URL
                public var followingURL: String
                public var gistsURL: String
                public var gravatarID: String?
                public var htmlURL: URL
                public var id: Int
                public var nodeID: String
                public var login: String
                public var organizationsURL: URL
                public var receivedEventsURL: URL
                public var reposURL: URL
                public var isSiteAdmin: Bool
                public var starredURL: String
                public var subscriptionsURL: URL
                public var type: String
                public var url: URL

                public init(avatarURL: URL, eventsURL: String, followersURL: URL, followingURL: String, gistsURL: String, gravatarID: String? = nil, htmlURL: URL, id: Int, nodeID: String, login: String, organizationsURL: URL, receivedEventsURL: URL, reposURL: URL, isSiteAdmin: Bool, starredURL: String, subscriptionsURL: URL, type: String, url: URL) {
                    self.avatarURL = avatarURL
                    self.eventsURL = eventsURL
                    self.followersURL = followersURL
                    self.followingURL = followingURL
                    self.gistsURL = gistsURL
                    self.gravatarID = gravatarID
                    self.htmlURL = htmlURL
                    self.id = id
                    self.nodeID = nodeID
                    self.login = login
                    self.organizationsURL = organizationsURL
                    self.receivedEventsURL = receivedEventsURL
                    self.reposURL = reposURL
                    self.isSiteAdmin = isSiteAdmin
                    self.starredURL = starredURL
                    self.subscriptionsURL = subscriptionsURL
                    self.type = type
                    self.url = url
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.avatarURL = try values.decode(URL.self, forKey: "avatar_url")
                    self.eventsURL = try values.decode(String.self, forKey: "events_url")
                    self.followersURL = try values.decode(URL.self, forKey: "followers_url")
                    self.followingURL = try values.decode(String.self, forKey: "following_url")
                    self.gistsURL = try values.decode(String.self, forKey: "gists_url")
                    self.gravatarID = try values.decodeIfPresent(String.self, forKey: "gravatar_id")
                    self.htmlURL = try values.decode(URL.self, forKey: "html_url")
                    self.id = try values.decode(Int.self, forKey: "id")
                    self.nodeID = try values.decode(String.self, forKey: "node_id")
                    self.login = try values.decode(String.self, forKey: "login")
                    self.organizationsURL = try values.decode(URL.self, forKey: "organizations_url")
                    self.receivedEventsURL = try values.decode(URL.self, forKey: "received_events_url")
                    self.reposURL = try values.decode(URL.self, forKey: "repos_url")
                    self.isSiteAdmin = try values.decode(Bool.self, forKey: "site_admin")
                    self.starredURL = try values.decode(String.self, forKey: "starred_url")
                    self.subscriptionsURL = try values.decode(URL.self, forKey: "subscriptions_url")
                    self.type = try values.decode(String.self, forKey: "type")
                    self.url = try values.decode(URL.self, forKey: "url")
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(avatarURL, forKey: "avatar_url")
                    try values.encode(eventsURL, forKey: "events_url")
                    try values.encode(followersURL, forKey: "followers_url")
                    try values.encode(followingURL, forKey: "following_url")
                    try values.encode(gistsURL, forKey: "gists_url")
                    try values.encodeIfPresent(gravatarID, forKey: "gravatar_id")
                    try values.encode(htmlURL, forKey: "html_url")
                    try values.encode(id, forKey: "id")
                    try values.encode(nodeID, forKey: "node_id")
                    try values.encode(login, forKey: "login")
                    try values.encode(organizationsURL, forKey: "organizations_url")
                    try values.encode(receivedEventsURL, forKey: "received_events_url")
                    try values.encode(reposURL, forKey: "repos_url")
                    try values.encode(isSiteAdmin, forKey: "site_admin")
                    try values.encode(starredURL, forKey: "starred_url")
                    try values.encode(subscriptionsURL, forKey: "subscriptions_url")
                    try values.encode(type, forKey: "type")
                    try values.encode(url, forKey: "url")
                }
            }

            public struct Permissions: Codable {
                public var isAdmin: Bool
                public var isMaintain: Bool?
                public var isPush: Bool
                public var isTriage: Bool?
                public var isPull: Bool

                public init(isAdmin: Bool, isMaintain: Bool? = nil, isPush: Bool, isTriage: Bool? = nil, isPull: Bool) {
                    self.isAdmin = isAdmin
                    self.isMaintain = isMaintain
                    self.isPush = isPush
                    self.isTriage = isTriage
                    self.isPull = isPull
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.isAdmin = try values.decode(Bool.self, forKey: "admin")
                    self.isMaintain = try values.decodeIfPresent(Bool.self, forKey: "maintain")
                    self.isPush = try values.decode(Bool.self, forKey: "push")
                    self.isTriage = try values.decodeIfPresent(Bool.self, forKey: "triage")
                    self.isPull = try values.decode(Bool.self, forKey: "pull")
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(isAdmin, forKey: "admin")
                    try values.encodeIfPresent(isMaintain, forKey: "maintain")
                    try values.encode(isPush, forKey: "push")
                    try values.encodeIfPresent(isTriage, forKey: "triage")
                    try values.encode(isPull, forKey: "pull")
                }
            }

            public init(archiveURL: String, assigneesURL: String, blobsURL: String, branchesURL: String, collaboratorsURL: String, commentsURL: String, commitsURL: String, compareURL: String, contentsURL: String, contributorsURL: URL, deploymentsURL: URL, description: String? = nil, downloadsURL: URL, eventsURL: URL, isFork: Bool, forksURL: URL, fullName: String, gitCommitsURL: String, gitRefsURL: String, gitTagsURL: String, hooksURL: URL, htmlURL: URL, id: Int, isTemplate: Bool? = nil, nodeID: String, issueCommentURL: String, issueEventsURL: String, issuesURL: String, keysURL: String, labelsURL: String, languagesURL: URL, mergesURL: URL, milestonesURL: String, name: String, notificationsURL: String, owner: Owner, isPrivate: Bool, pullsURL: String, releasesURL: String, stargazersURL: URL, statusesURL: String, subscribersURL: URL, subscriptionURL: URL, tagsURL: URL, teamsURL: URL, treesURL: String, url: URL, cloneURL: String, defaultBranch: String, forks: Int, forksCount: Int, gitURL: String, hasDownloads: Bool, hasIssues: Bool, hasProjects: Bool, hasWiki: Bool, hasPages: Bool, homepage: URL? = nil, language: String? = nil, masterBranch: String? = nil, isArchived: Bool, isDisabled: Bool, visibility: String? = nil, mirrorURL: URL? = nil, openIssues: Int, openIssuesCount: Int, permissions: Permissions? = nil, tempCloneToken: String? = nil, allowMergeCommit: Bool? = nil, allowSquashMerge: Bool? = nil, allowRebaseMerge: Bool? = nil, license: NullableLicenseSimple? = nil, pushedAt: Date, size: Int, sshURL: String, stargazersCount: Int, svnURL: URL, topics: [String]? = nil, watchers: Int, watchersCount: Int, createdAt: Date, updatedAt: Date, allowForking: Bool? = nil, isWebCommitSignoffRequired: Bool? = nil) {
                self.archiveURL = archiveURL
                self.assigneesURL = assigneesURL
                self.blobsURL = blobsURL
                self.branchesURL = branchesURL
                self.collaboratorsURL = collaboratorsURL
                self.commentsURL = commentsURL
                self.commitsURL = commitsURL
                self.compareURL = compareURL
                self.contentsURL = contentsURL
                self.contributorsURL = contributorsURL
                self.deploymentsURL = deploymentsURL
                self.description = description
                self.downloadsURL = downloadsURL
                self.eventsURL = eventsURL
                self.isFork = isFork
                self.forksURL = forksURL
                self.fullName = fullName
                self.gitCommitsURL = gitCommitsURL
                self.gitRefsURL = gitRefsURL
                self.gitTagsURL = gitTagsURL
                self.hooksURL = hooksURL
                self.htmlURL = htmlURL
                self.id = id
                self.isTemplate = isTemplate
                self.nodeID = nodeID
                self.issueCommentURL = issueCommentURL
                self.issueEventsURL = issueEventsURL
                self.issuesURL = issuesURL
                self.keysURL = keysURL
                self.labelsURL = labelsURL
                self.languagesURL = languagesURL
                self.mergesURL = mergesURL
                self.milestonesURL = milestonesURL
                self.name = name
                self.notificationsURL = notificationsURL
                self.owner = owner
                self.isPrivate = isPrivate
                self.pullsURL = pullsURL
                self.releasesURL = releasesURL
                self.stargazersURL = stargazersURL
                self.statusesURL = statusesURL
                self.subscribersURL = subscribersURL
                self.subscriptionURL = subscriptionURL
                self.tagsURL = tagsURL
                self.teamsURL = teamsURL
                self.treesURL = treesURL
                self.url = url
                self.cloneURL = cloneURL
                self.defaultBranch = defaultBranch
                self.forks = forks
                self.forksCount = forksCount
                self.gitURL = gitURL
                self.hasDownloads = hasDownloads
                self.hasIssues = hasIssues
                self.hasProjects = hasProjects
                self.hasWiki = hasWiki
                self.hasPages = hasPages
                self.homepage = homepage
                self.language = language
                self.masterBranch = masterBranch
                self.isArchived = isArchived
                self.isDisabled = isDisabled
                self.visibility = visibility
                self.mirrorURL = mirrorURL
                self.openIssues = openIssues
                self.openIssuesCount = openIssuesCount
                self.permissions = permissions
                self.tempCloneToken = tempCloneToken
                self.allowMergeCommit = allowMergeCommit
                self.allowSquashMerge = allowSquashMerge
                self.allowRebaseMerge = allowRebaseMerge
                self.license = license
                self.pushedAt = pushedAt
                self.size = size
                self.sshURL = sshURL
                self.stargazersCount = stargazersCount
                self.svnURL = svnURL
                self.topics = topics
                self.watchers = watchers
                self.watchersCount = watchersCount
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.allowForking = allowForking
                self.isWebCommitSignoffRequired = isWebCommitSignoffRequired
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.archiveURL = try values.decode(String.self, forKey: "archive_url")
                self.assigneesURL = try values.decode(String.self, forKey: "assignees_url")
                self.blobsURL = try values.decode(String.self, forKey: "blobs_url")
                self.branchesURL = try values.decode(String.self, forKey: "branches_url")
                self.collaboratorsURL = try values.decode(String.self, forKey: "collaborators_url")
                self.commentsURL = try values.decode(String.self, forKey: "comments_url")
                self.commitsURL = try values.decode(String.self, forKey: "commits_url")
                self.compareURL = try values.decode(String.self, forKey: "compare_url")
                self.contentsURL = try values.decode(String.self, forKey: "contents_url")
                self.contributorsURL = try values.decode(URL.self, forKey: "contributors_url")
                self.deploymentsURL = try values.decode(URL.self, forKey: "deployments_url")
                self.description = try values.decodeIfPresent(String.self, forKey: "description")
                self.downloadsURL = try values.decode(URL.self, forKey: "downloads_url")
                self.eventsURL = try values.decode(URL.self, forKey: "events_url")
                self.isFork = try values.decode(Bool.self, forKey: "fork")
                self.forksURL = try values.decode(URL.self, forKey: "forks_url")
                self.fullName = try values.decode(String.self, forKey: "full_name")
                self.gitCommitsURL = try values.decode(String.self, forKey: "git_commits_url")
                self.gitRefsURL = try values.decode(String.self, forKey: "git_refs_url")
                self.gitTagsURL = try values.decode(String.self, forKey: "git_tags_url")
                self.hooksURL = try values.decode(URL.self, forKey: "hooks_url")
                self.htmlURL = try values.decode(URL.self, forKey: "html_url")
                self.id = try values.decode(Int.self, forKey: "id")
                self.isTemplate = try values.decodeIfPresent(Bool.self, forKey: "is_template")
                self.nodeID = try values.decode(String.self, forKey: "node_id")
                self.issueCommentURL = try values.decode(String.self, forKey: "issue_comment_url")
                self.issueEventsURL = try values.decode(String.self, forKey: "issue_events_url")
                self.issuesURL = try values.decode(String.self, forKey: "issues_url")
                self.keysURL = try values.decode(String.self, forKey: "keys_url")
                self.labelsURL = try values.decode(String.self, forKey: "labels_url")
                self.languagesURL = try values.decode(URL.self, forKey: "languages_url")
                self.mergesURL = try values.decode(URL.self, forKey: "merges_url")
                self.milestonesURL = try values.decode(String.self, forKey: "milestones_url")
                self.name = try values.decode(String.self, forKey: "name")
                self.notificationsURL = try values.decode(String.self, forKey: "notifications_url")
                self.owner = try values.decode(Owner.self, forKey: "owner")
                self.isPrivate = try values.decode(Bool.self, forKey: "private")
                self.pullsURL = try values.decode(String.self, forKey: "pulls_url")
                self.releasesURL = try values.decode(String.self, forKey: "releases_url")
                self.stargazersURL = try values.decode(URL.self, forKey: "stargazers_url")
                self.statusesURL = try values.decode(String.self, forKey: "statuses_url")
                self.subscribersURL = try values.decode(URL.self, forKey: "subscribers_url")
                self.subscriptionURL = try values.decode(URL.self, forKey: "subscription_url")
                self.tagsURL = try values.decode(URL.self, forKey: "tags_url")
                self.teamsURL = try values.decode(URL.self, forKey: "teams_url")
                self.treesURL = try values.decode(String.self, forKey: "trees_url")
                self.url = try values.decode(URL.self, forKey: "url")
                self.cloneURL = try values.decode(String.self, forKey: "clone_url")
                self.defaultBranch = try values.decode(String.self, forKey: "default_branch")
                self.forks = try values.decode(Int.self, forKey: "forks")
                self.forksCount = try values.decode(Int.self, forKey: "forks_count")
                self.gitURL = try values.decode(String.self, forKey: "git_url")
                self.hasDownloads = try values.decode(Bool.self, forKey: "has_downloads")
                self.hasIssues = try values.decode(Bool.self, forKey: "has_issues")
                self.hasProjects = try values.decode(Bool.self, forKey: "has_projects")
                self.hasWiki = try values.decode(Bool.self, forKey: "has_wiki")
                self.hasPages = try values.decode(Bool.self, forKey: "has_pages")
                self.homepage = try values.decodeIfPresent(URL.self, forKey: "homepage")
                self.language = try values.decodeIfPresent(String.self, forKey: "language")
                self.masterBranch = try values.decodeIfPresent(String.self, forKey: "master_branch")
                self.isArchived = try values.decode(Bool.self, forKey: "archived")
                self.isDisabled = try values.decode(Bool.self, forKey: "disabled")
                self.visibility = try values.decodeIfPresent(String.self, forKey: "visibility")
                self.mirrorURL = try values.decodeIfPresent(URL.self, forKey: "mirror_url")
                self.openIssues = try values.decode(Int.self, forKey: "open_issues")
                self.openIssuesCount = try values.decode(Int.self, forKey: "open_issues_count")
                self.permissions = try values.decodeIfPresent(Permissions.self, forKey: "permissions")
                self.tempCloneToken = try values.decodeIfPresent(String.self, forKey: "temp_clone_token")
                self.allowMergeCommit = try values.decodeIfPresent(Bool.self, forKey: "allow_merge_commit")
                self.allowSquashMerge = try values.decodeIfPresent(Bool.self, forKey: "allow_squash_merge")
                self.allowRebaseMerge = try values.decodeIfPresent(Bool.self, forKey: "allow_rebase_merge")
                self.license = try values.decodeIfPresent(NullableLicenseSimple.self, forKey: "license")
                self.pushedAt = try values.decode(Date.self, forKey: "pushed_at")
                self.size = try values.decode(Int.self, forKey: "size")
                self.sshURL = try values.decode(String.self, forKey: "ssh_url")
                self.stargazersCount = try values.decode(Int.self, forKey: "stargazers_count")
                self.svnURL = try values.decode(URL.self, forKey: "svn_url")
                self.topics = try values.decodeIfPresent([String].self, forKey: "topics")
                self.watchers = try values.decode(Int.self, forKey: "watchers")
                self.watchersCount = try values.decode(Int.self, forKey: "watchers_count")
                self.createdAt = try values.decode(Date.self, forKey: "created_at")
                self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
                self.allowForking = try values.decodeIfPresent(Bool.self, forKey: "allow_forking")
                self.isWebCommitSignoffRequired = try values.decodeIfPresent(Bool.self, forKey: "web_commit_signoff_required")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(archiveURL, forKey: "archive_url")
                try values.encode(assigneesURL, forKey: "assignees_url")
                try values.encode(blobsURL, forKey: "blobs_url")
                try values.encode(branchesURL, forKey: "branches_url")
                try values.encode(collaboratorsURL, forKey: "collaborators_url")
                try values.encode(commentsURL, forKey: "comments_url")
                try values.encode(commitsURL, forKey: "commits_url")
                try values.encode(compareURL, forKey: "compare_url")
                try values.encode(contentsURL, forKey: "contents_url")
                try values.encode(contributorsURL, forKey: "contributors_url")
                try values.encode(deploymentsURL, forKey: "deployments_url")
                try values.encodeIfPresent(description, forKey: "description")
                try values.encode(downloadsURL, forKey: "downloads_url")
                try values.encode(eventsURL, forKey: "events_url")
                try values.encode(isFork, forKey: "fork")
                try values.encode(forksURL, forKey: "forks_url")
                try values.encode(fullName, forKey: "full_name")
                try values.encode(gitCommitsURL, forKey: "git_commits_url")
                try values.encode(gitRefsURL, forKey: "git_refs_url")
                try values.encode(gitTagsURL, forKey: "git_tags_url")
                try values.encode(hooksURL, forKey: "hooks_url")
                try values.encode(htmlURL, forKey: "html_url")
                try values.encode(id, forKey: "id")
                try values.encodeIfPresent(isTemplate, forKey: "is_template")
                try values.encode(nodeID, forKey: "node_id")
                try values.encode(issueCommentURL, forKey: "issue_comment_url")
                try values.encode(issueEventsURL, forKey: "issue_events_url")
                try values.encode(issuesURL, forKey: "issues_url")
                try values.encode(keysURL, forKey: "keys_url")
                try values.encode(labelsURL, forKey: "labels_url")
                try values.encode(languagesURL, forKey: "languages_url")
                try values.encode(mergesURL, forKey: "merges_url")
                try values.encode(milestonesURL, forKey: "milestones_url")
                try values.encode(name, forKey: "name")
                try values.encode(notificationsURL, forKey: "notifications_url")
                try values.encode(owner, forKey: "owner")
                try values.encode(isPrivate, forKey: "private")
                try values.encode(pullsURL, forKey: "pulls_url")
                try values.encode(releasesURL, forKey: "releases_url")
                try values.encode(stargazersURL, forKey: "stargazers_url")
                try values.encode(statusesURL, forKey: "statuses_url")
                try values.encode(subscribersURL, forKey: "subscribers_url")
                try values.encode(subscriptionURL, forKey: "subscription_url")
                try values.encode(tagsURL, forKey: "tags_url")
                try values.encode(teamsURL, forKey: "teams_url")
                try values.encode(treesURL, forKey: "trees_url")
                try values.encode(url, forKey: "url")
                try values.encode(cloneURL, forKey: "clone_url")
                try values.encode(defaultBranch, forKey: "default_branch")
                try values.encode(forks, forKey: "forks")
                try values.encode(forksCount, forKey: "forks_count")
                try values.encode(gitURL, forKey: "git_url")
                try values.encode(hasDownloads, forKey: "has_downloads")
                try values.encode(hasIssues, forKey: "has_issues")
                try values.encode(hasProjects, forKey: "has_projects")
                try values.encode(hasWiki, forKey: "has_wiki")
                try values.encode(hasPages, forKey: "has_pages")
                try values.encodeIfPresent(homepage, forKey: "homepage")
                try values.encodeIfPresent(language, forKey: "language")
                try values.encodeIfPresent(masterBranch, forKey: "master_branch")
                try values.encode(isArchived, forKey: "archived")
                try values.encode(isDisabled, forKey: "disabled")
                try values.encodeIfPresent(visibility, forKey: "visibility")
                try values.encodeIfPresent(mirrorURL, forKey: "mirror_url")
                try values.encode(openIssues, forKey: "open_issues")
                try values.encode(openIssuesCount, forKey: "open_issues_count")
                try values.encodeIfPresent(permissions, forKey: "permissions")
                try values.encodeIfPresent(tempCloneToken, forKey: "temp_clone_token")
                try values.encodeIfPresent(allowMergeCommit, forKey: "allow_merge_commit")
                try values.encodeIfPresent(allowSquashMerge, forKey: "allow_squash_merge")
                try values.encodeIfPresent(allowRebaseMerge, forKey: "allow_rebase_merge")
                try values.encodeIfPresent(license, forKey: "license")
                try values.encode(pushedAt, forKey: "pushed_at")
                try values.encode(size, forKey: "size")
                try values.encode(sshURL, forKey: "ssh_url")
                try values.encode(stargazersCount, forKey: "stargazers_count")
                try values.encode(svnURL, forKey: "svn_url")
                try values.encodeIfPresent(topics, forKey: "topics")
                try values.encode(watchers, forKey: "watchers")
                try values.encode(watchersCount, forKey: "watchers_count")
                try values.encode(createdAt, forKey: "created_at")
                try values.encode(updatedAt, forKey: "updated_at")
                try values.encodeIfPresent(allowForking, forKey: "allow_forking")
                try values.encodeIfPresent(isWebCommitSignoffRequired, forKey: "web_commit_signoff_required")
            }
        }

        public struct User: Codable, Identifiable {
            public var avatarURL: URL
            public var eventsURL: String
            public var followersURL: URL
            public var followingURL: String
            public var gistsURL: String
            public var gravatarID: String?
            public var htmlURL: URL
            public var id: Int
            public var nodeID: String
            public var login: String
            public var organizationsURL: URL
            public var receivedEventsURL: URL
            public var reposURL: URL
            public var isSiteAdmin: Bool
            public var starredURL: String
            public var subscriptionsURL: URL
            public var type: String
            public var url: URL

            public init(avatarURL: URL, eventsURL: String, followersURL: URL, followingURL: String, gistsURL: String, gravatarID: String? = nil, htmlURL: URL, id: Int, nodeID: String, login: String, organizationsURL: URL, receivedEventsURL: URL, reposURL: URL, isSiteAdmin: Bool, starredURL: String, subscriptionsURL: URL, type: String, url: URL) {
                self.avatarURL = avatarURL
                self.eventsURL = eventsURL
                self.followersURL = followersURL
                self.followingURL = followingURL
                self.gistsURL = gistsURL
                self.gravatarID = gravatarID
                self.htmlURL = htmlURL
                self.id = id
                self.nodeID = nodeID
                self.login = login
                self.organizationsURL = organizationsURL
                self.receivedEventsURL = receivedEventsURL
                self.reposURL = reposURL
                self.isSiteAdmin = isSiteAdmin
                self.starredURL = starredURL
                self.subscriptionsURL = subscriptionsURL
                self.type = type
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.avatarURL = try values.decode(URL.self, forKey: "avatar_url")
                self.eventsURL = try values.decode(String.self, forKey: "events_url")
                self.followersURL = try values.decode(URL.self, forKey: "followers_url")
                self.followingURL = try values.decode(String.self, forKey: "following_url")
                self.gistsURL = try values.decode(String.self, forKey: "gists_url")
                self.gravatarID = try values.decodeIfPresent(String.self, forKey: "gravatar_id")
                self.htmlURL = try values.decode(URL.self, forKey: "html_url")
                self.id = try values.decode(Int.self, forKey: "id")
                self.nodeID = try values.decode(String.self, forKey: "node_id")
                self.login = try values.decode(String.self, forKey: "login")
                self.organizationsURL = try values.decode(URL.self, forKey: "organizations_url")
                self.receivedEventsURL = try values.decode(URL.self, forKey: "received_events_url")
                self.reposURL = try values.decode(URL.self, forKey: "repos_url")
                self.isSiteAdmin = try values.decode(Bool.self, forKey: "site_admin")
                self.starredURL = try values.decode(String.self, forKey: "starred_url")
                self.subscriptionsURL = try values.decode(URL.self, forKey: "subscriptions_url")
                self.type = try values.decode(String.self, forKey: "type")
                self.url = try values.decode(URL.self, forKey: "url")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(avatarURL, forKey: "avatar_url")
                try values.encode(eventsURL, forKey: "events_url")
                try values.encode(followersURL, forKey: "followers_url")
                try values.encode(followingURL, forKey: "following_url")
                try values.encode(gistsURL, forKey: "gists_url")
                try values.encodeIfPresent(gravatarID, forKey: "gravatar_id")
                try values.encode(htmlURL, forKey: "html_url")
                try values.encode(id, forKey: "id")
                try values.encode(nodeID, forKey: "node_id")
                try values.encode(login, forKey: "login")
                try values.encode(organizationsURL, forKey: "organizations_url")
                try values.encode(receivedEventsURL, forKey: "received_events_url")
                try values.encode(reposURL, forKey: "repos_url")
                try values.encode(isSiteAdmin, forKey: "site_admin")
                try values.encode(starredURL, forKey: "starred_url")
                try values.encode(subscriptionsURL, forKey: "subscriptions_url")
                try values.encode(type, forKey: "type")
                try values.encode(url, forKey: "url")
            }
        }

        public init(label: String, ref: String, repo: Repo, sha: String, user: User) {
            self.label = label
            self.ref = ref
            self.repo = repo
            self.sha = sha
            self.user = user
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.label = try values.decode(String.self, forKey: "label")
            self.ref = try values.decode(String.self, forKey: "ref")
            self.repo = try values.decode(Repo.self, forKey: "repo")
            self.sha = try values.decode(String.self, forKey: "sha")
            self.user = try values.decode(User.self, forKey: "user")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(label, forKey: "label")
            try values.encode(ref, forKey: "ref")
            try values.encode(repo, forKey: "repo")
            try values.encode(sha, forKey: "sha")
            try values.encode(user, forKey: "user")
        }
    }

    public struct Links: Codable {
        /// Link
        ///
        /// Hypermedia Link
        public var comments: Link
        /// Link
        ///
        /// Hypermedia Link
        public var commits: Link
        /// Link
        ///
        /// Hypermedia Link
        public var statuses: Link
        /// Link
        ///
        /// Hypermedia Link
        public var html: Link
        /// Link
        ///
        /// Hypermedia Link
        public var issue: Link
        /// Link
        ///
        /// Hypermedia Link
        public var reviewComments: Link
        /// Link
        ///
        /// Hypermedia Link
        public var reviewComment: Link
        /// Link
        ///
        /// Hypermedia Link
        public var this: Link

        public init(comments: Link, commits: Link, statuses: Link, html: Link, issue: Link, reviewComments: Link, reviewComment: Link, this: Link) {
            self.comments = comments
            self.commits = commits
            self.statuses = statuses
            self.html = html
            self.issue = issue
            self.reviewComments = reviewComments
            self.reviewComment = reviewComment
            self.this = this
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.comments = try values.decode(Link.self, forKey: "comments")
            self.commits = try values.decode(Link.self, forKey: "commits")
            self.statuses = try values.decode(Link.self, forKey: "statuses")
            self.html = try values.decode(Link.self, forKey: "html")
            self.issue = try values.decode(Link.self, forKey: "issue")
            self.reviewComments = try values.decode(Link.self, forKey: "review_comments")
            self.reviewComment = try values.decode(Link.self, forKey: "review_comment")
            self.this = try values.decode(Link.self, forKey: "self")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(comments, forKey: "comments")
            try values.encode(commits, forKey: "commits")
            try values.encode(statuses, forKey: "statuses")
            try values.encode(html, forKey: "html")
            try values.encode(issue, forKey: "issue")
            try values.encode(reviewComments, forKey: "review_comments")
            try values.encode(reviewComment, forKey: "review_comment")
            try values.encode(this, forKey: "self")
        }
    }

    public init(url: URL, id: Int, nodeID: String, htmlURL: URL, diffURL: URL, patchURL: URL, issueURL: URL, commitsURL: URL, reviewCommentsURL: URL, reviewCommentURL: String, commentsURL: URL, statusesURL: URL, number: Int, state: State, isLocked: Bool, title: String, user: NullableSimpleUser? = nil, body: String? = nil, labels: [Label], milestone: NullableMilestone? = nil, activeLockReason: String? = nil, createdAt: Date, updatedAt: Date, closedAt: Date? = nil, mergedAt: Date? = nil, mergeCommitSha: String? = nil, assignee: NullableSimpleUser? = nil, assignees: [SimpleUser]? = nil, requestedReviewers: [SimpleUser]? = nil, requestedTeams: [TeamSimple]? = nil, head: Head, base: Base, links: Links, authorAssociation: AuthorAssociation, autoMerge: AutoMerge? = nil, isDraft: Bool? = nil, isMerged: Bool, isMergeable: Bool? = nil, isRebaseable: Bool? = nil, mergeableState: String, mergedBy: NullableSimpleUser? = nil, comments: Int, reviewComments: Int, maintainerCanModify: Bool, commits: Int, additions: Int, deletions: Int, changedFiles: Int) {
        self.url = url
        self.id = id
        self.nodeID = nodeID
        self.htmlURL = htmlURL
        self.diffURL = diffURL
        self.patchURL = patchURL
        self.issueURL = issueURL
        self.commitsURL = commitsURL
        self.reviewCommentsURL = reviewCommentsURL
        self.reviewCommentURL = reviewCommentURL
        self.commentsURL = commentsURL
        self.statusesURL = statusesURL
        self.number = number
        self.state = state
        self.isLocked = isLocked
        self.title = title
        self.user = user
        self.body = body
        self.labels = labels
        self.milestone = milestone
        self.activeLockReason = activeLockReason
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.closedAt = closedAt
        self.mergedAt = mergedAt
        self.mergeCommitSha = mergeCommitSha
        self.assignee = assignee
        self.assignees = assignees
        self.requestedReviewers = requestedReviewers
        self.requestedTeams = requestedTeams
        self.head = head
        self.base = base
        self.links = links
        self.authorAssociation = authorAssociation
        self.autoMerge = autoMerge
        self.isDraft = isDraft
        self.isMerged = isMerged
        self.isMergeable = isMergeable
        self.isRebaseable = isRebaseable
        self.mergeableState = mergeableState
        self.mergedBy = mergedBy
        self.comments = comments
        self.reviewComments = reviewComments
        self.maintainerCanModify = maintainerCanModify
        self.commits = commits
        self.additions = additions
        self.deletions = deletions
        self.changedFiles = changedFiles
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.url = try values.decode(URL.self, forKey: "url")
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.htmlURL = try values.decode(URL.self, forKey: "html_url")
        self.diffURL = try values.decode(URL.self, forKey: "diff_url")
        self.patchURL = try values.decode(URL.self, forKey: "patch_url")
        self.issueURL = try values.decode(URL.self, forKey: "issue_url")
        self.commitsURL = try values.decode(URL.self, forKey: "commits_url")
        self.reviewCommentsURL = try values.decode(URL.self, forKey: "review_comments_url")
        self.reviewCommentURL = try values.decode(String.self, forKey: "review_comment_url")
        self.commentsURL = try values.decode(URL.self, forKey: "comments_url")
        self.statusesURL = try values.decode(URL.self, forKey: "statuses_url")
        self.number = try values.decode(Int.self, forKey: "number")
        self.state = try values.decode(State.self, forKey: "state")
        self.isLocked = try values.decode(Bool.self, forKey: "locked")
        self.title = try values.decode(String.self, forKey: "title")
        self.user = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "user")
        self.body = try values.decodeIfPresent(String.self, forKey: "body")
        self.labels = try values.decode([Label].self, forKey: "labels")
        self.milestone = try values.decodeIfPresent(NullableMilestone.self, forKey: "milestone")
        self.activeLockReason = try values.decodeIfPresent(String.self, forKey: "active_lock_reason")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.closedAt = try values.decodeIfPresent(Date.self, forKey: "closed_at")
        self.mergedAt = try values.decodeIfPresent(Date.self, forKey: "merged_at")
        self.mergeCommitSha = try values.decodeIfPresent(String.self, forKey: "merge_commit_sha")
        self.assignee = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "assignee")
        self.assignees = try values.decodeIfPresent([SimpleUser].self, forKey: "assignees")
        self.requestedReviewers = try values.decodeIfPresent([SimpleUser].self, forKey: "requested_reviewers")
        self.requestedTeams = try values.decodeIfPresent([TeamSimple].self, forKey: "requested_teams")
        self.head = try values.decode(Head.self, forKey: "head")
        self.base = try values.decode(Base.self, forKey: "base")
        self.links = try values.decode(Links.self, forKey: "_links")
        self.authorAssociation = try values.decode(AuthorAssociation.self, forKey: "author_association")
        self.autoMerge = try values.decodeIfPresent(AutoMerge.self, forKey: "auto_merge")
        self.isDraft = try values.decodeIfPresent(Bool.self, forKey: "draft")
        self.isMerged = try values.decode(Bool.self, forKey: "merged")
        self.isMergeable = try values.decodeIfPresent(Bool.self, forKey: "mergeable")
        self.isRebaseable = try values.decodeIfPresent(Bool.self, forKey: "rebaseable")
        self.mergeableState = try values.decode(String.self, forKey: "mergeable_state")
        self.mergedBy = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "merged_by")
        self.comments = try values.decode(Int.self, forKey: "comments")
        self.reviewComments = try values.decode(Int.self, forKey: "review_comments")
        self.maintainerCanModify = try values.decode(Bool.self, forKey: "maintainer_can_modify")
        self.commits = try values.decode(Int.self, forKey: "commits")
        self.additions = try values.decode(Int.self, forKey: "additions")
        self.deletions = try values.decode(Int.self, forKey: "deletions")
        self.changedFiles = try values.decode(Int.self, forKey: "changed_files")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(url, forKey: "url")
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encode(diffURL, forKey: "diff_url")
        try values.encode(patchURL, forKey: "patch_url")
        try values.encode(issueURL, forKey: "issue_url")
        try values.encode(commitsURL, forKey: "commits_url")
        try values.encode(reviewCommentsURL, forKey: "review_comments_url")
        try values.encode(reviewCommentURL, forKey: "review_comment_url")
        try values.encode(commentsURL, forKey: "comments_url")
        try values.encode(statusesURL, forKey: "statuses_url")
        try values.encode(number, forKey: "number")
        try values.encode(state, forKey: "state")
        try values.encode(isLocked, forKey: "locked")
        try values.encode(title, forKey: "title")
        try values.encodeIfPresent(user, forKey: "user")
        try values.encodeIfPresent(body, forKey: "body")
        try values.encode(labels, forKey: "labels")
        try values.encodeIfPresent(milestone, forKey: "milestone")
        try values.encodeIfPresent(activeLockReason, forKey: "active_lock_reason")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encodeIfPresent(closedAt, forKey: "closed_at")
        try values.encodeIfPresent(mergedAt, forKey: "merged_at")
        try values.encodeIfPresent(mergeCommitSha, forKey: "merge_commit_sha")
        try values.encodeIfPresent(assignee, forKey: "assignee")
        try values.encodeIfPresent(assignees, forKey: "assignees")
        try values.encodeIfPresent(requestedReviewers, forKey: "requested_reviewers")
        try values.encodeIfPresent(requestedTeams, forKey: "requested_teams")
        try values.encode(head, forKey: "head")
        try values.encode(base, forKey: "base")
        try values.encode(links, forKey: "_links")
        try values.encode(authorAssociation, forKey: "author_association")
        try values.encodeIfPresent(autoMerge, forKey: "auto_merge")
        try values.encodeIfPresent(isDraft, forKey: "draft")
        try values.encode(isMerged, forKey: "merged")
        try values.encodeIfPresent(isMergeable, forKey: "mergeable")
        try values.encodeIfPresent(isRebaseable, forKey: "rebaseable")
        try values.encode(mergeableState, forKey: "mergeable_state")
        try values.encodeIfPresent(mergedBy, forKey: "merged_by")
        try values.encode(comments, forKey: "comments")
        try values.encode(reviewComments, forKey: "review_comments")
        try values.encode(maintainerCanModify, forKey: "maintainer_can_modify")
        try values.encode(commits, forKey: "commits")
        try values.encode(additions, forKey: "additions")
        try values.encode(deletions, forKey: "deletions")
        try values.encode(changedFiles, forKey: "changed_files")
    }
}
