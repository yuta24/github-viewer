// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AuthenticationToken: Codable {
    /// The token used for authentication
    ///
    /// Example: "v1.1f699f1069f60xxx"
    public var token: String
    /// The time this token expires
    ///
    /// Example: "2016-07-11T22:14:10Z"
    public var expiresAt: Date
    /// Example:
    ///
    /// {
    ///   "deployments" : "write",
    ///   "issues" : "read"
    /// }
    public var permissions: [String: AnyJSON]?
    /// The repositories this token has access to
    public var repositories: [Repository]?
    /// Example: "config.yaml"
    public var singleFile: String?
    /// Describe whether all repositories have been selected or there's a selection involved
    public var repositorySelection: RepositorySelection?

    /// Describe whether all repositories have been selected or there's a selection involved
    public enum RepositorySelection: String, Codable, CaseIterable {
        case all
        case selected
    }

    public init(token: String, expiresAt: Date, permissions: [String: AnyJSON]? = nil, repositories: [Repository]? = nil, singleFile: String? = nil, repositorySelection: RepositorySelection? = nil) {
        self.token = token
        self.expiresAt = expiresAt
        self.permissions = permissions
        self.repositories = repositories
        self.singleFile = singleFile
        self.repositorySelection = repositorySelection
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.token = try values.decode(String.self, forKey: "token")
        self.expiresAt = try values.decode(Date.self, forKey: "expires_at")
        self.permissions = try values.decodeIfPresent([String: AnyJSON].self, forKey: "permissions")
        self.repositories = try values.decodeIfPresent([Repository].self, forKey: "repositories")
        self.singleFile = try values.decodeIfPresent(String.self, forKey: "single_file")
        self.repositorySelection = try values.decodeIfPresent(RepositorySelection.self, forKey: "repository_selection")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(token, forKey: "token")
        try values.encode(expiresAt, forKey: "expires_at")
        try values.encodeIfPresent(permissions, forKey: "permissions")
        try values.encodeIfPresent(repositories, forKey: "repositories")
        try values.encodeIfPresent(singleFile, forKey: "single_file")
        try values.encodeIfPresent(repositorySelection, forKey: "repository_selection")
    }
}
