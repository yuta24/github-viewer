// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Team Simple
///
/// Groups of organization members that gives permissions on specified repositories.
public struct NullableTeamSimple: Codable, Identifiable {
    /// Unique identifier of the team
    public var id: Int
    /// Example: "MDQ6VGVhbTE="
    public var nodeID: String
    /// URL for the team
    ///
    /// Example: "https://api.github.com/organizations/1/team/1"
    public var url: URL
    /// Example: "https://api.github.com/organizations/1/team/1/members{/member}"
    public var membersURL: String
    /// Name of the team
    ///
    /// Example: "Justice League"
    public var name: String
    /// Description of the team
    ///
    /// Example: "A great team."
    public var description: String?
    /// Permission that the team will have for its repositories
    ///
    /// Example: "admin"
    public var permission: String
    /// The level of privacy this team should have
    ///
    /// Example: "closed"
    public var privacy: String?
    /// Example: "https://github.com/orgs/rails/teams/core"
    public var htmlURL: URL
    /// Example: "https://api.github.com/organizations/1/team/1/repos"
    public var repositoriesURL: URL
    /// Example: "justice-league"
    public var slug: String
    /// Distinguished Name (DN) that team maps to within LDAP environment
    ///
    /// Example: "uid=example,ou=users,dc=github,dc=com"
    public var ldapDn: String?

    public init(id: Int, nodeID: String, url: URL, membersURL: String, name: String, description: String? = nil, permission: String, privacy: String? = nil, htmlURL: URL, repositoriesURL: URL, slug: String, ldapDn: String? = nil) {
        self.id = id
        self.nodeID = nodeID
        self.url = url
        self.membersURL = membersURL
        self.name = name
        self.description = description
        self.permission = permission
        self.privacy = privacy
        self.htmlURL = htmlURL
        self.repositoriesURL = repositoriesURL
        self.slug = slug
        self.ldapDn = ldapDn
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.url = try values.decode(URL.self, forKey: "url")
        self.membersURL = try values.decode(String.self, forKey: "members_url")
        self.name = try values.decode(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.permission = try values.decode(String.self, forKey: "permission")
        self.privacy = try values.decodeIfPresent(String.self, forKey: "privacy")
        self.htmlURL = try values.decode(URL.self, forKey: "html_url")
        self.repositoriesURL = try values.decode(URL.self, forKey: "repositories_url")
        self.slug = try values.decode(String.self, forKey: "slug")
        self.ldapDn = try values.decodeIfPresent(String.self, forKey: "ldap_dn")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(url, forKey: "url")
        try values.encode(membersURL, forKey: "members_url")
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(permission, forKey: "permission")
        try values.encodeIfPresent(privacy, forKey: "privacy")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encode(repositoriesURL, forKey: "repositories_url")
        try values.encode(slug, forKey: "slug")
        try values.encodeIfPresent(ldapDn, forKey: "ldap_dn")
    }
}
