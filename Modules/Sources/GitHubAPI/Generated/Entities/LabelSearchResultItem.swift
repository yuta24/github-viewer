// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct LabelSearchResultItem: Codable, Identifiable {
    public var id: Int
    public var nodeID: String
    public var url: URL
    public var name: String
    public var color: String
    public var isDefault: Bool
    public var description: String?
    public var score: Double
    /// Search Result Text Matches
    public var textMatches: [SearchResultTextMatch]?

    public init(id: Int, nodeID: String, url: URL, name: String, color: String, isDefault: Bool, description: String? = nil, score: Double, textMatches: [SearchResultTextMatch]? = nil) {
        self.id = id
        self.nodeID = nodeID
        self.url = url
        self.name = name
        self.color = color
        self.isDefault = isDefault
        self.description = description
        self.score = score
        self.textMatches = textMatches
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.url = try values.decode(URL.self, forKey: "url")
        self.name = try values.decode(String.self, forKey: "name")
        self.color = try values.decode(String.self, forKey: "color")
        self.isDefault = try values.decode(Bool.self, forKey: "default")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.score = try values.decode(Double.self, forKey: "score")
        self.textMatches = try values.decodeIfPresent([SearchResultTextMatch].self, forKey: "text_matches")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(url, forKey: "url")
        try values.encode(name, forKey: "name")
        try values.encode(color, forKey: "color")
        try values.encode(isDefault, forKey: "default")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(score, forKey: "score")
        try values.encodeIfPresent(textMatches, forKey: "text_matches")
    }
}
