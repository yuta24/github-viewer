// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct OrganizationFull: Codable, Identifiable {
    /// Example: "github"
    public var login: String
    public var id: Int
    /// Example: "MDEyOk9yZ2FuaXphdGlvbjE="
    public var nodeID: String
    /// Example: "https://api.github.com/orgs/github"
    public var url: URL
    /// Example: "https://api.github.com/orgs/github/repos"
    public var reposURL: URL
    /// Example: "https://api.github.com/orgs/github/events"
    public var eventsURL: URL
    /// Example: "https://api.github.com/orgs/github/hooks"
    public var hooksURL: String
    /// Example: "https://api.github.com/orgs/github/issues"
    public var issuesURL: String
    /// Example: "https://api.github.com/orgs/github/members{/member}"
    public var membersURL: String
    /// Example: "https://api.github.com/orgs/github/public_members{/member}"
    public var publicMembersURL: String
    /// Example: "https://github.com/images/error/octocat_happy.gif"
    public var avatarURL: String
    /// Example: "A great organization"
    public var description: String?
    /// Example: "github"
    public var name: String?
    /// Example: "GitHub"
    public var company: String?
    /// Example: "https://github.com/blog"
    public var blog: URL?
    /// Example: "San Francisco"
    public var location: String?
    /// Example: "octocat@github.com"
    public var email: String?
    /// Example: "github"
    public var twitterUsername: String?
    /// Example: true
    public var isVerified: Bool?
    /// Example: true
    public var hasOrganizationProjects: Bool
    /// Example: true
    public var hasRepositoryProjects: Bool
    public var publicRepos: Int
    public var publicGists: Int
    /// Example: 20
    public var followers: Int
    public var following: Int
    /// Example: "https://github.com/octocat"
    public var htmlURL: URL
    /// Example: "2008-01-14T04:33:35Z"
    public var createdAt: Date
    /// Example: "Organization"
    public var type: String
    /// Example: 100
    public var totalPrivateRepos: Int?
    /// Example: 100
    public var ownedPrivateRepos: Int?
    /// Example: 81
    public var privateGists: Int?
    /// Example: 10000
    public var diskUsage: Int?
    public var collaborators: Int?
    /// Example: "org@example.com"
    public var billingEmail: String?
    public var plan: Plan?
    public var defaultRepositoryPermission: String?
    /// Example: true
    public var membersCanCreateRepositories: Bool?
    /// Example: true
    public var isTwoFactorRequirementEnabled: Bool?
    /// Example: "all"
    public var membersAllowedRepositoryCreationType: String?
    /// Example: true
    public var membersCanCreatePublicRepositories: Bool?
    /// Example: true
    public var membersCanCreatePrivateRepositories: Bool?
    /// Example: true
    public var membersCanCreateInternalRepositories: Bool?
    /// Example: true
    public var membersCanCreatePages: Bool?
    /// Example: true
    public var membersCanCreatePublicPages: Bool?
    /// Example: true
    public var membersCanCreatePrivatePages: Bool?
    /// Example: false
    public var membersCanForkPrivateRepositories: Bool?
    /// Example: false
    public var isWebCommitSignoffRequired: Bool?
    public var updatedAt: Date
    /// Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
    /// 
    /// This field is only visible to organization owners or members of a team with the security manager role.
    ///
    /// Example: false
    public var isAdvancedSecurityEnabledForNewRepositories: Bool?
    /// Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
    /// this organization.
    /// 
    /// This field is only visible to organization owners or members of a team with the security manager role.
    ///
    /// Example: false
    public var isDependabotAlertsEnabledForNewRepositories: Bool?
    /// Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
    /// to this organization.
    /// 
    /// This field is only visible to organization owners or members of a team with the security manager role.
    ///
    /// Example: false
    public var isDependabotSecurityUpdatesEnabledForNewRepositories: Bool?
    /// Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
    /// organization.
    /// 
    /// This field is only visible to organization owners or members of a team with the security manager role.
    ///
    /// Example: false
    public var isDependencyGraphEnabledForNewRepositories: Bool?
    /// Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
    /// organization.
    /// 
    /// This field is only visible to organization owners or members of a team with the security manager role.
    ///
    /// Example: false
    public var isSecretScanningEnabledForNewRepositories: Bool?
    /// Whether secret scanning push protection is automatically enabled for new repositories and repositories
    /// transferred to this organization.
    /// 
    /// This field is only visible to organization owners or members of a team with the security manager role.
    ///
    /// Example: false
    public var isSecretScanningPushProtectionEnabledForNewRepositories: Bool?

    public struct Plan: Codable {
        public var name: String
        public var space: Int
        public var privateRepos: Int
        public var filledSeats: Int?
        public var seats: Int?

        public init(name: String, space: Int, privateRepos: Int, filledSeats: Int? = nil, seats: Int? = nil) {
            self.name = name
            self.space = space
            self.privateRepos = privateRepos
            self.filledSeats = filledSeats
            self.seats = seats
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.name = try values.decode(String.self, forKey: "name")
            self.space = try values.decode(Int.self, forKey: "space")
            self.privateRepos = try values.decode(Int.self, forKey: "private_repos")
            self.filledSeats = try values.decodeIfPresent(Int.self, forKey: "filled_seats")
            self.seats = try values.decodeIfPresent(Int.self, forKey: "seats")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(name, forKey: "name")
            try values.encode(space, forKey: "space")
            try values.encode(privateRepos, forKey: "private_repos")
            try values.encodeIfPresent(filledSeats, forKey: "filled_seats")
            try values.encodeIfPresent(seats, forKey: "seats")
        }
    }

    public init(login: String, id: Int, nodeID: String, url: URL, reposURL: URL, eventsURL: URL, hooksURL: String, issuesURL: String, membersURL: String, publicMembersURL: String, avatarURL: String, description: String? = nil, name: String? = nil, company: String? = nil, blog: URL? = nil, location: String? = nil, email: String? = nil, twitterUsername: String? = nil, isVerified: Bool? = nil, hasOrganizationProjects: Bool, hasRepositoryProjects: Bool, publicRepos: Int, publicGists: Int, followers: Int, following: Int, htmlURL: URL, createdAt: Date, type: String, totalPrivateRepos: Int? = nil, ownedPrivateRepos: Int? = nil, privateGists: Int? = nil, diskUsage: Int? = nil, collaborators: Int? = nil, billingEmail: String? = nil, plan: Plan? = nil, defaultRepositoryPermission: String? = nil, membersCanCreateRepositories: Bool? = nil, isTwoFactorRequirementEnabled: Bool? = nil, membersAllowedRepositoryCreationType: String? = nil, membersCanCreatePublicRepositories: Bool? = nil, membersCanCreatePrivateRepositories: Bool? = nil, membersCanCreateInternalRepositories: Bool? = nil, membersCanCreatePages: Bool? = nil, membersCanCreatePublicPages: Bool? = nil, membersCanCreatePrivatePages: Bool? = nil, membersCanForkPrivateRepositories: Bool? = nil, isWebCommitSignoffRequired: Bool? = nil, updatedAt: Date, isAdvancedSecurityEnabledForNewRepositories: Bool? = nil, isDependabotAlertsEnabledForNewRepositories: Bool? = nil, isDependabotSecurityUpdatesEnabledForNewRepositories: Bool? = nil, isDependencyGraphEnabledForNewRepositories: Bool? = nil, isSecretScanningEnabledForNewRepositories: Bool? = nil, isSecretScanningPushProtectionEnabledForNewRepositories: Bool? = nil) {
        self.login = login
        self.id = id
        self.nodeID = nodeID
        self.url = url
        self.reposURL = reposURL
        self.eventsURL = eventsURL
        self.hooksURL = hooksURL
        self.issuesURL = issuesURL
        self.membersURL = membersURL
        self.publicMembersURL = publicMembersURL
        self.avatarURL = avatarURL
        self.description = description
        self.name = name
        self.company = company
        self.blog = blog
        self.location = location
        self.email = email
        self.twitterUsername = twitterUsername
        self.isVerified = isVerified
        self.hasOrganizationProjects = hasOrganizationProjects
        self.hasRepositoryProjects = hasRepositoryProjects
        self.publicRepos = publicRepos
        self.publicGists = publicGists
        self.followers = followers
        self.following = following
        self.htmlURL = htmlURL
        self.createdAt = createdAt
        self.type = type
        self.totalPrivateRepos = totalPrivateRepos
        self.ownedPrivateRepos = ownedPrivateRepos
        self.privateGists = privateGists
        self.diskUsage = diskUsage
        self.collaborators = collaborators
        self.billingEmail = billingEmail
        self.plan = plan
        self.defaultRepositoryPermission = defaultRepositoryPermission
        self.membersCanCreateRepositories = membersCanCreateRepositories
        self.isTwoFactorRequirementEnabled = isTwoFactorRequirementEnabled
        self.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType
        self.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories
        self.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories
        self.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories
        self.membersCanCreatePages = membersCanCreatePages
        self.membersCanCreatePublicPages = membersCanCreatePublicPages
        self.membersCanCreatePrivatePages = membersCanCreatePrivatePages
        self.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories
        self.isWebCommitSignoffRequired = isWebCommitSignoffRequired
        self.updatedAt = updatedAt
        self.isAdvancedSecurityEnabledForNewRepositories = isAdvancedSecurityEnabledForNewRepositories
        self.isDependabotAlertsEnabledForNewRepositories = isDependabotAlertsEnabledForNewRepositories
        self.isDependabotSecurityUpdatesEnabledForNewRepositories = isDependabotSecurityUpdatesEnabledForNewRepositories
        self.isDependencyGraphEnabledForNewRepositories = isDependencyGraphEnabledForNewRepositories
        self.isSecretScanningEnabledForNewRepositories = isSecretScanningEnabledForNewRepositories
        self.isSecretScanningPushProtectionEnabledForNewRepositories = isSecretScanningPushProtectionEnabledForNewRepositories
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.login = try values.decode(String.self, forKey: "login")
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.url = try values.decode(URL.self, forKey: "url")
        self.reposURL = try values.decode(URL.self, forKey: "repos_url")
        self.eventsURL = try values.decode(URL.self, forKey: "events_url")
        self.hooksURL = try values.decode(String.self, forKey: "hooks_url")
        self.issuesURL = try values.decode(String.self, forKey: "issues_url")
        self.membersURL = try values.decode(String.self, forKey: "members_url")
        self.publicMembersURL = try values.decode(String.self, forKey: "public_members_url")
        self.avatarURL = try values.decode(String.self, forKey: "avatar_url")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.company = try values.decodeIfPresent(String.self, forKey: "company")
        self.blog = try values.decodeIfPresent(URL.self, forKey: "blog")
        self.location = try values.decodeIfPresent(String.self, forKey: "location")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.twitterUsername = try values.decodeIfPresent(String.self, forKey: "twitter_username")
        self.isVerified = try values.decodeIfPresent(Bool.self, forKey: "is_verified")
        self.hasOrganizationProjects = try values.decode(Bool.self, forKey: "has_organization_projects")
        self.hasRepositoryProjects = try values.decode(Bool.self, forKey: "has_repository_projects")
        self.publicRepos = try values.decode(Int.self, forKey: "public_repos")
        self.publicGists = try values.decode(Int.self, forKey: "public_gists")
        self.followers = try values.decode(Int.self, forKey: "followers")
        self.following = try values.decode(Int.self, forKey: "following")
        self.htmlURL = try values.decode(URL.self, forKey: "html_url")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.type = try values.decode(String.self, forKey: "type")
        self.totalPrivateRepos = try values.decodeIfPresent(Int.self, forKey: "total_private_repos")
        self.ownedPrivateRepos = try values.decodeIfPresent(Int.self, forKey: "owned_private_repos")
        self.privateGists = try values.decodeIfPresent(Int.self, forKey: "private_gists")
        self.diskUsage = try values.decodeIfPresent(Int.self, forKey: "disk_usage")
        self.collaborators = try values.decodeIfPresent(Int.self, forKey: "collaborators")
        self.billingEmail = try values.decodeIfPresent(String.self, forKey: "billing_email")
        self.plan = try values.decodeIfPresent(Plan.self, forKey: "plan")
        self.defaultRepositoryPermission = try values.decodeIfPresent(String.self, forKey: "default_repository_permission")
        self.membersCanCreateRepositories = try values.decodeIfPresent(Bool.self, forKey: "members_can_create_repositories")
        self.isTwoFactorRequirementEnabled = try values.decodeIfPresent(Bool.self, forKey: "two_factor_requirement_enabled")
        self.membersAllowedRepositoryCreationType = try values.decodeIfPresent(String.self, forKey: "members_allowed_repository_creation_type")
        self.membersCanCreatePublicRepositories = try values.decodeIfPresent(Bool.self, forKey: "members_can_create_public_repositories")
        self.membersCanCreatePrivateRepositories = try values.decodeIfPresent(Bool.self, forKey: "members_can_create_private_repositories")
        self.membersCanCreateInternalRepositories = try values.decodeIfPresent(Bool.self, forKey: "members_can_create_internal_repositories")
        self.membersCanCreatePages = try values.decodeIfPresent(Bool.self, forKey: "members_can_create_pages")
        self.membersCanCreatePublicPages = try values.decodeIfPresent(Bool.self, forKey: "members_can_create_public_pages")
        self.membersCanCreatePrivatePages = try values.decodeIfPresent(Bool.self, forKey: "members_can_create_private_pages")
        self.membersCanForkPrivateRepositories = try values.decodeIfPresent(Bool.self, forKey: "members_can_fork_private_repositories")
        self.isWebCommitSignoffRequired = try values.decodeIfPresent(Bool.self, forKey: "web_commit_signoff_required")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.isAdvancedSecurityEnabledForNewRepositories = try values.decodeIfPresent(Bool.self, forKey: "advanced_security_enabled_for_new_repositories")
        self.isDependabotAlertsEnabledForNewRepositories = try values.decodeIfPresent(Bool.self, forKey: "dependabot_alerts_enabled_for_new_repositories")
        self.isDependabotSecurityUpdatesEnabledForNewRepositories = try values.decodeIfPresent(Bool.self, forKey: "dependabot_security_updates_enabled_for_new_repositories")
        self.isDependencyGraphEnabledForNewRepositories = try values.decodeIfPresent(Bool.self, forKey: "dependency_graph_enabled_for_new_repositories")
        self.isSecretScanningEnabledForNewRepositories = try values.decodeIfPresent(Bool.self, forKey: "secret_scanning_enabled_for_new_repositories")
        self.isSecretScanningPushProtectionEnabledForNewRepositories = try values.decodeIfPresent(Bool.self, forKey: "secret_scanning_push_protection_enabled_for_new_repositories")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(login, forKey: "login")
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(url, forKey: "url")
        try values.encode(reposURL, forKey: "repos_url")
        try values.encode(eventsURL, forKey: "events_url")
        try values.encode(hooksURL, forKey: "hooks_url")
        try values.encode(issuesURL, forKey: "issues_url")
        try values.encode(membersURL, forKey: "members_url")
        try values.encode(publicMembersURL, forKey: "public_members_url")
        try values.encode(avatarURL, forKey: "avatar_url")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(company, forKey: "company")
        try values.encodeIfPresent(blog, forKey: "blog")
        try values.encodeIfPresent(location, forKey: "location")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encodeIfPresent(twitterUsername, forKey: "twitter_username")
        try values.encodeIfPresent(isVerified, forKey: "is_verified")
        try values.encode(hasOrganizationProjects, forKey: "has_organization_projects")
        try values.encode(hasRepositoryProjects, forKey: "has_repository_projects")
        try values.encode(publicRepos, forKey: "public_repos")
        try values.encode(publicGists, forKey: "public_gists")
        try values.encode(followers, forKey: "followers")
        try values.encode(following, forKey: "following")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(totalPrivateRepos, forKey: "total_private_repos")
        try values.encodeIfPresent(ownedPrivateRepos, forKey: "owned_private_repos")
        try values.encodeIfPresent(privateGists, forKey: "private_gists")
        try values.encodeIfPresent(diskUsage, forKey: "disk_usage")
        try values.encodeIfPresent(collaborators, forKey: "collaborators")
        try values.encodeIfPresent(billingEmail, forKey: "billing_email")
        try values.encodeIfPresent(plan, forKey: "plan")
        try values.encodeIfPresent(defaultRepositoryPermission, forKey: "default_repository_permission")
        try values.encodeIfPresent(membersCanCreateRepositories, forKey: "members_can_create_repositories")
        try values.encodeIfPresent(isTwoFactorRequirementEnabled, forKey: "two_factor_requirement_enabled")
        try values.encodeIfPresent(membersAllowedRepositoryCreationType, forKey: "members_allowed_repository_creation_type")
        try values.encodeIfPresent(membersCanCreatePublicRepositories, forKey: "members_can_create_public_repositories")
        try values.encodeIfPresent(membersCanCreatePrivateRepositories, forKey: "members_can_create_private_repositories")
        try values.encodeIfPresent(membersCanCreateInternalRepositories, forKey: "members_can_create_internal_repositories")
        try values.encodeIfPresent(membersCanCreatePages, forKey: "members_can_create_pages")
        try values.encodeIfPresent(membersCanCreatePublicPages, forKey: "members_can_create_public_pages")
        try values.encodeIfPresent(membersCanCreatePrivatePages, forKey: "members_can_create_private_pages")
        try values.encodeIfPresent(membersCanForkPrivateRepositories, forKey: "members_can_fork_private_repositories")
        try values.encodeIfPresent(isWebCommitSignoffRequired, forKey: "web_commit_signoff_required")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encodeIfPresent(isAdvancedSecurityEnabledForNewRepositories, forKey: "advanced_security_enabled_for_new_repositories")
        try values.encodeIfPresent(isDependabotAlertsEnabledForNewRepositories, forKey: "dependabot_alerts_enabled_for_new_repositories")
        try values.encodeIfPresent(isDependabotSecurityUpdatesEnabledForNewRepositories, forKey: "dependabot_security_updates_enabled_for_new_repositories")
        try values.encodeIfPresent(isDependencyGraphEnabledForNewRepositories, forKey: "dependency_graph_enabled_for_new_repositories")
        try values.encodeIfPresent(isSecretScanningEnabledForNewRepositories, forKey: "secret_scanning_enabled_for_new_repositories")
        try values.encodeIfPresent(isSecretScanningPushProtectionEnabledForNewRepositories, forKey: "secret_scanning_push_protection_enabled_for_new_repositories")
    }
}
