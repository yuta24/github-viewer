// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Authentication token for a GitHub App installed on a user or org.
public struct InstallationToken: Codable {
    public var token: String
    public var expiresAt: String
    /// App Permissions
    ///
    /// The permissions granted to the user-to-server access token.
    ///
    /// Example:
    ///
    /// {
    ///   "contents" : "read",
    ///   "deployments" : "write",
    ///   "issues" : "read",
    ///   "single_file" : "read"
    /// }
    public var permissions: AppPermissions?
    public var repositorySelection: RepositorySelection?
    public var repositories: [Repository]?
    /// Example: "README.md"
    public var singleFile: String?
    /// Example: true
    public var hasMultipleSingleFiles: Bool?
    /// Example: ["config.yml", ".github/issue_TEMPLATE.md"]
    public var singleFilePaths: [String]?

    public enum RepositorySelection: String, Codable, CaseIterable {
        case all
        case selected
    }

    public init(token: String, expiresAt: String, permissions: AppPermissions? = nil, repositorySelection: RepositorySelection? = nil, repositories: [Repository]? = nil, singleFile: String? = nil, hasMultipleSingleFiles: Bool? = nil, singleFilePaths: [String]? = nil) {
        self.token = token
        self.expiresAt = expiresAt
        self.permissions = permissions
        self.repositorySelection = repositorySelection
        self.repositories = repositories
        self.singleFile = singleFile
        self.hasMultipleSingleFiles = hasMultipleSingleFiles
        self.singleFilePaths = singleFilePaths
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.token = try values.decode(String.self, forKey: "token")
        self.expiresAt = try values.decode(String.self, forKey: "expires_at")
        self.permissions = try values.decodeIfPresent(AppPermissions.self, forKey: "permissions")
        self.repositorySelection = try values.decodeIfPresent(RepositorySelection.self, forKey: "repository_selection")
        self.repositories = try values.decodeIfPresent([Repository].self, forKey: "repositories")
        self.singleFile = try values.decodeIfPresent(String.self, forKey: "single_file")
        self.hasMultipleSingleFiles = try values.decodeIfPresent(Bool.self, forKey: "has_multiple_single_files")
        self.singleFilePaths = try values.decodeIfPresent([String].self, forKey: "single_file_paths")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(token, forKey: "token")
        try values.encode(expiresAt, forKey: "expires_at")
        try values.encodeIfPresent(permissions, forKey: "permissions")
        try values.encodeIfPresent(repositorySelection, forKey: "repository_selection")
        try values.encodeIfPresent(repositories, forKey: "repositories")
        try values.encodeIfPresent(singleFile, forKey: "single_file")
        try values.encodeIfPresent(hasMultipleSingleFiles, forKey: "has_multiple_single_files")
        try values.encodeIfPresent(singleFilePaths, forKey: "single_file_paths")
    }
}
