// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SecurityAndAnalysis: Codable {
    public var advancedSecurity: AdvancedSecurity?
    public var secretScanning: SecretScanning?
    public var secretScanningPushProtection: SecretScanningPushProtection?

    public struct AdvancedSecurity: Codable {
        public var status: Status?

        public enum Status: String, Codable, CaseIterable {
            case enabled
            case disabled
        }

        public init(status: Status? = nil) {
            self.status = status
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.status = try values.decodeIfPresent(Status.self, forKey: "status")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(status, forKey: "status")
        }
    }

    public struct SecretScanning: Codable {
        public var status: Status?

        public enum Status: String, Codable, CaseIterable {
            case enabled
            case disabled
        }

        public init(status: Status? = nil) {
            self.status = status
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.status = try values.decodeIfPresent(Status.self, forKey: "status")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(status, forKey: "status")
        }
    }

    public struct SecretScanningPushProtection: Codable {
        public var status: Status?

        public enum Status: String, Codable, CaseIterable {
            case enabled
            case disabled
        }

        public init(status: Status? = nil) {
            self.status = status
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.status = try values.decodeIfPresent(Status.self, forKey: "status")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(status, forKey: "status")
        }
    }

    public init(advancedSecurity: AdvancedSecurity? = nil, secretScanning: SecretScanning? = nil, secretScanningPushProtection: SecretScanningPushProtection? = nil) {
        self.advancedSecurity = advancedSecurity
        self.secretScanning = secretScanning
        self.secretScanningPushProtection = secretScanningPushProtection
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.advancedSecurity = try values.decodeIfPresent(AdvancedSecurity.self, forKey: "advanced_security")
        self.secretScanning = try values.decodeIfPresent(SecretScanning.self, forKey: "secret_scanning")
        self.secretScanningPushProtection = try values.decodeIfPresent(SecretScanningPushProtection.self, forKey: "secret_scanning_push_protection")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(advancedSecurity, forKey: "advanced_security")
        try values.encodeIfPresent(secretScanning, forKey: "secret_scanning")
        try values.encodeIfPresent(secretScanningPushProtection, forKey: "secret_scanning_push_protection")
    }
}
