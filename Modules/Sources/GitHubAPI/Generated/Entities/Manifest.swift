// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Manifest: Codable {
    /// The name of the manifest.
    ///
    /// Example: "package-lock.json"
    public var name: String
    public var file: File?
    /// User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
    public var metadata: [String: Metadatum]?
    /// A collection of resolved package dependencies.
    public var resolved: [String: Dependency]?

    public struct File: Codable {
        /// The path of the manifest file relative to the root of the Git repository.
        ///
        /// Example: "/src/build/package-lock.json"
        public var sourceLocation: String?

        public init(sourceLocation: String? = nil) {
            self.sourceLocation = sourceLocation
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.sourceLocation = try values.decodeIfPresent(String.self, forKey: "source_location")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(sourceLocation, forKey: "source_location")
        }
    }

    public init(name: String, file: File? = nil, metadata: [String: Metadatum]? = nil, resolved: [String: Dependency]? = nil) {
        self.name = name
        self.file = file
        self.metadata = metadata
        self.resolved = resolved
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decode(String.self, forKey: "name")
        self.file = try values.decodeIfPresent(File.self, forKey: "file")
        self.metadata = try values.decodeIfPresent([String: Metadatum].self, forKey: "metadata")
        self.resolved = try values.decodeIfPresent([String: Dependency].self, forKey: "resolved")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(file, forKey: "file")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encodeIfPresent(resolved, forKey: "resolved")
    }
}
