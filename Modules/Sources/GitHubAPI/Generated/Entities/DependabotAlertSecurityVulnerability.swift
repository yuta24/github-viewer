// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The details of the vulnerability of a security advisory.
public struct DependabotAlertSecurityVulnerability: Codable {
    /// The details of the vulnerable package.
    public var package: DependabotAlertPackage?
    public var severity: String?
    public var vulnerableVersionRange: String?
    public var firstPatchedVersion: FirstPatchedVersion?

    public struct FirstPatchedVersion: Codable {
        public var identifier: String?

        public init(identifier: String? = nil) {
            self.identifier = identifier
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.identifier = try values.decodeIfPresent(String.self, forKey: "identifier")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(identifier, forKey: "identifier")
        }
    }

    public init(package: DependabotAlertPackage? = nil, severity: String? = nil, vulnerableVersionRange: String? = nil, firstPatchedVersion: FirstPatchedVersion? = nil) {
        self.package = package
        self.severity = severity
        self.vulnerableVersionRange = vulnerableVersionRange
        self.firstPatchedVersion = firstPatchedVersion
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.package = try values.decodeIfPresent(DependabotAlertPackage.self, forKey: "package")
        self.severity = try values.decodeIfPresent(String.self, forKey: "severity")
        self.vulnerableVersionRange = try values.decodeIfPresent(String.self, forKey: "vulnerable_version_range")
        self.firstPatchedVersion = try values.decodeIfPresent(FirstPatchedVersion.self, forKey: "first_patched_version")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(package, forKey: "package")
        try values.encodeIfPresent(severity, forKey: "severity")
        try values.encodeIfPresent(vulnerableVersionRange, forKey: "vulnerable_version_range")
        try values.encodeIfPresent(firstPatchedVersion, forKey: "first_patched_version")
    }
}
