// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CommitSearchResultItem: Codable {
    public var url: URL
    public var sha: String
    public var htmlURL: URL
    public var commentsURL: URL
    public var commit: Commit
    /// Simple User
    public var author: NullableSimpleUser?
    /// Git User
    ///
    /// Metaproperties for Git author/committer information.
    public var committer: NullableGitUser?
    public var parents: [Parent]
    /// Minimal Repository
    public var repository: MinimalRepository
    public var score: Double
    public var nodeID: String
    /// Search Result Text Matches
    public var textMatches: [SearchResultTextMatch]?

    public struct Commit: Codable {
        public var author: Author
        /// Git User
        ///
        /// Metaproperties for Git author/committer information.
        public var committer: NullableGitUser?
        public var commentCount: Int
        public var message: String
        public var tree: Tree
        public var url: URL
        public var verification: Verification?

        public struct Author: Codable {
            public var name: String
            public var email: String
            public var date: Date

            public init(name: String, email: String, date: Date) {
                self.name = name
                self.email = email
                self.date = date
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.name = try values.decode(String.self, forKey: "name")
                self.email = try values.decode(String.self, forKey: "email")
                self.date = try values.decode(Date.self, forKey: "date")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(name, forKey: "name")
                try values.encode(email, forKey: "email")
                try values.encode(date, forKey: "date")
            }
        }

        public struct Tree: Codable {
            public var sha: String
            public var url: URL

            public init(sha: String, url: URL) {
                self.sha = sha
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.sha = try values.decode(String.self, forKey: "sha")
                self.url = try values.decode(URL.self, forKey: "url")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(sha, forKey: "sha")
                try values.encode(url, forKey: "url")
            }
        }

        public init(author: Author, committer: NullableGitUser? = nil, commentCount: Int, message: String, tree: Tree, url: URL, verification: Verification? = nil) {
            self.author = author
            self.committer = committer
            self.commentCount = commentCount
            self.message = message
            self.tree = tree
            self.url = url
            self.verification = verification
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.author = try values.decode(Author.self, forKey: "author")
            self.committer = try values.decodeIfPresent(NullableGitUser.self, forKey: "committer")
            self.commentCount = try values.decode(Int.self, forKey: "comment_count")
            self.message = try values.decode(String.self, forKey: "message")
            self.tree = try values.decode(Tree.self, forKey: "tree")
            self.url = try values.decode(URL.self, forKey: "url")
            self.verification = try values.decodeIfPresent(Verification.self, forKey: "verification")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(author, forKey: "author")
            try values.encodeIfPresent(committer, forKey: "committer")
            try values.encode(commentCount, forKey: "comment_count")
            try values.encode(message, forKey: "message")
            try values.encode(tree, forKey: "tree")
            try values.encode(url, forKey: "url")
            try values.encodeIfPresent(verification, forKey: "verification")
        }
    }

    public struct Parent: Codable {
        public var url: String?
        public var htmlURL: String?
        public var sha: String?

        public init(url: String? = nil, htmlURL: String? = nil, sha: String? = nil) {
            self.url = url
            self.htmlURL = htmlURL
            self.sha = sha
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.url = try values.decodeIfPresent(String.self, forKey: "url")
            self.htmlURL = try values.decodeIfPresent(String.self, forKey: "html_url")
            self.sha = try values.decodeIfPresent(String.self, forKey: "sha")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(url, forKey: "url")
            try values.encodeIfPresent(htmlURL, forKey: "html_url")
            try values.encodeIfPresent(sha, forKey: "sha")
        }
    }

    public init(url: URL, sha: String, htmlURL: URL, commentsURL: URL, commit: Commit, author: NullableSimpleUser? = nil, committer: NullableGitUser? = nil, parents: [Parent], repository: MinimalRepository, score: Double, nodeID: String, textMatches: [SearchResultTextMatch]? = nil) {
        self.url = url
        self.sha = sha
        self.htmlURL = htmlURL
        self.commentsURL = commentsURL
        self.commit = commit
        self.author = author
        self.committer = committer
        self.parents = parents
        self.repository = repository
        self.score = score
        self.nodeID = nodeID
        self.textMatches = textMatches
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.url = try values.decode(URL.self, forKey: "url")
        self.sha = try values.decode(String.self, forKey: "sha")
        self.htmlURL = try values.decode(URL.self, forKey: "html_url")
        self.commentsURL = try values.decode(URL.self, forKey: "comments_url")
        self.commit = try values.decode(Commit.self, forKey: "commit")
        self.author = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "author")
        self.committer = try values.decodeIfPresent(NullableGitUser.self, forKey: "committer")
        self.parents = try values.decode([Parent].self, forKey: "parents")
        self.repository = try values.decode(MinimalRepository.self, forKey: "repository")
        self.score = try values.decode(Double.self, forKey: "score")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.textMatches = try values.decodeIfPresent([SearchResultTextMatch].self, forKey: "text_matches")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(url, forKey: "url")
        try values.encode(sha, forKey: "sha")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encode(commentsURL, forKey: "comments_url")
        try values.encode(commit, forKey: "commit")
        try values.encodeIfPresent(author, forKey: "author")
        try values.encodeIfPresent(committer, forKey: "committer")
        try values.encode(parents, forKey: "parents")
        try values.encode(repository, forKey: "repository")
        try values.encode(score, forKey: "score")
        try values.encode(nodeID, forKey: "node_id")
        try values.encodeIfPresent(textMatches, forKey: "text_matches")
    }
}
