// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CodeSearchResultItem: Codable {
    public var name: String
    public var path: String
    public var sha: String
    public var url: URL
    public var gitURL: URL
    public var htmlURL: URL
    /// Minimal Repository
    public var repository: MinimalRepository
    public var score: Double
    public var fileSize: Int?
    public var language: String?
    public var lastModifiedAt: Date?
    /// Example: ["73..77", "77..78"]
    public var lineNumbers: [String]?
    /// Search Result Text Matches
    public var textMatches: [SearchResultTextMatch]?

    public init(name: String, path: String, sha: String, url: URL, gitURL: URL, htmlURL: URL, repository: MinimalRepository, score: Double, fileSize: Int? = nil, language: String? = nil, lastModifiedAt: Date? = nil, lineNumbers: [String]? = nil, textMatches: [SearchResultTextMatch]? = nil) {
        self.name = name
        self.path = path
        self.sha = sha
        self.url = url
        self.gitURL = gitURL
        self.htmlURL = htmlURL
        self.repository = repository
        self.score = score
        self.fileSize = fileSize
        self.language = language
        self.lastModifiedAt = lastModifiedAt
        self.lineNumbers = lineNumbers
        self.textMatches = textMatches
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decode(String.self, forKey: "name")
        self.path = try values.decode(String.self, forKey: "path")
        self.sha = try values.decode(String.self, forKey: "sha")
        self.url = try values.decode(URL.self, forKey: "url")
        self.gitURL = try values.decode(URL.self, forKey: "git_url")
        self.htmlURL = try values.decode(URL.self, forKey: "html_url")
        self.repository = try values.decode(MinimalRepository.self, forKey: "repository")
        self.score = try values.decode(Double.self, forKey: "score")
        self.fileSize = try values.decodeIfPresent(Int.self, forKey: "file_size")
        self.language = try values.decodeIfPresent(String.self, forKey: "language")
        self.lastModifiedAt = try values.decodeIfPresent(Date.self, forKey: "last_modified_at")
        self.lineNumbers = try values.decodeIfPresent([String].self, forKey: "line_numbers")
        self.textMatches = try values.decodeIfPresent([SearchResultTextMatch].self, forKey: "text_matches")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(name, forKey: "name")
        try values.encode(path, forKey: "path")
        try values.encode(sha, forKey: "sha")
        try values.encode(url, forKey: "url")
        try values.encode(gitURL, forKey: "git_url")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encode(repository, forKey: "repository")
        try values.encode(score, forKey: "score")
        try values.encodeIfPresent(fileSize, forKey: "file_size")
        try values.encodeIfPresent(language, forKey: "language")
        try values.encodeIfPresent(lastModifiedAt, forKey: "last_modified_at")
        try values.encodeIfPresent(lineNumbers, forKey: "line_numbers")
        try values.encodeIfPresent(textMatches, forKey: "text_matches")
    }
}
