// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// An enterprise account
public struct Enterprise: Codable, Identifiable {
    /// A short description of the enterprise.
    public var description: String?
    /// Example: "https://github.com/enterprises/octo-business"
    public var htmlURL: URL
    /// The enterprise's website URL.
    public var websiteURL: URL?
    /// Unique identifier of the enterprise
    ///
    /// Example: 42
    public var id: Int
    /// Example: "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
    public var nodeID: String
    /// The name of the enterprise.
    ///
    /// Example: "Octo Business"
    public var name: String
    /// The slug url identifier for the enterprise.
    ///
    /// Example: "octo-business"
    public var slug: String
    /// Example: "2019-01-26T19:01:12Z"
    public var createdAt: Date?
    /// Example: "2019-01-26T19:14:43Z"
    public var updatedAt: Date?
    public var avatarURL: URL

    public init(description: String? = nil, htmlURL: URL, websiteURL: URL? = nil, id: Int, nodeID: String, name: String, slug: String, createdAt: Date? = nil, updatedAt: Date? = nil, avatarURL: URL) {
        self.description = description
        self.htmlURL = htmlURL
        self.websiteURL = websiteURL
        self.id = id
        self.nodeID = nodeID
        self.name = name
        self.slug = slug
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.avatarURL = avatarURL
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.htmlURL = try values.decode(URL.self, forKey: "html_url")
        self.websiteURL = try values.decodeIfPresent(URL.self, forKey: "website_url")
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.name = try values.decode(String.self, forKey: "name")
        self.slug = try values.decode(String.self, forKey: "slug")
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.updatedAt = try values.decodeIfPresent(Date.self, forKey: "updated_at")
        self.avatarURL = try values.decode(URL.self, forKey: "avatar_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encodeIfPresent(websiteURL, forKey: "website_url")
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(name, forKey: "name")
        try values.encode(slug, forKey: "slug")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(updatedAt, forKey: "updated_at")
        try values.encode(avatarURL, forKey: "avatar_url")
    }
}
