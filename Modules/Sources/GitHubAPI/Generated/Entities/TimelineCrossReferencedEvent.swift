// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct TimelineCrossReferencedEvent: Codable {
    public var event: String
    /// Simple User
    public var actor: SimpleUser?
    public var createdAt: Date
    public var updatedAt: Date
    public var source: Source

    public struct Source: Codable {
        public var type: String?
        /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
        public var issue: Issue?

        public init(type: String? = nil, issue: Issue? = nil) {
            self.type = type
            self.issue = issue
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.type = try values.decodeIfPresent(String.self, forKey: "type")
            self.issue = try values.decodeIfPresent(Issue.self, forKey: "issue")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(type, forKey: "type")
            try values.encodeIfPresent(issue, forKey: "issue")
        }
    }

    public init(event: String, actor: SimpleUser? = nil, createdAt: Date, updatedAt: Date, source: Source) {
        self.event = event
        self.actor = actor
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.source = source
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.event = try values.decode(String.self, forKey: "event")
        self.actor = try values.decodeIfPresent(SimpleUser.self, forKey: "actor")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.source = try values.decode(Source.self, forKey: "source")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(event, forKey: "event")
        try values.encodeIfPresent(actor, forKey: "actor")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encode(source, forKey: "source")
    }
}
