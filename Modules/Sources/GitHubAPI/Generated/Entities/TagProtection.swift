// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct TagProtection: Codable, Identifiable {
    public var id: Int?
    /// Example: "2011-01-26T19:01:12Z"
    public var createdAt: String?
    /// Example: "2011-01-26T19:01:12Z"
    public var updatedAt: String?
    /// Example: true
    public var isEnabled: Bool?
    /// Example: "v1.*"
    public var pattern: String

    public init(id: Int? = nil, createdAt: String? = nil, updatedAt: String? = nil, isEnabled: Bool? = nil, pattern: String) {
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.isEnabled = isEnabled
        self.pattern = pattern
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(Int.self, forKey: "id")
        self.createdAt = try values.decodeIfPresent(String.self, forKey: "created_at")
        self.updatedAt = try values.decodeIfPresent(String.self, forKey: "updated_at")
        self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "enabled")
        self.pattern = try values.decode(String.self, forKey: "pattern")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(updatedAt, forKey: "updated_at")
        try values.encodeIfPresent(isEnabled, forKey: "enabled")
        try values.encode(pattern, forKey: "pattern")
    }
}
