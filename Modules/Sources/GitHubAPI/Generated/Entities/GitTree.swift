// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The hierarchy between files in a Git repository.
public struct GitTree: Codable {
    public var sha: String
    public var url: URL
    public var isTruncated: Bool
    /// Objects specifying a tree structure
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "mode" : "100644",
    ///     "path" : "file.rb",
    ///     "properties" : {
    ///       "mode" : {
    ///         "type" : "string"
    ///       },
    ///       "path" : {
    ///         "type" : "string"
    ///       },
    ///       "sha" : {
    ///         "type" : "string"
    ///       },
    ///       "size" : {
    ///         "type" : "integer"
    ///       },
    ///       "type" : {
    ///         "type" : "string"
    ///       },
    ///       "url" : {
    ///         "type" : "string"
    ///       }
    ///     },
    ///     "required" : [
    ///       "path",
    ///       "mode",
    ///       "type",
    ///       "sha",
    ///       "url",
    ///       "size"
    ///     ],
    ///     "sha" : "44b4fc6d56897b048c772eb4087f854f46256132",
    ///     "size" : 30,
    ///     "type" : "blob",
    ///     "url" : "https:\/\/api.github.com\/repos\/octocat\/Hello-World\/git\/blobs\/44b4fc6d56897b048c772eb4087f854f46256132"
    ///   }
    /// ]
    public var tree: [TreeItem]

    public struct TreeItem: Codable {
        /// Example: "test/file.rb"
        public var path: String?
        /// Example: "040000"
        public var mode: String?
        /// Example: "tree"
        public var type: String?
        /// Example: "23f6827669e43831def8a7ad935069c8bd418261"
        public var sha: String?
        /// Example: 12
        public var size: Int?
        /// Example: "https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261"
        public var url: String?

        public init(path: String? = nil, mode: String? = nil, type: String? = nil, sha: String? = nil, size: Int? = nil, url: String? = nil) {
            self.path = path
            self.mode = mode
            self.type = type
            self.sha = sha
            self.size = size
            self.url = url
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.path = try values.decodeIfPresent(String.self, forKey: "path")
            self.mode = try values.decodeIfPresent(String.self, forKey: "mode")
            self.type = try values.decodeIfPresent(String.self, forKey: "type")
            self.sha = try values.decodeIfPresent(String.self, forKey: "sha")
            self.size = try values.decodeIfPresent(Int.self, forKey: "size")
            self.url = try values.decodeIfPresent(String.self, forKey: "url")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(path, forKey: "path")
            try values.encodeIfPresent(mode, forKey: "mode")
            try values.encodeIfPresent(type, forKey: "type")
            try values.encodeIfPresent(sha, forKey: "sha")
            try values.encodeIfPresent(size, forKey: "size")
            try values.encodeIfPresent(url, forKey: "url")
        }
    }

    public init(sha: String, url: URL, isTruncated: Bool, tree: [TreeItem]) {
        self.sha = sha
        self.url = url
        self.isTruncated = isTruncated
        self.tree = tree
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.sha = try values.decode(String.self, forKey: "sha")
        self.url = try values.decode(URL.self, forKey: "url")
        self.isTruncated = try values.decode(Bool.self, forKey: "truncated")
        self.tree = try values.decode([TreeItem].self, forKey: "tree")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(sha, forKey: "sha")
        try values.encode(url, forKey: "url")
        try values.encode(isTruncated, forKey: "truncated")
        try values.encode(tree, forKey: "tree")
    }
}
