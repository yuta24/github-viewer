// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Check suite configuration preferences for a repository.
public struct CheckSuitePreference: Codable {
    public var preferences: Preferences
    /// Minimal Repository
    public var repository: MinimalRepository

    public struct Preferences: Codable {
        public var autoTriggerChecks: [AutoTriggerCheck]?

        public struct AutoTriggerCheck: Codable {
            public var appID: Int
            public var isSetting: Bool

            public init(appID: Int, isSetting: Bool) {
                self.appID = appID
                self.isSetting = isSetting
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.appID = try values.decode(Int.self, forKey: "app_id")
                self.isSetting = try values.decode(Bool.self, forKey: "setting")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(appID, forKey: "app_id")
                try values.encode(isSetting, forKey: "setting")
            }
        }

        public init(autoTriggerChecks: [AutoTriggerCheck]? = nil) {
            self.autoTriggerChecks = autoTriggerChecks
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.autoTriggerChecks = try values.decodeIfPresent([AutoTriggerCheck].self, forKey: "auto_trigger_checks")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(autoTriggerChecks, forKey: "auto_trigger_checks")
        }
    }

    public init(preferences: Preferences, repository: MinimalRepository) {
        self.preferences = preferences
        self.repository = repository
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.preferences = try values.decode(Preferences.self, forKey: "preferences")
        self.repository = try values.decode(MinimalRepository.self, forKey: "repository")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(preferences, forKey: "preferences")
        try values.encode(repository, forKey: "repository")
    }
}
