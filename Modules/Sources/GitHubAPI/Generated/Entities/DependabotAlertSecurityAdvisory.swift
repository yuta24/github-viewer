// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The details of the security advisory, including summary, description, and severity.
public struct DependabotAlertSecurityAdvisory: Codable {
    public var ghsaID: String
    public var cveID: String?
    public var summary: String
    public var description: String
    public var severity: Severity
    public var identifiers: [Identifier]
    public var references: [Reference]
    public var cvss: Cvss
    public var cwes: [Cwe]
    public var publishedAt: Date
    public var updatedAt: Date
    public var vulnerabilities: [Vulnerability]
    public var withdrawnAt: Date?

    public enum Severity: String, Codable, CaseIterable {
        case low
        case medium
        case high
        case critical
    }

    public struct Identifier: Codable {
        public var type: `Type`
        public var value: String

        public enum `Type`: String, Codable, CaseIterable {
            case ghsa = "GHSA"
            case cve = "CVE"
        }

        public init(type: `Type`, value: String) {
            self.type = type
            self.value = value
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.type = try values.decode(`Type`.self, forKey: "type")
            self.value = try values.decode(String.self, forKey: "value")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(type, forKey: "type")
            try values.encode(value, forKey: "value")
        }
    }

    public struct Reference: Codable {
        public var url: URL

        public init(url: URL) {
            self.url = url
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.url = try values.decode(URL.self, forKey: "url")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(url, forKey: "url")
        }
    }

    public struct Cvss: Codable {
        public var score: Double
        public var vectorString: String?

        public init(score: Double, vectorString: String? = nil) {
            self.score = score
            self.vectorString = vectorString
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.score = try values.decode(Double.self, forKey: "score")
            self.vectorString = try values.decodeIfPresent(String.self, forKey: "vector_string")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(score, forKey: "score")
            try values.encodeIfPresent(vectorString, forKey: "vector_string")
        }
    }

    public struct Cwe: Codable {
        public var cweID: String
        public var name: String

        public init(cweID: String, name: String) {
            self.cweID = cweID
            self.name = name
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.cweID = try values.decode(String.self, forKey: "cwe_id")
            self.name = try values.decode(String.self, forKey: "name")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(cweID, forKey: "cwe_id")
            try values.encode(name, forKey: "name")
        }
    }

    public struct Vulnerability: Codable {
        public var firstPatchedVersion: FirstPatchedVersion?
        public var package: Package
        public var severity: String
        public var vulnerableVersionRange: String

        public struct FirstPatchedVersion: Codable {
            public var identifier: String

            public init(identifier: String) {
                self.identifier = identifier
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.identifier = try values.decode(String.self, forKey: "identifier")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(identifier, forKey: "identifier")
            }
        }

        public struct Package: Codable {
            public var ecosystem: String
            public var name: String

            public init(ecosystem: String, name: String) {
                self.ecosystem = ecosystem
                self.name = name
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.ecosystem = try values.decode(String.self, forKey: "ecosystem")
                self.name = try values.decode(String.self, forKey: "name")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(ecosystem, forKey: "ecosystem")
                try values.encode(name, forKey: "name")
            }
        }

        public init(firstPatchedVersion: FirstPatchedVersion? = nil, package: Package, severity: String, vulnerableVersionRange: String) {
            self.firstPatchedVersion = firstPatchedVersion
            self.package = package
            self.severity = severity
            self.vulnerableVersionRange = vulnerableVersionRange
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.firstPatchedVersion = try values.decodeIfPresent(FirstPatchedVersion.self, forKey: "first_patched_version")
            self.package = try values.decode(Package.self, forKey: "package")
            self.severity = try values.decode(String.self, forKey: "severity")
            self.vulnerableVersionRange = try values.decode(String.self, forKey: "vulnerable_version_range")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(firstPatchedVersion, forKey: "first_patched_version")
            try values.encode(package, forKey: "package")
            try values.encode(severity, forKey: "severity")
            try values.encode(vulnerableVersionRange, forKey: "vulnerable_version_range")
        }
    }

    public init(ghsaID: String, cveID: String? = nil, summary: String, description: String, severity: Severity, identifiers: [Identifier], references: [Reference], cvss: Cvss, cwes: [Cwe], publishedAt: Date, updatedAt: Date, vulnerabilities: [Vulnerability], withdrawnAt: Date? = nil) {
        self.ghsaID = ghsaID
        self.cveID = cveID
        self.summary = summary
        self.description = description
        self.severity = severity
        self.identifiers = identifiers
        self.references = references
        self.cvss = cvss
        self.cwes = cwes
        self.publishedAt = publishedAt
        self.updatedAt = updatedAt
        self.vulnerabilities = vulnerabilities
        self.withdrawnAt = withdrawnAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.ghsaID = try values.decode(String.self, forKey: "ghsa_id")
        self.cveID = try values.decodeIfPresent(String.self, forKey: "cve_id")
        self.summary = try values.decode(String.self, forKey: "summary")
        self.description = try values.decode(String.self, forKey: "description")
        self.severity = try values.decode(Severity.self, forKey: "severity")
        self.identifiers = try values.decode([Identifier].self, forKey: "identifiers")
        self.references = try values.decode([Reference].self, forKey: "references")
        self.cvss = try values.decode(Cvss.self, forKey: "cvss")
        self.cwes = try values.decode([Cwe].self, forKey: "cwes")
        self.publishedAt = try values.decode(Date.self, forKey: "published_at")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.vulnerabilities = try values.decode([Vulnerability].self, forKey: "vulnerabilities")
        self.withdrawnAt = try values.decodeIfPresent(Date.self, forKey: "withdrawn_at")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(ghsaID, forKey: "ghsa_id")
        try values.encodeIfPresent(cveID, forKey: "cve_id")
        try values.encode(summary, forKey: "summary")
        try values.encode(description, forKey: "description")
        try values.encode(severity, forKey: "severity")
        try values.encode(identifiers, forKey: "identifiers")
        try values.encode(references, forKey: "references")
        try values.encode(cvss, forKey: "cvss")
        try values.encode(cwes, forKey: "cwes")
        try values.encode(publishedAt, forKey: "published_at")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encode(vulnerabilities, forKey: "vulnerabilities")
        try values.encodeIfPresent(withdrawnAt, forKey: "withdrawn_at")
    }
}
