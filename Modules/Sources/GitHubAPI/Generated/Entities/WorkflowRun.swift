// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// An invocation of a workflow
public struct WorkflowRun: Codable, Identifiable {
    /// The ID of the workflow run.
    public var id: Int
    /// The name of the workflow run.
    ///
    /// Example: "Build"
    public var name: String?
    /// Example: "MDEwOkNoZWNrU3VpdGU1"
    public var nodeID: String
    /// The ID of the associated check suite.
    ///
    /// Example: 42
    public var checkSuiteID: Int?
    /// The node ID of the associated check suite.
    ///
    /// Example: "MDEwOkNoZWNrU3VpdGU0Mg=="
    public var checkSuiteNodeID: String?
    /// Example: "master"
    public var headBranch: String?
    /// The SHA of the head commit that points to the version of the workflow being run.
    ///
    /// Example: "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
    public var headSha: String
    /// The full path of the workflow
    ///
    /// Example: "octocat/octo-repo/.github/workflows/ci.yml@main"
    public var path: String
    /// The auto incrementing run number for the workflow run.
    ///
    /// Example: 106
    public var runNumber: Int
    /// Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
    public var runAttempt: Int?
    public var referencedWorkflows: [ReferencedWorkflow]?
    /// Example: "push"
    public var event: String
    /// Example: "completed"
    public var status: String?
    /// Example: "neutral"
    public var conclusion: String?
    /// The ID of the parent workflow.
    public var workflowID: Int
    /// The URL to the workflow run.
    ///
    /// Example: "https://api.github.com/repos/github/hello-world/actions/runs/5"
    public var url: String
    /// Example: "https://github.com/github/hello-world/suites/4"
    public var htmlURL: String
    public var pullRequests: [PullRequestMinimal]?
    public var createdAt: Date
    public var updatedAt: Date
    /// Simple User
    public var actor: SimpleUser?
    /// Simple User
    public var triggeringActor: SimpleUser?
    /// The start time of the latest run. Resets on re-run.
    public var runStartedAt: Date?
    /// The URL to the jobs for the workflow run.
    ///
    /// Example: "https://api.github.com/repos/github/hello-world/actions/runs/5/jobs"
    public var jobsURL: String
    /// The URL to download the logs for the workflow run.
    ///
    /// Example: "https://api.github.com/repos/github/hello-world/actions/runs/5/logs"
    public var logsURL: String
    /// The URL to the associated check suite.
    ///
    /// Example: "https://api.github.com/repos/github/hello-world/check-suites/12"
    public var checkSuiteURL: String
    /// The URL to the artifacts for the workflow run.
    ///
    /// Example: "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts"
    public var artifactsURL: String
    /// The URL to cancel the workflow run.
    ///
    /// Example: "https://api.github.com/repos/github/hello-world/actions/runs/5/cancel"
    public var cancelURL: String
    /// The URL to rerun the workflow run.
    ///
    /// Example: "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun"
    public var rerunURL: String
    /// The URL to the previous attempted run of this workflow, if one exists.
    ///
    /// Example: "https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3"
    public var previousAttemptURL: String?
    /// The URL to the workflow.
    ///
    /// Example: "https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml"
    public var workflowURL: String
    /// Simple Commit
    public var headCommit: NullableSimpleCommit?
    /// Minimal Repository
    public var repository: MinimalRepository
    /// Minimal Repository
    public var headRepository: MinimalRepository
    public var headRepositoryID: Int?
    /// The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
    ///
    /// Example: "Simple Workflow"
    public var displayTitle: String

    public init(id: Int, name: String? = nil, nodeID: String, checkSuiteID: Int? = nil, checkSuiteNodeID: String? = nil, headBranch: String? = nil, headSha: String, path: String, runNumber: Int, runAttempt: Int? = nil, referencedWorkflows: [ReferencedWorkflow]? = nil, event: String, status: String? = nil, conclusion: String? = nil, workflowID: Int, url: String, htmlURL: String, pullRequests: [PullRequestMinimal]? = nil, createdAt: Date, updatedAt: Date, actor: SimpleUser? = nil, triggeringActor: SimpleUser? = nil, runStartedAt: Date? = nil, jobsURL: String, logsURL: String, checkSuiteURL: String, artifactsURL: String, cancelURL: String, rerunURL: String, previousAttemptURL: String? = nil, workflowURL: String, headCommit: NullableSimpleCommit? = nil, repository: MinimalRepository, headRepository: MinimalRepository, headRepositoryID: Int? = nil, displayTitle: String) {
        self.id = id
        self.name = name
        self.nodeID = nodeID
        self.checkSuiteID = checkSuiteID
        self.checkSuiteNodeID = checkSuiteNodeID
        self.headBranch = headBranch
        self.headSha = headSha
        self.path = path
        self.runNumber = runNumber
        self.runAttempt = runAttempt
        self.referencedWorkflows = referencedWorkflows
        self.event = event
        self.status = status
        self.conclusion = conclusion
        self.workflowID = workflowID
        self.url = url
        self.htmlURL = htmlURL
        self.pullRequests = pullRequests
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.actor = actor
        self.triggeringActor = triggeringActor
        self.runStartedAt = runStartedAt
        self.jobsURL = jobsURL
        self.logsURL = logsURL
        self.checkSuiteURL = checkSuiteURL
        self.artifactsURL = artifactsURL
        self.cancelURL = cancelURL
        self.rerunURL = rerunURL
        self.previousAttemptURL = previousAttemptURL
        self.workflowURL = workflowURL
        self.headCommit = headCommit
        self.repository = repository
        self.headRepository = headRepository
        self.headRepositoryID = headRepositoryID
        self.displayTitle = displayTitle
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.checkSuiteID = try values.decodeIfPresent(Int.self, forKey: "check_suite_id")
        self.checkSuiteNodeID = try values.decodeIfPresent(String.self, forKey: "check_suite_node_id")
        self.headBranch = try values.decodeIfPresent(String.self, forKey: "head_branch")
        self.headSha = try values.decode(String.self, forKey: "head_sha")
        self.path = try values.decode(String.self, forKey: "path")
        self.runNumber = try values.decode(Int.self, forKey: "run_number")
        self.runAttempt = try values.decodeIfPresent(Int.self, forKey: "run_attempt")
        self.referencedWorkflows = try values.decodeIfPresent([ReferencedWorkflow].self, forKey: "referenced_workflows")
        self.event = try values.decode(String.self, forKey: "event")
        self.status = try values.decodeIfPresent(String.self, forKey: "status")
        self.conclusion = try values.decodeIfPresent(String.self, forKey: "conclusion")
        self.workflowID = try values.decode(Int.self, forKey: "workflow_id")
        self.url = try values.decode(String.self, forKey: "url")
        self.htmlURL = try values.decode(String.self, forKey: "html_url")
        self.pullRequests = try values.decodeIfPresent([PullRequestMinimal].self, forKey: "pull_requests")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.actor = try values.decodeIfPresent(SimpleUser.self, forKey: "actor")
        self.triggeringActor = try values.decodeIfPresent(SimpleUser.self, forKey: "triggering_actor")
        self.runStartedAt = try values.decodeIfPresent(Date.self, forKey: "run_started_at")
        self.jobsURL = try values.decode(String.self, forKey: "jobs_url")
        self.logsURL = try values.decode(String.self, forKey: "logs_url")
        self.checkSuiteURL = try values.decode(String.self, forKey: "check_suite_url")
        self.artifactsURL = try values.decode(String.self, forKey: "artifacts_url")
        self.cancelURL = try values.decode(String.self, forKey: "cancel_url")
        self.rerunURL = try values.decode(String.self, forKey: "rerun_url")
        self.previousAttemptURL = try values.decodeIfPresent(String.self, forKey: "previous_attempt_url")
        self.workflowURL = try values.decode(String.self, forKey: "workflow_url")
        self.headCommit = try values.decodeIfPresent(NullableSimpleCommit.self, forKey: "head_commit")
        self.repository = try values.decode(MinimalRepository.self, forKey: "repository")
        self.headRepository = try values.decode(MinimalRepository.self, forKey: "head_repository")
        self.headRepositoryID = try values.decodeIfPresent(Int.self, forKey: "head_repository_id")
        self.displayTitle = try values.decode(String.self, forKey: "display_title")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encode(nodeID, forKey: "node_id")
        try values.encodeIfPresent(checkSuiteID, forKey: "check_suite_id")
        try values.encodeIfPresent(checkSuiteNodeID, forKey: "check_suite_node_id")
        try values.encodeIfPresent(headBranch, forKey: "head_branch")
        try values.encode(headSha, forKey: "head_sha")
        try values.encode(path, forKey: "path")
        try values.encode(runNumber, forKey: "run_number")
        try values.encodeIfPresent(runAttempt, forKey: "run_attempt")
        try values.encodeIfPresent(referencedWorkflows, forKey: "referenced_workflows")
        try values.encode(event, forKey: "event")
        try values.encodeIfPresent(status, forKey: "status")
        try values.encodeIfPresent(conclusion, forKey: "conclusion")
        try values.encode(workflowID, forKey: "workflow_id")
        try values.encode(url, forKey: "url")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encodeIfPresent(pullRequests, forKey: "pull_requests")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encodeIfPresent(actor, forKey: "actor")
        try values.encodeIfPresent(triggeringActor, forKey: "triggering_actor")
        try values.encodeIfPresent(runStartedAt, forKey: "run_started_at")
        try values.encode(jobsURL, forKey: "jobs_url")
        try values.encode(logsURL, forKey: "logs_url")
        try values.encode(checkSuiteURL, forKey: "check_suite_url")
        try values.encode(artifactsURL, forKey: "artifacts_url")
        try values.encode(cancelURL, forKey: "cancel_url")
        try values.encode(rerunURL, forKey: "rerun_url")
        try values.encodeIfPresent(previousAttemptURL, forKey: "previous_attempt_url")
        try values.encode(workflowURL, forKey: "workflow_url")
        try values.encodeIfPresent(headCommit, forKey: "head_commit")
        try values.encode(repository, forKey: "repository")
        try values.encode(headRepository, forKey: "head_repository")
        try values.encodeIfPresent(headRepositoryID, forKey: "head_repository_id")
        try values.encode(displayTitle, forKey: "display_title")
    }
}
