// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Commit: Codable {
    /// Example: "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
    public var url: URL
    /// Example: "6dcb09b5b57875f334f61aebed695e2e4193db5e"
    public var sha: String
    /// Example: "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ=="
    public var nodeID: String
    /// Example: "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e"
    public var htmlURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments"
    public var commentsURL: URL
    public var commit: Commit
    /// Simple User
    public var author: NullableSimpleUser?
    /// Simple User
    public var committer: NullableSimpleUser?
    public var parents: [Parent]
    public var stats: Stats?
    public var files: [DiffEntry]?

    public struct Commit: Codable {
        /// Example: "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        public var url: URL
        /// Git User
        ///
        /// Metaproperties for Git author/committer information.
        public var author: NullableGitUser?
        /// Git User
        ///
        /// Metaproperties for Git author/committer information.
        public var committer: NullableGitUser?
        /// Example: "Fix all the bugs"
        public var message: String
        public var commentCount: Int
        public var tree: Tree
        public var verification: Verification?

        public struct Tree: Codable {
            /// Example: "827efc6d56897b048c772eb4087f854f46256132"
            public var sha: String
            /// Example: "https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132"
            public var url: URL

            public init(sha: String, url: URL) {
                self.sha = sha
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.sha = try values.decode(String.self, forKey: "sha")
                self.url = try values.decode(URL.self, forKey: "url")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(sha, forKey: "sha")
                try values.encode(url, forKey: "url")
            }
        }

        public init(url: URL, author: NullableGitUser? = nil, committer: NullableGitUser? = nil, message: String, commentCount: Int, tree: Tree, verification: Verification? = nil) {
            self.url = url
            self.author = author
            self.committer = committer
            self.message = message
            self.commentCount = commentCount
            self.tree = tree
            self.verification = verification
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.url = try values.decode(URL.self, forKey: "url")
            self.author = try values.decodeIfPresent(NullableGitUser.self, forKey: "author")
            self.committer = try values.decodeIfPresent(NullableGitUser.self, forKey: "committer")
            self.message = try values.decode(String.self, forKey: "message")
            self.commentCount = try values.decode(Int.self, forKey: "comment_count")
            self.tree = try values.decode(Tree.self, forKey: "tree")
            self.verification = try values.decodeIfPresent(Verification.self, forKey: "verification")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(url, forKey: "url")
            try values.encodeIfPresent(author, forKey: "author")
            try values.encodeIfPresent(committer, forKey: "committer")
            try values.encode(message, forKey: "message")
            try values.encode(commentCount, forKey: "comment_count")
            try values.encode(tree, forKey: "tree")
            try values.encodeIfPresent(verification, forKey: "verification")
        }
    }

    public struct Parent: Codable {
        /// Example: "7638417db6d59f3c431d3e1f261cc637155684cd"
        public var sha: String
        /// Example: "https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd"
        public var url: URL
        /// Example: "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd"
        public var htmlURL: URL?

        public init(sha: String, url: URL, htmlURL: URL? = nil) {
            self.sha = sha
            self.url = url
            self.htmlURL = htmlURL
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.sha = try values.decode(String.self, forKey: "sha")
            self.url = try values.decode(URL.self, forKey: "url")
            self.htmlURL = try values.decodeIfPresent(URL.self, forKey: "html_url")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(sha, forKey: "sha")
            try values.encode(url, forKey: "url")
            try values.encodeIfPresent(htmlURL, forKey: "html_url")
        }
    }

    public struct Stats: Codable {
        public var additions: Int?
        public var deletions: Int?
        public var total: Int?

        public init(additions: Int? = nil, deletions: Int? = nil, total: Int? = nil) {
            self.additions = additions
            self.deletions = deletions
            self.total = total
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.additions = try values.decodeIfPresent(Int.self, forKey: "additions")
            self.deletions = try values.decodeIfPresent(Int.self, forKey: "deletions")
            self.total = try values.decodeIfPresent(Int.self, forKey: "total")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(additions, forKey: "additions")
            try values.encodeIfPresent(deletions, forKey: "deletions")
            try values.encodeIfPresent(total, forKey: "total")
        }
    }

    public init(url: URL, sha: String, nodeID: String, htmlURL: URL, commentsURL: URL, commit: Commit, author: NullableSimpleUser? = nil, committer: NullableSimpleUser? = nil, parents: [Parent], stats: Stats? = nil, files: [DiffEntry]? = nil) {
        self.url = url
        self.sha = sha
        self.nodeID = nodeID
        self.htmlURL = htmlURL
        self.commentsURL = commentsURL
        self.commit = commit
        self.author = author
        self.committer = committer
        self.parents = parents
        self.stats = stats
        self.files = files
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.url = try values.decode(URL.self, forKey: "url")
        self.sha = try values.decode(String.self, forKey: "sha")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.htmlURL = try values.decode(URL.self, forKey: "html_url")
        self.commentsURL = try values.decode(URL.self, forKey: "comments_url")
        self.commit = try values.decode(Commit.self, forKey: "commit")
        self.author = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "author")
        self.committer = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "committer")
        self.parents = try values.decode([Parent].self, forKey: "parents")
        self.stats = try values.decodeIfPresent(Stats.self, forKey: "stats")
        self.files = try values.decodeIfPresent([DiffEntry].self, forKey: "files")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(url, forKey: "url")
        try values.encode(sha, forKey: "sha")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encode(commentsURL, forKey: "comments_url")
        try values.encode(commit, forKey: "commit")
        try values.encodeIfPresent(author, forKey: "author")
        try values.encodeIfPresent(committer, forKey: "committer")
        try values.encode(parents, forKey: "parents")
        try values.encodeIfPresent(stats, forKey: "stats")
        try values.encodeIfPresent(files, forKey: "files")
    }
}
