// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Project cards represent a scope of work.
public struct ProjectCard: Codable, Identifiable {
    /// Example: "https://api.github.com/projects/columns/cards/1478"
    public var url: URL
    /// The project card's ID
    ///
    /// Example: 42
    public var id: Int
    /// Example: "MDExOlByb2plY3RDYXJkMTQ3OA=="
    public var nodeID: String
    /// Example: "Add payload for delete Project column"
    public var note: String?
    /// Simple User
    public var creator: NullableSimpleUser?
    /// Example: "2016-09-05T14:21:06Z"
    public var createdAt: Date
    /// Example: "2016-09-05T14:20:22Z"
    public var updatedAt: Date
    /// Whether or not the card is archived
    ///
    /// Example: false
    public var isArchived: Bool?
    public var columnName: String?
    public var projectID: String?
    /// Example: "https://api.github.com/projects/columns/367"
    public var columnURL: URL
    /// Example: "https://api.github.com/repos/api-playground/projects-test/issues/3"
    public var contentURL: URL?
    /// Example: "https://api.github.com/projects/120"
    public var projectURL: URL

    public init(url: URL, id: Int, nodeID: String, note: String? = nil, creator: NullableSimpleUser? = nil, createdAt: Date, updatedAt: Date, isArchived: Bool? = nil, columnName: String? = nil, projectID: String? = nil, columnURL: URL, contentURL: URL? = nil, projectURL: URL) {
        self.url = url
        self.id = id
        self.nodeID = nodeID
        self.note = note
        self.creator = creator
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.isArchived = isArchived
        self.columnName = columnName
        self.projectID = projectID
        self.columnURL = columnURL
        self.contentURL = contentURL
        self.projectURL = projectURL
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.url = try values.decode(URL.self, forKey: "url")
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.note = try values.decodeIfPresent(String.self, forKey: "note")
        self.creator = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "creator")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.isArchived = try values.decodeIfPresent(Bool.self, forKey: "archived")
        self.columnName = try values.decodeIfPresent(String.self, forKey: "column_name")
        self.projectID = try values.decodeIfPresent(String.self, forKey: "project_id")
        self.columnURL = try values.decode(URL.self, forKey: "column_url")
        self.contentURL = try values.decodeIfPresent(URL.self, forKey: "content_url")
        self.projectURL = try values.decode(URL.self, forKey: "project_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(url, forKey: "url")
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encodeIfPresent(note, forKey: "note")
        try values.encodeIfPresent(creator, forKey: "creator")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encodeIfPresent(isArchived, forKey: "archived")
        try values.encodeIfPresent(columnName, forKey: "column_name")
        try values.encodeIfPresent(projectID, forKey: "project_id")
        try values.encode(columnURL, forKey: "column_url")
        try values.encodeIfPresent(contentURL, forKey: "content_url")
        try values.encode(projectURL, forKey: "project_url")
    }
}
