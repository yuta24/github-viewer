// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Projects are a way to organize columns and cards of work.
public struct Project: Codable, Identifiable {
    /// Example: "https://api.github.com/repos/api-playground/projects-test"
    public var ownerURL: URL
    /// Example: "https://api.github.com/projects/1002604"
    public var url: URL
    /// Example: "https://github.com/api-playground/projects-test/projects/12"
    public var htmlURL: URL
    /// Example: "https://api.github.com/projects/1002604/columns"
    public var columnsURL: URL
    /// Example: 1002604
    public var id: Int
    /// Example: "MDc6UHJvamVjdDEwMDI2MDQ="
    public var nodeID: String
    /// Name of the project
    ///
    /// Example: "Week One Sprint"
    public var name: String
    /// Body of the project
    ///
    /// Example: "This project represents the sprint of the first week in January"
    public var body: String?
    public var number: Int
    /// State of the project; either 'open' or 'closed'
    ///
    /// Example: "open"
    public var state: String
    /// Simple User
    public var creator: NullableSimpleUser?
    /// Example: "2011-04-10T20:09:31Z"
    public var createdAt: Date
    /// Example: "2014-03-03T18:58:10Z"
    public var updatedAt: Date
    /// The baseline permission that all organization members have on this project. Only present if owner is an organization.
    public var organizationPermission: OrganizationPermission?
    /// Whether or not this project can be seen by everyone. Only present if owner is an organization.
    public var isPrivate: Bool?

    /// The baseline permission that all organization members have on this project. Only present if owner is an organization.
    public enum OrganizationPermission: String, Codable, CaseIterable {
        case read
        case write
        case admin
        case `none`
    }

    public init(ownerURL: URL, url: URL, htmlURL: URL, columnsURL: URL, id: Int, nodeID: String, name: String, body: String? = nil, number: Int, state: String, creator: NullableSimpleUser? = nil, createdAt: Date, updatedAt: Date, organizationPermission: OrganizationPermission? = nil, isPrivate: Bool? = nil) {
        self.ownerURL = ownerURL
        self.url = url
        self.htmlURL = htmlURL
        self.columnsURL = columnsURL
        self.id = id
        self.nodeID = nodeID
        self.name = name
        self.body = body
        self.number = number
        self.state = state
        self.creator = creator
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.organizationPermission = organizationPermission
        self.isPrivate = isPrivate
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.ownerURL = try values.decode(URL.self, forKey: "owner_url")
        self.url = try values.decode(URL.self, forKey: "url")
        self.htmlURL = try values.decode(URL.self, forKey: "html_url")
        self.columnsURL = try values.decode(URL.self, forKey: "columns_url")
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.name = try values.decode(String.self, forKey: "name")
        self.body = try values.decodeIfPresent(String.self, forKey: "body")
        self.number = try values.decode(Int.self, forKey: "number")
        self.state = try values.decode(String.self, forKey: "state")
        self.creator = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "creator")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.organizationPermission = try values.decodeIfPresent(OrganizationPermission.self, forKey: "organization_permission")
        self.isPrivate = try values.decodeIfPresent(Bool.self, forKey: "private")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(ownerURL, forKey: "owner_url")
        try values.encode(url, forKey: "url")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encode(columnsURL, forKey: "columns_url")
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(body, forKey: "body")
        try values.encode(number, forKey: "number")
        try values.encode(state, forKey: "state")
        try values.encodeIfPresent(creator, forKey: "creator")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encodeIfPresent(organizationPermission, forKey: "organization_permission")
        try values.encodeIfPresent(isPrivate, forKey: "private")
    }
}
