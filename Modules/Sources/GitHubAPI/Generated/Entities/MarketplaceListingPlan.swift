// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct MarketplaceListingPlan: Codable, Identifiable {
    /// Example: "https://api.github.com/marketplace_listing/plans/1313"
    public var url: URL
    /// Example: "https://api.github.com/marketplace_listing/plans/1313/accounts"
    public var accountsURL: URL
    /// Example: 1313
    public var id: Int
    public var number: Int
    /// Example: "Pro"
    public var name: String
    /// Example: "A professional-grade CI solution"
    public var description: String
    /// Example: 1099
    public var monthlyPriceInCents: Int
    /// Example: 11870
    public var yearlyPriceInCents: Int
    /// Example: "flat-rate"
    public var priceModel: String
    /// Example: true
    public var hasFreeTrial: Bool
    public var unitName: String?
    /// Example: "published"
    public var state: String
    /// Example: ["Up to 25 private repositories", "11 concurrent builds"]
    public var bullets: [String]

    public init(url: URL, accountsURL: URL, id: Int, number: Int, name: String, description: String, monthlyPriceInCents: Int, yearlyPriceInCents: Int, priceModel: String, hasFreeTrial: Bool, unitName: String? = nil, state: String, bullets: [String]) {
        self.url = url
        self.accountsURL = accountsURL
        self.id = id
        self.number = number
        self.name = name
        self.description = description
        self.monthlyPriceInCents = monthlyPriceInCents
        self.yearlyPriceInCents = yearlyPriceInCents
        self.priceModel = priceModel
        self.hasFreeTrial = hasFreeTrial
        self.unitName = unitName
        self.state = state
        self.bullets = bullets
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.url = try values.decode(URL.self, forKey: "url")
        self.accountsURL = try values.decode(URL.self, forKey: "accounts_url")
        self.id = try values.decode(Int.self, forKey: "id")
        self.number = try values.decode(Int.self, forKey: "number")
        self.name = try values.decode(String.self, forKey: "name")
        self.description = try values.decode(String.self, forKey: "description")
        self.monthlyPriceInCents = try values.decode(Int.self, forKey: "monthly_price_in_cents")
        self.yearlyPriceInCents = try values.decode(Int.self, forKey: "yearly_price_in_cents")
        self.priceModel = try values.decode(String.self, forKey: "price_model")
        self.hasFreeTrial = try values.decode(Bool.self, forKey: "has_free_trial")
        self.unitName = try values.decodeIfPresent(String.self, forKey: "unit_name")
        self.state = try values.decode(String.self, forKey: "state")
        self.bullets = try values.decode([String].self, forKey: "bullets")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(url, forKey: "url")
        try values.encode(accountsURL, forKey: "accounts_url")
        try values.encode(id, forKey: "id")
        try values.encode(number, forKey: "number")
        try values.encode(name, forKey: "name")
        try values.encode(description, forKey: "description")
        try values.encode(monthlyPriceInCents, forKey: "monthly_price_in_cents")
        try values.encode(yearlyPriceInCents, forKey: "yearly_price_in_cents")
        try values.encode(priceModel, forKey: "price_model")
        try values.encode(hasFreeTrial, forKey: "has_free_trial")
        try values.encodeIfPresent(unitName, forKey: "unit_name")
        try values.encode(state, forKey: "state")
        try values.encode(bullets, forKey: "bullets")
    }
}
