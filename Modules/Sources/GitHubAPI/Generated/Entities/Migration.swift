// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A migration.
public struct Migration: Codable, Identifiable {
    /// Example: 79
    public var id: Int
    /// Simple User
    public var owner: NullableSimpleUser?
    /// Example: "0b989ba4-242f-11e5-81e1-c7b6966d2516"
    public var guid: String
    /// Example: "pending"
    public var state: String
    /// Example: true
    public var lockRepositories: Bool
    public var excludeMetadata: Bool
    public var excludeGitData: Bool
    public var excludeAttachments: Bool
    public var excludeReleases: Bool
    public var excludeOwnerProjects: Bool
    public var isOrgMetadataOnly: Bool
    public var repositories: [Repository]
    /// Example: "https://api.github.com/orgs/octo-org/migrations/79"
    public var url: URL
    /// Example: "2015-07-06T15:33:38-07:00"
    public var createdAt: Date
    /// Example: "2015-07-06T15:33:38-07:00"
    public var updatedAt: Date
    public var nodeID: String
    public var archiveURL: URL?
    public var exclude: [AnyJSON]?

    public init(id: Int, owner: NullableSimpleUser? = nil, guid: String, state: String, lockRepositories: Bool, excludeMetadata: Bool, excludeGitData: Bool, excludeAttachments: Bool, excludeReleases: Bool, excludeOwnerProjects: Bool, isOrgMetadataOnly: Bool, repositories: [Repository], url: URL, createdAt: Date, updatedAt: Date, nodeID: String, archiveURL: URL? = nil, exclude: [AnyJSON]? = nil) {
        self.id = id
        self.owner = owner
        self.guid = guid
        self.state = state
        self.lockRepositories = lockRepositories
        self.excludeMetadata = excludeMetadata
        self.excludeGitData = excludeGitData
        self.excludeAttachments = excludeAttachments
        self.excludeReleases = excludeReleases
        self.excludeOwnerProjects = excludeOwnerProjects
        self.isOrgMetadataOnly = isOrgMetadataOnly
        self.repositories = repositories
        self.url = url
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.nodeID = nodeID
        self.archiveURL = archiveURL
        self.exclude = exclude
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.owner = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "owner")
        self.guid = try values.decode(String.self, forKey: "guid")
        self.state = try values.decode(String.self, forKey: "state")
        self.lockRepositories = try values.decode(Bool.self, forKey: "lock_repositories")
        self.excludeMetadata = try values.decode(Bool.self, forKey: "exclude_metadata")
        self.excludeGitData = try values.decode(Bool.self, forKey: "exclude_git_data")
        self.excludeAttachments = try values.decode(Bool.self, forKey: "exclude_attachments")
        self.excludeReleases = try values.decode(Bool.self, forKey: "exclude_releases")
        self.excludeOwnerProjects = try values.decode(Bool.self, forKey: "exclude_owner_projects")
        self.isOrgMetadataOnly = try values.decode(Bool.self, forKey: "org_metadata_only")
        self.repositories = try values.decode([Repository].self, forKey: "repositories")
        self.url = try values.decode(URL.self, forKey: "url")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.archiveURL = try values.decodeIfPresent(URL.self, forKey: "archive_url")
        self.exclude = try values.decodeIfPresent([AnyJSON].self, forKey: "exclude")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(owner, forKey: "owner")
        try values.encode(guid, forKey: "guid")
        try values.encode(state, forKey: "state")
        try values.encode(lockRepositories, forKey: "lock_repositories")
        try values.encode(excludeMetadata, forKey: "exclude_metadata")
        try values.encode(excludeGitData, forKey: "exclude_git_data")
        try values.encode(excludeAttachments, forKey: "exclude_attachments")
        try values.encode(excludeReleases, forKey: "exclude_releases")
        try values.encode(excludeOwnerProjects, forKey: "exclude_owner_projects")
        try values.encode(isOrgMetadataOnly, forKey: "org_metadata_only")
        try values.encode(repositories, forKey: "repositories")
        try values.encode(url, forKey: "url")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encode(nodeID, forKey: "node_id")
        try values.encodeIfPresent(archiveURL, forKey: "archive_url")
        try values.encodeIfPresent(exclude, forKey: "exclude")
    }
}
