// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct OrganizationSecretScanningAlert: Codable {
    /// The security alert number.
    public var number: Int?
    /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    public var createdAt: Date?
    /// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    public var updatedAt: Date?
    /// The REST API URL of the alert resource.
    public var url: URL?
    /// The GitHub URL of the alert resource.
    public var htmlURL: URL?
    /// The REST API URL of the code locations for this alert.
    public var locationsURL: URL?
    /// Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
    public var state: SecretScanningAlertState?
    /// **Required when the `state` is `resolved`.** The reason for resolving the alert.
    public var resolution: SecretScanningAlertResolution?
    /// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    public var resolvedAt: Date?
    /// Simple User
    public var resolvedBy: NullableSimpleUser?
    /// The type of secret that secret scanning detected.
    public var secretType: String?
    /// User-friendly name for the detected secret, matching the `secret_type`.
    /// For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
    public var secretTypeDisplayName: String?
    /// The secret that was detected.
    public var secret: String?
    /// Simple Repository
    public var repository: SimpleRepository?
    /// Whether push protection was bypassed for the detected secret.
    public var isPushProtectionBypassed: Bool?
    /// Simple User
    public var pushProtectionBypassedBy: NullableSimpleUser?
    /// The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    public var pushProtectionBypassedAt: Date?
    /// The comment that was optionally added when this alert was closed
    public var resolutionComment: String?

    public init(number: Int? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, url: URL? = nil, htmlURL: URL? = nil, locationsURL: URL? = nil, state: SecretScanningAlertState? = nil, resolution: SecretScanningAlertResolution? = nil, resolvedAt: Date? = nil, resolvedBy: NullableSimpleUser? = nil, secretType: String? = nil, secretTypeDisplayName: String? = nil, secret: String? = nil, repository: SimpleRepository? = nil, isPushProtectionBypassed: Bool? = nil, pushProtectionBypassedBy: NullableSimpleUser? = nil, pushProtectionBypassedAt: Date? = nil, resolutionComment: String? = nil) {
        self.number = number
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.url = url
        self.htmlURL = htmlURL
        self.locationsURL = locationsURL
        self.state = state
        self.resolution = resolution
        self.resolvedAt = resolvedAt
        self.resolvedBy = resolvedBy
        self.secretType = secretType
        self.secretTypeDisplayName = secretTypeDisplayName
        self.secret = secret
        self.repository = repository
        self.isPushProtectionBypassed = isPushProtectionBypassed
        self.pushProtectionBypassedBy = pushProtectionBypassedBy
        self.pushProtectionBypassedAt = pushProtectionBypassedAt
        self.resolutionComment = resolutionComment
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.number = try values.decodeIfPresent(Int.self, forKey: "number")
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.updatedAt = try values.decodeIfPresent(Date.self, forKey: "updated_at")
        self.url = try values.decodeIfPresent(URL.self, forKey: "url")
        self.htmlURL = try values.decodeIfPresent(URL.self, forKey: "html_url")
        self.locationsURL = try values.decodeIfPresent(URL.self, forKey: "locations_url")
        self.state = try values.decodeIfPresent(SecretScanningAlertState.self, forKey: "state")
        self.resolution = try values.decodeIfPresent(SecretScanningAlertResolution.self, forKey: "resolution")
        self.resolvedAt = try values.decodeIfPresent(Date.self, forKey: "resolved_at")
        self.resolvedBy = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "resolved_by")
        self.secretType = try values.decodeIfPresent(String.self, forKey: "secret_type")
        self.secretTypeDisplayName = try values.decodeIfPresent(String.self, forKey: "secret_type_display_name")
        self.secret = try values.decodeIfPresent(String.self, forKey: "secret")
        self.repository = try values.decodeIfPresent(SimpleRepository.self, forKey: "repository")
        self.isPushProtectionBypassed = try values.decodeIfPresent(Bool.self, forKey: "push_protection_bypassed")
        self.pushProtectionBypassedBy = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "push_protection_bypassed_by")
        self.pushProtectionBypassedAt = try values.decodeIfPresent(Date.self, forKey: "push_protection_bypassed_at")
        self.resolutionComment = try values.decodeIfPresent(String.self, forKey: "resolution_comment")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(number, forKey: "number")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(updatedAt, forKey: "updated_at")
        try values.encodeIfPresent(url, forKey: "url")
        try values.encodeIfPresent(htmlURL, forKey: "html_url")
        try values.encodeIfPresent(locationsURL, forKey: "locations_url")
        try values.encodeIfPresent(state, forKey: "state")
        try values.encodeIfPresent(resolution, forKey: "resolution")
        try values.encodeIfPresent(resolvedAt, forKey: "resolved_at")
        try values.encodeIfPresent(resolvedBy, forKey: "resolved_by")
        try values.encodeIfPresent(secretType, forKey: "secret_type")
        try values.encodeIfPresent(secretTypeDisplayName, forKey: "secret_type_display_name")
        try values.encodeIfPresent(secret, forKey: "secret")
        try values.encodeIfPresent(repository, forKey: "repository")
        try values.encodeIfPresent(isPushProtectionBypassed, forKey: "push_protection_bypassed")
        try values.encodeIfPresent(pushProtectionBypassedBy, forKey: "push_protection_bypassed_by")
        try values.encodeIfPresent(pushProtectionBypassedAt, forKey: "push_protection_bypassed_at")
        try values.encodeIfPresent(resolutionComment, forKey: "resolution_comment")
    }
}
