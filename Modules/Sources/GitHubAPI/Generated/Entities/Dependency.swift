// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Dependency: Codable {
    /// Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
    ///
    /// Example: "pkg:/npm/%40actions/http-client@1.0.11"
    public var packageURL: String?
    /// User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
    public var metadata: [String: Metadatum]?
    /// A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
    ///
    /// Example: "direct"
    public var relationship: Relationship?
    /// A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
    ///
    /// Example: "runtime"
    public var scope: Scope?
    /// Array of package-url (PURLs) of direct child dependencies.
    ///
    /// Example: "@actions/http-client"
    public var dependencies: [String]?

    /// A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
    ///
    /// Example: "direct"
    public enum Relationship: String, Codable, CaseIterable {
        case direct
        case indirect
    }

    /// A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
    ///
    /// Example: "runtime"
    public enum Scope: String, Codable, CaseIterable {
        case runtime
        case development
    }

    public init(packageURL: String? = nil, metadata: [String: Metadatum]? = nil, relationship: Relationship? = nil, scope: Scope? = nil, dependencies: [String]? = nil) {
        self.packageURL = packageURL
        self.metadata = metadata
        self.relationship = relationship
        self.scope = scope
        self.dependencies = dependencies
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.packageURL = try values.decodeIfPresent(String.self, forKey: "package_url")
        self.metadata = try values.decodeIfPresent([String: Metadatum].self, forKey: "metadata")
        self.relationship = try values.decodeIfPresent(Relationship.self, forKey: "relationship")
        self.scope = try values.decodeIfPresent(Scope.self, forKey: "scope")
        self.dependencies = try values.decodeIfPresent([String].self, forKey: "dependencies")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(packageURL, forKey: "package_url")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encodeIfPresent(relationship, forKey: "relationship")
        try values.encodeIfPresent(scope, forKey: "scope")
        try values.encodeIfPresent(dependencies, forKey: "dependencies")
    }
}
