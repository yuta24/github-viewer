// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Root: Codable {
    public var currentUserURL: String
    public var currentUserAuthorizationsHTMLURL: String
    public var authorizationsURL: String
    public var codeSearchURL: String
    public var commitSearchURL: String
    public var emailsURL: String
    public var emojisURL: String
    public var eventsURL: String
    public var feedsURL: String
    public var followersURL: String
    public var followingURL: String
    public var gistsURL: String
    public var hubURL: String
    public var issueSearchURL: String
    public var issuesURL: String
    public var keysURL: String
    public var labelSearchURL: String
    public var notificationsURL: String
    public var organizationURL: String
    public var organizationRepositoriesURL: String
    public var organizationTeamsURL: String
    public var publicGistsURL: String
    public var rateLimitURL: String
    public var repositoryURL: String
    public var repositorySearchURL: String
    public var currentUserRepositoriesURL: String
    public var starredURL: String
    public var starredGistsURL: String
    public var topicSearchURL: String?
    public var userURL: String
    public var userOrganizationsURL: String
    public var userRepositoriesURL: String
    public var userSearchURL: String

    public init(currentUserURL: String, currentUserAuthorizationsHTMLURL: String, authorizationsURL: String, codeSearchURL: String, commitSearchURL: String, emailsURL: String, emojisURL: String, eventsURL: String, feedsURL: String, followersURL: String, followingURL: String, gistsURL: String, hubURL: String, issueSearchURL: String, issuesURL: String, keysURL: String, labelSearchURL: String, notificationsURL: String, organizationURL: String, organizationRepositoriesURL: String, organizationTeamsURL: String, publicGistsURL: String, rateLimitURL: String, repositoryURL: String, repositorySearchURL: String, currentUserRepositoriesURL: String, starredURL: String, starredGistsURL: String, topicSearchURL: String? = nil, userURL: String, userOrganizationsURL: String, userRepositoriesURL: String, userSearchURL: String) {
        self.currentUserURL = currentUserURL
        self.currentUserAuthorizationsHTMLURL = currentUserAuthorizationsHTMLURL
        self.authorizationsURL = authorizationsURL
        self.codeSearchURL = codeSearchURL
        self.commitSearchURL = commitSearchURL
        self.emailsURL = emailsURL
        self.emojisURL = emojisURL
        self.eventsURL = eventsURL
        self.feedsURL = feedsURL
        self.followersURL = followersURL
        self.followingURL = followingURL
        self.gistsURL = gistsURL
        self.hubURL = hubURL
        self.issueSearchURL = issueSearchURL
        self.issuesURL = issuesURL
        self.keysURL = keysURL
        self.labelSearchURL = labelSearchURL
        self.notificationsURL = notificationsURL
        self.organizationURL = organizationURL
        self.organizationRepositoriesURL = organizationRepositoriesURL
        self.organizationTeamsURL = organizationTeamsURL
        self.publicGistsURL = publicGistsURL
        self.rateLimitURL = rateLimitURL
        self.repositoryURL = repositoryURL
        self.repositorySearchURL = repositorySearchURL
        self.currentUserRepositoriesURL = currentUserRepositoriesURL
        self.starredURL = starredURL
        self.starredGistsURL = starredGistsURL
        self.topicSearchURL = topicSearchURL
        self.userURL = userURL
        self.userOrganizationsURL = userOrganizationsURL
        self.userRepositoriesURL = userRepositoriesURL
        self.userSearchURL = userSearchURL
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.currentUserURL = try values.decode(String.self, forKey: "current_user_url")
        self.currentUserAuthorizationsHTMLURL = try values.decode(String.self, forKey: "current_user_authorizations_html_url")
        self.authorizationsURL = try values.decode(String.self, forKey: "authorizations_url")
        self.codeSearchURL = try values.decode(String.self, forKey: "code_search_url")
        self.commitSearchURL = try values.decode(String.self, forKey: "commit_search_url")
        self.emailsURL = try values.decode(String.self, forKey: "emails_url")
        self.emojisURL = try values.decode(String.self, forKey: "emojis_url")
        self.eventsURL = try values.decode(String.self, forKey: "events_url")
        self.feedsURL = try values.decode(String.self, forKey: "feeds_url")
        self.followersURL = try values.decode(String.self, forKey: "followers_url")
        self.followingURL = try values.decode(String.self, forKey: "following_url")
        self.gistsURL = try values.decode(String.self, forKey: "gists_url")
        self.hubURL = try values.decode(String.self, forKey: "hub_url")
        self.issueSearchURL = try values.decode(String.self, forKey: "issue_search_url")
        self.issuesURL = try values.decode(String.self, forKey: "issues_url")
        self.keysURL = try values.decode(String.self, forKey: "keys_url")
        self.labelSearchURL = try values.decode(String.self, forKey: "label_search_url")
        self.notificationsURL = try values.decode(String.self, forKey: "notifications_url")
        self.organizationURL = try values.decode(String.self, forKey: "organization_url")
        self.organizationRepositoriesURL = try values.decode(String.self, forKey: "organization_repositories_url")
        self.organizationTeamsURL = try values.decode(String.self, forKey: "organization_teams_url")
        self.publicGistsURL = try values.decode(String.self, forKey: "public_gists_url")
        self.rateLimitURL = try values.decode(String.self, forKey: "rate_limit_url")
        self.repositoryURL = try values.decode(String.self, forKey: "repository_url")
        self.repositorySearchURL = try values.decode(String.self, forKey: "repository_search_url")
        self.currentUserRepositoriesURL = try values.decode(String.self, forKey: "current_user_repositories_url")
        self.starredURL = try values.decode(String.self, forKey: "starred_url")
        self.starredGistsURL = try values.decode(String.self, forKey: "starred_gists_url")
        self.topicSearchURL = try values.decodeIfPresent(String.self, forKey: "topic_search_url")
        self.userURL = try values.decode(String.self, forKey: "user_url")
        self.userOrganizationsURL = try values.decode(String.self, forKey: "user_organizations_url")
        self.userRepositoriesURL = try values.decode(String.self, forKey: "user_repositories_url")
        self.userSearchURL = try values.decode(String.self, forKey: "user_search_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(currentUserURL, forKey: "current_user_url")
        try values.encode(currentUserAuthorizationsHTMLURL, forKey: "current_user_authorizations_html_url")
        try values.encode(authorizationsURL, forKey: "authorizations_url")
        try values.encode(codeSearchURL, forKey: "code_search_url")
        try values.encode(commitSearchURL, forKey: "commit_search_url")
        try values.encode(emailsURL, forKey: "emails_url")
        try values.encode(emojisURL, forKey: "emojis_url")
        try values.encode(eventsURL, forKey: "events_url")
        try values.encode(feedsURL, forKey: "feeds_url")
        try values.encode(followersURL, forKey: "followers_url")
        try values.encode(followingURL, forKey: "following_url")
        try values.encode(gistsURL, forKey: "gists_url")
        try values.encode(hubURL, forKey: "hub_url")
        try values.encode(issueSearchURL, forKey: "issue_search_url")
        try values.encode(issuesURL, forKey: "issues_url")
        try values.encode(keysURL, forKey: "keys_url")
        try values.encode(labelSearchURL, forKey: "label_search_url")
        try values.encode(notificationsURL, forKey: "notifications_url")
        try values.encode(organizationURL, forKey: "organization_url")
        try values.encode(organizationRepositoriesURL, forKey: "organization_repositories_url")
        try values.encode(organizationTeamsURL, forKey: "organization_teams_url")
        try values.encode(publicGistsURL, forKey: "public_gists_url")
        try values.encode(rateLimitURL, forKey: "rate_limit_url")
        try values.encode(repositoryURL, forKey: "repository_url")
        try values.encode(repositorySearchURL, forKey: "repository_search_url")
        try values.encode(currentUserRepositoriesURL, forKey: "current_user_repositories_url")
        try values.encode(starredURL, forKey: "starred_url")
        try values.encode(starredGistsURL, forKey: "starred_gists_url")
        try values.encodeIfPresent(topicSearchURL, forKey: "topic_search_url")
        try values.encode(userURL, forKey: "user_url")
        try values.encode(userOrganizationsURL, forKey: "user_organizations_url")
        try values.encode(userRepositoriesURL, forKey: "user_repositories_url")
        try values.encode(userSearchURL, forKey: "user_search_url")
    }
}
