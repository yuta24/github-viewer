// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Pull Request Reviews are reviews on pull requests.
public struct PullRequestReview: Codable, Identifiable {
    /// Unique identifier of the review
    ///
    /// Example: 42
    public var id: Int
    /// Example: "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA="
    public var nodeID: String
    /// Simple User
    public var user: NullableSimpleUser?
    /// The text of the review.
    ///
    /// Example: "This looks great."
    public var body: String
    /// Example: "CHANGES_REQUESTED"
    public var state: String
    /// Example: "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
    public var htmlURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/12"
    public var pullRequestURL: URL
    public var links: Links
    public var submittedAt: Date?
    /// A commit SHA for the review.
    ///
    /// Example: "54bb654c9e6025347f57900a4a5c2313a96b8035"
    public var commitID: String
    public var bodyHTML: String?
    public var bodyText: String?
    /// Author_association
    ///
    /// How the author is associated with the repository.
    ///
    /// Example: "OWNER"
    public var authorAssociation: AuthorAssociation

    public struct Links: Codable {
        public var html: HTML
        public var pullRequest: PullRequest

        public struct HTML: Codable {
            public var href: String

            public init(href: String) {
                self.href = href
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.href = try values.decode(String.self, forKey: "href")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(href, forKey: "href")
            }
        }

        public struct PullRequest: Codable {
            public var href: String

            public init(href: String) {
                self.href = href
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.href = try values.decode(String.self, forKey: "href")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(href, forKey: "href")
            }
        }

        public init(html: HTML, pullRequest: PullRequest) {
            self.html = html
            self.pullRequest = pullRequest
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.html = try values.decode(HTML.self, forKey: "html")
            self.pullRequest = try values.decode(PullRequest.self, forKey: "pull_request")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(html, forKey: "html")
            try values.encode(pullRequest, forKey: "pull_request")
        }
    }

    public init(id: Int, nodeID: String, user: NullableSimpleUser? = nil, body: String, state: String, htmlURL: URL, pullRequestURL: URL, links: Links, submittedAt: Date? = nil, commitID: String, bodyHTML: String? = nil, bodyText: String? = nil, authorAssociation: AuthorAssociation) {
        self.id = id
        self.nodeID = nodeID
        self.user = user
        self.body = body
        self.state = state
        self.htmlURL = htmlURL
        self.pullRequestURL = pullRequestURL
        self.links = links
        self.submittedAt = submittedAt
        self.commitID = commitID
        self.bodyHTML = bodyHTML
        self.bodyText = bodyText
        self.authorAssociation = authorAssociation
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.user = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "user")
        self.body = try values.decode(String.self, forKey: "body")
        self.state = try values.decode(String.self, forKey: "state")
        self.htmlURL = try values.decode(URL.self, forKey: "html_url")
        self.pullRequestURL = try values.decode(URL.self, forKey: "pull_request_url")
        self.links = try values.decode(Links.self, forKey: "_links")
        self.submittedAt = try values.decodeIfPresent(Date.self, forKey: "submitted_at")
        self.commitID = try values.decode(String.self, forKey: "commit_id")
        self.bodyHTML = try values.decodeIfPresent(String.self, forKey: "body_html")
        self.bodyText = try values.decodeIfPresent(String.self, forKey: "body_text")
        self.authorAssociation = try values.decode(AuthorAssociation.self, forKey: "author_association")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encodeIfPresent(user, forKey: "user")
        try values.encode(body, forKey: "body")
        try values.encode(state, forKey: "state")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encode(pullRequestURL, forKey: "pull_request_url")
        try values.encode(links, forKey: "_links")
        try values.encodeIfPresent(submittedAt, forKey: "submitted_at")
        try values.encode(commitID, forKey: "commit_id")
        try values.encodeIfPresent(bodyHTML, forKey: "body_html")
        try values.encodeIfPresent(bodyText, forKey: "body_text")
        try values.encode(authorAssociation, forKey: "author_association")
    }
}
