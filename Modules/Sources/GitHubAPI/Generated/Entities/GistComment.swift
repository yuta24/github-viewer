// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A comment made to a gist.
public struct GistComment: Codable, Identifiable {
    public var id: Int
    /// Example: "MDExOkdpc3RDb21tZW50MQ=="
    public var nodeID: String
    /// Example: "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1"
    public var url: URL
    /// The comment text.
    ///
    /// Example: "Body of the attachment"
    public var body: String
    /// Simple User
    public var user: NullableSimpleUser?
    /// Example: "2011-04-18T23:23:56Z"
    public var createdAt: Date
    /// Example: "2011-04-18T23:23:56Z"
    public var updatedAt: Date
    /// Author_association
    ///
    /// How the author is associated with the repository.
    ///
    /// Example: "OWNER"
    public var authorAssociation: AuthorAssociation

    public init(id: Int, nodeID: String, url: URL, body: String, user: NullableSimpleUser? = nil, createdAt: Date, updatedAt: Date, authorAssociation: AuthorAssociation) {
        self.id = id
        self.nodeID = nodeID
        self.url = url
        self.body = body
        self.user = user
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.authorAssociation = authorAssociation
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.url = try values.decode(URL.self, forKey: "url")
        self.body = try values.decode(String.self, forKey: "body")
        self.user = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "user")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.authorAssociation = try values.decode(AuthorAssociation.self, forKey: "author_association")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(url, forKey: "url")
        try values.encode(body, forKey: "body")
        try values.encodeIfPresent(user, forKey: "user")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encode(authorAssociation, forKey: "author_association")
    }
}
