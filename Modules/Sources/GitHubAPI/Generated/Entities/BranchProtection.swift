// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct BranchProtection: Codable {
    public var url: String?
    public var isEnabled: Bool?
    /// Protected Branch Required Status Check
    public var requiredStatusChecks: ProtectedBranchRequiredStatusCheck?
    /// Protected Branch Admin Enforced
    public var enforceAdmins: ProtectedBranchAdminEnforced?
    /// Protected Branch Pull Request Review
    public var requiredPullRequestReviews: ProtectedBranchPullRequestReview?
    /// Branch Restriction Policy
    public var restrictions: BranchRestrictionPolicy?
    public var requiredLinearHistory: RequiredLinearHistory?
    public var allowForcePushes: AllowForcePushes?
    public var allowDeletions: AllowDeletions?
    public var blockCreations: BlockCreations?
    public var requiredConversationResolution: RequiredConversationResolution?
    /// Example: "branch/with/protection"
    public var name: String?
    /// Example: "https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"
    public var protectionURL: String?
    public var requiredSignatures: RequiredSignatures?

    public struct RequiredLinearHistory: Codable {
        public var isEnabled: Bool?

        public init(isEnabled: Bool? = nil) {
            self.isEnabled = isEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(isEnabled, forKey: "enabled")
        }
    }

    public struct AllowForcePushes: Codable {
        public var isEnabled: Bool?

        public init(isEnabled: Bool? = nil) {
            self.isEnabled = isEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(isEnabled, forKey: "enabled")
        }
    }

    public struct AllowDeletions: Codable {
        public var isEnabled: Bool?

        public init(isEnabled: Bool? = nil) {
            self.isEnabled = isEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(isEnabled, forKey: "enabled")
        }
    }

    public struct BlockCreations: Codable {
        public var isEnabled: Bool?

        public init(isEnabled: Bool? = nil) {
            self.isEnabled = isEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(isEnabled, forKey: "enabled")
        }
    }

    public struct RequiredConversationResolution: Codable {
        public var isEnabled: Bool?

        public init(isEnabled: Bool? = nil) {
            self.isEnabled = isEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(isEnabled, forKey: "enabled")
        }
    }

    public struct RequiredSignatures: Codable {
        /// Example: "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
        public var url: URL
        /// Example: true
        public var isEnabled: Bool

        public init(url: URL, isEnabled: Bool) {
            self.url = url
            self.isEnabled = isEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.url = try values.decode(URL.self, forKey: "url")
            self.isEnabled = try values.decode(Bool.self, forKey: "enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(url, forKey: "url")
            try values.encode(isEnabled, forKey: "enabled")
        }
    }

    public init(url: String? = nil, isEnabled: Bool? = nil, requiredStatusChecks: ProtectedBranchRequiredStatusCheck? = nil, enforceAdmins: ProtectedBranchAdminEnforced? = nil, requiredPullRequestReviews: ProtectedBranchPullRequestReview? = nil, restrictions: BranchRestrictionPolicy? = nil, requiredLinearHistory: RequiredLinearHistory? = nil, allowForcePushes: AllowForcePushes? = nil, allowDeletions: AllowDeletions? = nil, blockCreations: BlockCreations? = nil, requiredConversationResolution: RequiredConversationResolution? = nil, name: String? = nil, protectionURL: String? = nil, requiredSignatures: RequiredSignatures? = nil) {
        self.url = url
        self.isEnabled = isEnabled
        self.requiredStatusChecks = requiredStatusChecks
        self.enforceAdmins = enforceAdmins
        self.requiredPullRequestReviews = requiredPullRequestReviews
        self.restrictions = restrictions
        self.requiredLinearHistory = requiredLinearHistory
        self.allowForcePushes = allowForcePushes
        self.allowDeletions = allowDeletions
        self.blockCreations = blockCreations
        self.requiredConversationResolution = requiredConversationResolution
        self.name = name
        self.protectionURL = protectionURL
        self.requiredSignatures = requiredSignatures
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.url = try values.decodeIfPresent(String.self, forKey: "url")
        self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "enabled")
        self.requiredStatusChecks = try values.decodeIfPresent(ProtectedBranchRequiredStatusCheck.self, forKey: "required_status_checks")
        self.enforceAdmins = try values.decodeIfPresent(ProtectedBranchAdminEnforced.self, forKey: "enforce_admins")
        self.requiredPullRequestReviews = try values.decodeIfPresent(ProtectedBranchPullRequestReview.self, forKey: "required_pull_request_reviews")
        self.restrictions = try values.decodeIfPresent(BranchRestrictionPolicy.self, forKey: "restrictions")
        self.requiredLinearHistory = try values.decodeIfPresent(RequiredLinearHistory.self, forKey: "required_linear_history")
        self.allowForcePushes = try values.decodeIfPresent(AllowForcePushes.self, forKey: "allow_force_pushes")
        self.allowDeletions = try values.decodeIfPresent(AllowDeletions.self, forKey: "allow_deletions")
        self.blockCreations = try values.decodeIfPresent(BlockCreations.self, forKey: "block_creations")
        self.requiredConversationResolution = try values.decodeIfPresent(RequiredConversationResolution.self, forKey: "required_conversation_resolution")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.protectionURL = try values.decodeIfPresent(String.self, forKey: "protection_url")
        self.requiredSignatures = try values.decodeIfPresent(RequiredSignatures.self, forKey: "required_signatures")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(url, forKey: "url")
        try values.encodeIfPresent(isEnabled, forKey: "enabled")
        try values.encodeIfPresent(requiredStatusChecks, forKey: "required_status_checks")
        try values.encodeIfPresent(enforceAdmins, forKey: "enforce_admins")
        try values.encodeIfPresent(requiredPullRequestReviews, forKey: "required_pull_request_reviews")
        try values.encodeIfPresent(restrictions, forKey: "restrictions")
        try values.encodeIfPresent(requiredLinearHistory, forKey: "required_linear_history")
        try values.encodeIfPresent(allowForcePushes, forKey: "allow_force_pushes")
        try values.encodeIfPresent(allowDeletions, forKey: "allow_deletions")
        try values.encodeIfPresent(blockCreations, forKey: "block_creations")
        try values.encodeIfPresent(requiredConversationResolution, forKey: "required_conversation_resolution")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(protectionURL, forKey: "protection_url")
        try values.encodeIfPresent(requiredSignatures, forKey: "required_signatures")
    }
}
