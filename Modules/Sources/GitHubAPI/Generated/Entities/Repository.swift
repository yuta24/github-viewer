// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A git repository
public struct Repository: Codable, Identifiable {
    /// Unique identifier of the repository
    ///
    /// Example: 42
    public var id: Int
    /// Example: "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
    public var nodeID: String
    /// The name of the repository.
    ///
    /// Example: "Team Environment"
    public var name: String
    /// Example: "octocat/Hello-World"
    public var fullName: String
    /// License Simple
    public var license: NullableLicenseSimple?
    /// Simple User
    public var organization: NullableSimpleUser?
    public var forks: Int
    public var permissions: Permissions?
    /// Simple User
    public var owner: SimpleUser
    /// Whether the repository is private or public.
    public var isPrivate: Bool
    /// Example: "https://github.com/octocat/Hello-World"
    public var htmlURL: URL
    /// Example: "This your first repo!"
    public var description: String?
    public var isFork: Bool
    /// Example: "https://api.github.com/repos/octocat/Hello-World"
    public var url: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
    public var archiveURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
    public var assigneesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
    public var blobsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
    public var branchesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
    public var collaboratorsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
    public var commentsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
    public var commitsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
    public var compareURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
    public var contentsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/contributors"
    public var contributorsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/deployments"
    public var deploymentsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/downloads"
    public var downloadsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/events"
    public var eventsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/forks"
    public var forksURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
    public var gitCommitsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
    public var gitRefsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
    public var gitTagsURL: String
    /// Example: "git:github.com/octocat/Hello-World.git"
    public var gitURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
    public var issueCommentURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
    public var issueEventsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
    public var issuesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
    public var keysURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
    public var labelsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/languages"
    public var languagesURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/merges"
    public var mergesURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
    public var milestonesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
    public var notificationsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
    public var pullsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
    public var releasesURL: String
    /// Example: "git@github.com:octocat/Hello-World.git"
    public var sshURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/stargazers"
    public var stargazersURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
    public var statusesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/subscribers"
    public var subscribersURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/subscription"
    public var subscriptionURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/tags"
    public var tagsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/teams"
    public var teamsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
    public var treesURL: String
    /// Example: "https://github.com/octocat/Hello-World.git"
    public var cloneURL: String
    /// Example: "git:git.example.com/octocat/Hello-World"
    public var mirrorURL: URL?
    /// Example: "http://api.github.com/repos/octocat/Hello-World/hooks"
    public var hooksURL: URL
    /// Example: "https://svn.github.com/octocat/Hello-World"
    public var svnURL: URL
    /// Example: "https://github.com"
    public var homepage: URL?
    public var language: String?
    public var forksCount: Int
    /// Example: 80
    public var stargazersCount: Int
    /// Example: 80
    public var watchersCount: Int
    /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
    ///
    /// Example: 108
    public var size: Int
    /// The default branch of the repository.
    ///
    /// Example: "master"
    public var defaultBranch: String
    public var openIssuesCount: Int
    /// Whether this repository acts as a template that can be used to generate new repositories.
    ///
    /// Example: true
    public var isTemplate: Bool
    public var topics: [String]?
    /// Whether issues are enabled.
    ///
    /// Example: true
    public var hasIssues: Bool
    /// Whether projects are enabled.
    ///
    /// Example: true
    public var hasProjects: Bool
    /// Whether the wiki is enabled.
    ///
    /// Example: true
    public var hasWiki: Bool
    public var hasPages: Bool
    /// Whether downloads are enabled.
    ///
    /// Example: true
    public var hasDownloads: Bool
    /// Whether the repository is archived.
    public var isArchived: Bool
    /// Returns whether or not this repository disabled.
    public var isDisabled: Bool
    /// The repository visibility: public, private, or internal.
    public var visibility: String?
    /// Example: "2011-01-26T19:06:43Z"
    public var pushedAt: Date?
    /// Example: "2011-01-26T19:01:12Z"
    public var createdAt: Date?
    /// Example: "2011-01-26T19:14:43Z"
    public var updatedAt: Date?
    /// Whether to allow rebase merges for pull requests.
    ///
    /// Example: true
    public var allowRebaseMerge: Bool
    public var templateRepository: TemplateRepository?
    public var tempCloneToken: String?
    /// Whether to allow squash merges for pull requests.
    ///
    /// Example: true
    public var allowSquashMerge: Bool
    /// Whether to allow Auto-merge to be used on pull requests.
    ///
    /// Example: false
    public var allowAutoMerge: Bool
    /// Whether to delete head branches when pull requests are merged
    ///
    /// Example: false
    public var deleteBranchOnMerge: Bool
    /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
    ///
    /// Example: false
    public var allowUpdateBranch: Bool
    /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
    ///
    /// - warning: Deprecated.
    public var useSquashPrTitleAsDefault: Bool
    /// The default value for a squash merge commit title:
    /// 
    /// - `PR_TITLE` - default to the pull request's title.
    /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    public var squashMergeCommitTitle: SquashMergeCommitTitle?
    /// The default value for a squash merge commit message:
    /// 
    /// - `PR_BODY` - default to the pull request's body.
    /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
    /// - `BLANK` - default to a blank commit message.
    public var squashMergeCommitMessage: SquashMergeCommitMessage?
    /// The default value for a merge commit title.
    /// 
    /// - `PR_TITLE` - default to the pull request's title.
    /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    public var mergeCommitTitle: MergeCommitTitle?
    /// The default value for a merge commit message.
    /// 
    /// - `PR_TITLE` - default to the pull request's title.
    /// - `PR_BODY` - default to the pull request's body.
    /// - `BLANK` - default to a blank commit message.
    public var mergeCommitMessage: MergeCommitMessage?
    /// Whether to allow merge commits for pull requests.
    ///
    /// Example: true
    public var allowMergeCommit: Bool
    /// Whether to allow forking this repo
    public var allowForking: Bool?
    /// Whether to require contributors to sign off on web-based commits
    public var isWebCommitSignoffRequired: Bool
    public var subscribersCount: Int?
    public var networkCount: Int?
    public var openIssues: Int
    public var watchers: Int
    public var masterBranch: String?
    /// Example: "2020-07-09T00:17:42Z"
    public var starredAt: String?
    /// Whether anonymous git access is enabled for this repository
    public var isAnonymousAccessEnabled: Bool?

    public struct Permissions: Codable {
        public var isAdmin: Bool
        public var isPull: Bool
        public var isTriage: Bool?
        public var isPush: Bool
        public var isMaintain: Bool?

        public init(isAdmin: Bool, isPull: Bool, isTriage: Bool? = nil, isPush: Bool, isMaintain: Bool? = nil) {
            self.isAdmin = isAdmin
            self.isPull = isPull
            self.isTriage = isTriage
            self.isPush = isPush
            self.isMaintain = isMaintain
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isAdmin = try values.decode(Bool.self, forKey: "admin")
            self.isPull = try values.decode(Bool.self, forKey: "pull")
            self.isTriage = try values.decodeIfPresent(Bool.self, forKey: "triage")
            self.isPush = try values.decode(Bool.self, forKey: "push")
            self.isMaintain = try values.decodeIfPresent(Bool.self, forKey: "maintain")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(isAdmin, forKey: "admin")
            try values.encode(isPull, forKey: "pull")
            try values.encodeIfPresent(isTriage, forKey: "triage")
            try values.encode(isPush, forKey: "push")
            try values.encodeIfPresent(isMaintain, forKey: "maintain")
        }
    }

    public struct TemplateRepository: Codable, Identifiable {
        public var id: Int?
        public var nodeID: String?
        public var name: String?
        public var fullName: String?
        public var owner: Owner?
        public var isPrivate: Bool?
        public var htmlURL: String?
        public var description: String?
        public var isFork: Bool?
        public var url: String?
        public var archiveURL: String?
        public var assigneesURL: String?
        public var blobsURL: String?
        public var branchesURL: String?
        public var collaboratorsURL: String?
        public var commentsURL: String?
        public var commitsURL: String?
        public var compareURL: String?
        public var contentsURL: String?
        public var contributorsURL: String?
        public var deploymentsURL: String?
        public var downloadsURL: String?
        public var eventsURL: String?
        public var forksURL: String?
        public var gitCommitsURL: String?
        public var gitRefsURL: String?
        public var gitTagsURL: String?
        public var gitURL: String?
        public var issueCommentURL: String?
        public var issueEventsURL: String?
        public var issuesURL: String?
        public var keysURL: String?
        public var labelsURL: String?
        public var languagesURL: String?
        public var mergesURL: String?
        public var milestonesURL: String?
        public var notificationsURL: String?
        public var pullsURL: String?
        public var releasesURL: String?
        public var sshURL: String?
        public var stargazersURL: String?
        public var statusesURL: String?
        public var subscribersURL: String?
        public var subscriptionURL: String?
        public var tagsURL: String?
        public var teamsURL: String?
        public var treesURL: String?
        public var cloneURL: String?
        public var mirrorURL: String?
        public var hooksURL: String?
        public var svnURL: String?
        public var homepage: String?
        public var language: String?
        public var forksCount: Int?
        public var stargazersCount: Int?
        public var watchersCount: Int?
        public var size: Int?
        public var defaultBranch: String?
        public var openIssuesCount: Int?
        public var isTemplate: Bool?
        public var topics: [String]?
        public var hasIssues: Bool?
        public var hasProjects: Bool?
        public var hasWiki: Bool?
        public var hasPages: Bool?
        public var hasDownloads: Bool?
        public var isArchived: Bool?
        public var isDisabled: Bool?
        public var visibility: String?
        public var pushedAt: String?
        public var createdAt: String?
        public var updatedAt: String?
        public var permissions: Permissions?
        public var allowRebaseMerge: Bool?
        public var tempCloneToken: String?
        public var allowSquashMerge: Bool?
        public var allowAutoMerge: Bool?
        public var deleteBranchOnMerge: Bool?
        public var allowUpdateBranch: Bool?
        public var useSquashPrTitleAsDefault: Bool?
        /// The default value for a squash merge commit title:
        /// 
        /// - `PR_TITLE` - default to the pull request's title.
        /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
        public var squashMergeCommitTitle: SquashMergeCommitTitle?
        /// The default value for a squash merge commit message:
        /// 
        /// - `PR_BODY` - default to the pull request's body.
        /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
        /// - `BLANK` - default to a blank commit message.
        public var squashMergeCommitMessage: SquashMergeCommitMessage?
        /// The default value for a merge commit title.
        /// 
        /// - `PR_TITLE` - default to the pull request's title.
        /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
        public var mergeCommitTitle: MergeCommitTitle?
        /// The default value for a merge commit message.
        /// 
        /// - `PR_TITLE` - default to the pull request's title.
        /// - `PR_BODY` - default to the pull request's body.
        /// - `BLANK` - default to a blank commit message.
        public var mergeCommitMessage: MergeCommitMessage?
        public var allowMergeCommit: Bool?
        public var subscribersCount: Int?
        public var networkCount: Int?

        public struct Owner: Codable, Identifiable {
            public var login: String?
            public var id: Int?
            public var nodeID: String?
            public var avatarURL: String?
            public var gravatarID: String?
            public var url: String?
            public var htmlURL: String?
            public var followersURL: String?
            public var followingURL: String?
            public var gistsURL: String?
            public var starredURL: String?
            public var subscriptionsURL: String?
            public var organizationsURL: String?
            public var reposURL: String?
            public var eventsURL: String?
            public var receivedEventsURL: String?
            public var type: String?
            public var isSiteAdmin: Bool?

            public init(login: String? = nil, id: Int? = nil, nodeID: String? = nil, avatarURL: String? = nil, gravatarID: String? = nil, url: String? = nil, htmlURL: String? = nil, followersURL: String? = nil, followingURL: String? = nil, gistsURL: String? = nil, starredURL: String? = nil, subscriptionsURL: String? = nil, organizationsURL: String? = nil, reposURL: String? = nil, eventsURL: String? = nil, receivedEventsURL: String? = nil, type: String? = nil, isSiteAdmin: Bool? = nil) {
                self.login = login
                self.id = id
                self.nodeID = nodeID
                self.avatarURL = avatarURL
                self.gravatarID = gravatarID
                self.url = url
                self.htmlURL = htmlURL
                self.followersURL = followersURL
                self.followingURL = followingURL
                self.gistsURL = gistsURL
                self.starredURL = starredURL
                self.subscriptionsURL = subscriptionsURL
                self.organizationsURL = organizationsURL
                self.reposURL = reposURL
                self.eventsURL = eventsURL
                self.receivedEventsURL = receivedEventsURL
                self.type = type
                self.isSiteAdmin = isSiteAdmin
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.login = try values.decodeIfPresent(String.self, forKey: "login")
                self.id = try values.decodeIfPresent(Int.self, forKey: "id")
                self.nodeID = try values.decodeIfPresent(String.self, forKey: "node_id")
                self.avatarURL = try values.decodeIfPresent(String.self, forKey: "avatar_url")
                self.gravatarID = try values.decodeIfPresent(String.self, forKey: "gravatar_id")
                self.url = try values.decodeIfPresent(String.self, forKey: "url")
                self.htmlURL = try values.decodeIfPresent(String.self, forKey: "html_url")
                self.followersURL = try values.decodeIfPresent(String.self, forKey: "followers_url")
                self.followingURL = try values.decodeIfPresent(String.self, forKey: "following_url")
                self.gistsURL = try values.decodeIfPresent(String.self, forKey: "gists_url")
                self.starredURL = try values.decodeIfPresent(String.self, forKey: "starred_url")
                self.subscriptionsURL = try values.decodeIfPresent(String.self, forKey: "subscriptions_url")
                self.organizationsURL = try values.decodeIfPresent(String.self, forKey: "organizations_url")
                self.reposURL = try values.decodeIfPresent(String.self, forKey: "repos_url")
                self.eventsURL = try values.decodeIfPresent(String.self, forKey: "events_url")
                self.receivedEventsURL = try values.decodeIfPresent(String.self, forKey: "received_events_url")
                self.type = try values.decodeIfPresent(String.self, forKey: "type")
                self.isSiteAdmin = try values.decodeIfPresent(Bool.self, forKey: "site_admin")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(login, forKey: "login")
                try values.encodeIfPresent(id, forKey: "id")
                try values.encodeIfPresent(nodeID, forKey: "node_id")
                try values.encodeIfPresent(avatarURL, forKey: "avatar_url")
                try values.encodeIfPresent(gravatarID, forKey: "gravatar_id")
                try values.encodeIfPresent(url, forKey: "url")
                try values.encodeIfPresent(htmlURL, forKey: "html_url")
                try values.encodeIfPresent(followersURL, forKey: "followers_url")
                try values.encodeIfPresent(followingURL, forKey: "following_url")
                try values.encodeIfPresent(gistsURL, forKey: "gists_url")
                try values.encodeIfPresent(starredURL, forKey: "starred_url")
                try values.encodeIfPresent(subscriptionsURL, forKey: "subscriptions_url")
                try values.encodeIfPresent(organizationsURL, forKey: "organizations_url")
                try values.encodeIfPresent(reposURL, forKey: "repos_url")
                try values.encodeIfPresent(eventsURL, forKey: "events_url")
                try values.encodeIfPresent(receivedEventsURL, forKey: "received_events_url")
                try values.encodeIfPresent(type, forKey: "type")
                try values.encodeIfPresent(isSiteAdmin, forKey: "site_admin")
            }
        }

        public struct Permissions: Codable {
            public var isAdmin: Bool?
            public var isMaintain: Bool?
            public var isPush: Bool?
            public var isTriage: Bool?
            public var isPull: Bool?

            public init(isAdmin: Bool? = nil, isMaintain: Bool? = nil, isPush: Bool? = nil, isTriage: Bool? = nil, isPull: Bool? = nil) {
                self.isAdmin = isAdmin
                self.isMaintain = isMaintain
                self.isPush = isPush
                self.isTriage = isTriage
                self.isPull = isPull
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.isAdmin = try values.decodeIfPresent(Bool.self, forKey: "admin")
                self.isMaintain = try values.decodeIfPresent(Bool.self, forKey: "maintain")
                self.isPush = try values.decodeIfPresent(Bool.self, forKey: "push")
                self.isTriage = try values.decodeIfPresent(Bool.self, forKey: "triage")
                self.isPull = try values.decodeIfPresent(Bool.self, forKey: "pull")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(isAdmin, forKey: "admin")
                try values.encodeIfPresent(isMaintain, forKey: "maintain")
                try values.encodeIfPresent(isPush, forKey: "push")
                try values.encodeIfPresent(isTriage, forKey: "triage")
                try values.encodeIfPresent(isPull, forKey: "pull")
            }
        }

        /// The default value for a squash merge commit title:
        /// 
        /// - `PR_TITLE` - default to the pull request's title.
        /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
        public enum SquashMergeCommitTitle: String, Codable, CaseIterable {
            case prTitle = "PR_TITLE"
            case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
        }

        /// The default value for a squash merge commit message:
        /// 
        /// - `PR_BODY` - default to the pull request's body.
        /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
        /// - `BLANK` - default to a blank commit message.
        public enum SquashMergeCommitMessage: String, Codable, CaseIterable {
            case prBody = "PR_BODY"
            case commitMessages = "COMMIT_MESSAGES"
            case blank = "BLANK"
        }

        /// The default value for a merge commit title.
        /// 
        /// - `PR_TITLE` - default to the pull request's title.
        /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
        public enum MergeCommitTitle: String, Codable, CaseIterable {
            case prTitle = "PR_TITLE"
            case mergeMessage = "MERGE_MESSAGE"
        }

        /// The default value for a merge commit message.
        /// 
        /// - `PR_TITLE` - default to the pull request's title.
        /// - `PR_BODY` - default to the pull request's body.
        /// - `BLANK` - default to a blank commit message.
        public enum MergeCommitMessage: String, Codable, CaseIterable {
            case prBody = "PR_BODY"
            case prTitle = "PR_TITLE"
            case blank = "BLANK"
        }

        public init(id: Int? = nil, nodeID: String? = nil, name: String? = nil, fullName: String? = nil, owner: Owner? = nil, isPrivate: Bool? = nil, htmlURL: String? = nil, description: String? = nil, isFork: Bool? = nil, url: String? = nil, archiveURL: String? = nil, assigneesURL: String? = nil, blobsURL: String? = nil, branchesURL: String? = nil, collaboratorsURL: String? = nil, commentsURL: String? = nil, commitsURL: String? = nil, compareURL: String? = nil, contentsURL: String? = nil, contributorsURL: String? = nil, deploymentsURL: String? = nil, downloadsURL: String? = nil, eventsURL: String? = nil, forksURL: String? = nil, gitCommitsURL: String? = nil, gitRefsURL: String? = nil, gitTagsURL: String? = nil, gitURL: String? = nil, issueCommentURL: String? = nil, issueEventsURL: String? = nil, issuesURL: String? = nil, keysURL: String? = nil, labelsURL: String? = nil, languagesURL: String? = nil, mergesURL: String? = nil, milestonesURL: String? = nil, notificationsURL: String? = nil, pullsURL: String? = nil, releasesURL: String? = nil, sshURL: String? = nil, stargazersURL: String? = nil, statusesURL: String? = nil, subscribersURL: String? = nil, subscriptionURL: String? = nil, tagsURL: String? = nil, teamsURL: String? = nil, treesURL: String? = nil, cloneURL: String? = nil, mirrorURL: String? = nil, hooksURL: String? = nil, svnURL: String? = nil, homepage: String? = nil, language: String? = nil, forksCount: Int? = nil, stargazersCount: Int? = nil, watchersCount: Int? = nil, size: Int? = nil, defaultBranch: String? = nil, openIssuesCount: Int? = nil, isTemplate: Bool? = nil, topics: [String]? = nil, hasIssues: Bool? = nil, hasProjects: Bool? = nil, hasWiki: Bool? = nil, hasPages: Bool? = nil, hasDownloads: Bool? = nil, isArchived: Bool? = nil, isDisabled: Bool? = nil, visibility: String? = nil, pushedAt: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, permissions: Permissions? = nil, allowRebaseMerge: Bool? = nil, tempCloneToken: String? = nil, allowSquashMerge: Bool? = nil, allowAutoMerge: Bool? = nil, deleteBranchOnMerge: Bool? = nil, allowUpdateBranch: Bool? = nil, useSquashPrTitleAsDefault: Bool? = nil, squashMergeCommitTitle: SquashMergeCommitTitle? = nil, squashMergeCommitMessage: SquashMergeCommitMessage? = nil, mergeCommitTitle: MergeCommitTitle? = nil, mergeCommitMessage: MergeCommitMessage? = nil, allowMergeCommit: Bool? = nil, subscribersCount: Int? = nil, networkCount: Int? = nil) {
            self.id = id
            self.nodeID = nodeID
            self.name = name
            self.fullName = fullName
            self.owner = owner
            self.isPrivate = isPrivate
            self.htmlURL = htmlURL
            self.description = description
            self.isFork = isFork
            self.url = url
            self.archiveURL = archiveURL
            self.assigneesURL = assigneesURL
            self.blobsURL = blobsURL
            self.branchesURL = branchesURL
            self.collaboratorsURL = collaboratorsURL
            self.commentsURL = commentsURL
            self.commitsURL = commitsURL
            self.compareURL = compareURL
            self.contentsURL = contentsURL
            self.contributorsURL = contributorsURL
            self.deploymentsURL = deploymentsURL
            self.downloadsURL = downloadsURL
            self.eventsURL = eventsURL
            self.forksURL = forksURL
            self.gitCommitsURL = gitCommitsURL
            self.gitRefsURL = gitRefsURL
            self.gitTagsURL = gitTagsURL
            self.gitURL = gitURL
            self.issueCommentURL = issueCommentURL
            self.issueEventsURL = issueEventsURL
            self.issuesURL = issuesURL
            self.keysURL = keysURL
            self.labelsURL = labelsURL
            self.languagesURL = languagesURL
            self.mergesURL = mergesURL
            self.milestonesURL = milestonesURL
            self.notificationsURL = notificationsURL
            self.pullsURL = pullsURL
            self.releasesURL = releasesURL
            self.sshURL = sshURL
            self.stargazersURL = stargazersURL
            self.statusesURL = statusesURL
            self.subscribersURL = subscribersURL
            self.subscriptionURL = subscriptionURL
            self.tagsURL = tagsURL
            self.teamsURL = teamsURL
            self.treesURL = treesURL
            self.cloneURL = cloneURL
            self.mirrorURL = mirrorURL
            self.hooksURL = hooksURL
            self.svnURL = svnURL
            self.homepage = homepage
            self.language = language
            self.forksCount = forksCount
            self.stargazersCount = stargazersCount
            self.watchersCount = watchersCount
            self.size = size
            self.defaultBranch = defaultBranch
            self.openIssuesCount = openIssuesCount
            self.isTemplate = isTemplate
            self.topics = topics
            self.hasIssues = hasIssues
            self.hasProjects = hasProjects
            self.hasWiki = hasWiki
            self.hasPages = hasPages
            self.hasDownloads = hasDownloads
            self.isArchived = isArchived
            self.isDisabled = isDisabled
            self.visibility = visibility
            self.pushedAt = pushedAt
            self.createdAt = createdAt
            self.updatedAt = updatedAt
            self.permissions = permissions
            self.allowRebaseMerge = allowRebaseMerge
            self.tempCloneToken = tempCloneToken
            self.allowSquashMerge = allowSquashMerge
            self.allowAutoMerge = allowAutoMerge
            self.deleteBranchOnMerge = deleteBranchOnMerge
            self.allowUpdateBranch = allowUpdateBranch
            self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
            self.squashMergeCommitTitle = squashMergeCommitTitle
            self.squashMergeCommitMessage = squashMergeCommitMessage
            self.mergeCommitTitle = mergeCommitTitle
            self.mergeCommitMessage = mergeCommitMessage
            self.allowMergeCommit = allowMergeCommit
            self.subscribersCount = subscribersCount
            self.networkCount = networkCount
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(Int.self, forKey: "id")
            self.nodeID = try values.decodeIfPresent(String.self, forKey: "node_id")
            self.name = try values.decodeIfPresent(String.self, forKey: "name")
            self.fullName = try values.decodeIfPresent(String.self, forKey: "full_name")
            self.owner = try values.decodeIfPresent(Owner.self, forKey: "owner")
            self.isPrivate = try values.decodeIfPresent(Bool.self, forKey: "private")
            self.htmlURL = try values.decodeIfPresent(String.self, forKey: "html_url")
            self.description = try values.decodeIfPresent(String.self, forKey: "description")
            self.isFork = try values.decodeIfPresent(Bool.self, forKey: "fork")
            self.url = try values.decodeIfPresent(String.self, forKey: "url")
            self.archiveURL = try values.decodeIfPresent(String.self, forKey: "archive_url")
            self.assigneesURL = try values.decodeIfPresent(String.self, forKey: "assignees_url")
            self.blobsURL = try values.decodeIfPresent(String.self, forKey: "blobs_url")
            self.branchesURL = try values.decodeIfPresent(String.self, forKey: "branches_url")
            self.collaboratorsURL = try values.decodeIfPresent(String.self, forKey: "collaborators_url")
            self.commentsURL = try values.decodeIfPresent(String.self, forKey: "comments_url")
            self.commitsURL = try values.decodeIfPresent(String.self, forKey: "commits_url")
            self.compareURL = try values.decodeIfPresent(String.self, forKey: "compare_url")
            self.contentsURL = try values.decodeIfPresent(String.self, forKey: "contents_url")
            self.contributorsURL = try values.decodeIfPresent(String.self, forKey: "contributors_url")
            self.deploymentsURL = try values.decodeIfPresent(String.self, forKey: "deployments_url")
            self.downloadsURL = try values.decodeIfPresent(String.self, forKey: "downloads_url")
            self.eventsURL = try values.decodeIfPresent(String.self, forKey: "events_url")
            self.forksURL = try values.decodeIfPresent(String.self, forKey: "forks_url")
            self.gitCommitsURL = try values.decodeIfPresent(String.self, forKey: "git_commits_url")
            self.gitRefsURL = try values.decodeIfPresent(String.self, forKey: "git_refs_url")
            self.gitTagsURL = try values.decodeIfPresent(String.self, forKey: "git_tags_url")
            self.gitURL = try values.decodeIfPresent(String.self, forKey: "git_url")
            self.issueCommentURL = try values.decodeIfPresent(String.self, forKey: "issue_comment_url")
            self.issueEventsURL = try values.decodeIfPresent(String.self, forKey: "issue_events_url")
            self.issuesURL = try values.decodeIfPresent(String.self, forKey: "issues_url")
            self.keysURL = try values.decodeIfPresent(String.self, forKey: "keys_url")
            self.labelsURL = try values.decodeIfPresent(String.self, forKey: "labels_url")
            self.languagesURL = try values.decodeIfPresent(String.self, forKey: "languages_url")
            self.mergesURL = try values.decodeIfPresent(String.self, forKey: "merges_url")
            self.milestonesURL = try values.decodeIfPresent(String.self, forKey: "milestones_url")
            self.notificationsURL = try values.decodeIfPresent(String.self, forKey: "notifications_url")
            self.pullsURL = try values.decodeIfPresent(String.self, forKey: "pulls_url")
            self.releasesURL = try values.decodeIfPresent(String.self, forKey: "releases_url")
            self.sshURL = try values.decodeIfPresent(String.self, forKey: "ssh_url")
            self.stargazersURL = try values.decodeIfPresent(String.self, forKey: "stargazers_url")
            self.statusesURL = try values.decodeIfPresent(String.self, forKey: "statuses_url")
            self.subscribersURL = try values.decodeIfPresent(String.self, forKey: "subscribers_url")
            self.subscriptionURL = try values.decodeIfPresent(String.self, forKey: "subscription_url")
            self.tagsURL = try values.decodeIfPresent(String.self, forKey: "tags_url")
            self.teamsURL = try values.decodeIfPresent(String.self, forKey: "teams_url")
            self.treesURL = try values.decodeIfPresent(String.self, forKey: "trees_url")
            self.cloneURL = try values.decodeIfPresent(String.self, forKey: "clone_url")
            self.mirrorURL = try values.decodeIfPresent(String.self, forKey: "mirror_url")
            self.hooksURL = try values.decodeIfPresent(String.self, forKey: "hooks_url")
            self.svnURL = try values.decodeIfPresent(String.self, forKey: "svn_url")
            self.homepage = try values.decodeIfPresent(String.self, forKey: "homepage")
            self.language = try values.decodeIfPresent(String.self, forKey: "language")
            self.forksCount = try values.decodeIfPresent(Int.self, forKey: "forks_count")
            self.stargazersCount = try values.decodeIfPresent(Int.self, forKey: "stargazers_count")
            self.watchersCount = try values.decodeIfPresent(Int.self, forKey: "watchers_count")
            self.size = try values.decodeIfPresent(Int.self, forKey: "size")
            self.defaultBranch = try values.decodeIfPresent(String.self, forKey: "default_branch")
            self.openIssuesCount = try values.decodeIfPresent(Int.self, forKey: "open_issues_count")
            self.isTemplate = try values.decodeIfPresent(Bool.self, forKey: "is_template")
            self.topics = try values.decodeIfPresent([String].self, forKey: "topics")
            self.hasIssues = try values.decodeIfPresent(Bool.self, forKey: "has_issues")
            self.hasProjects = try values.decodeIfPresent(Bool.self, forKey: "has_projects")
            self.hasWiki = try values.decodeIfPresent(Bool.self, forKey: "has_wiki")
            self.hasPages = try values.decodeIfPresent(Bool.self, forKey: "has_pages")
            self.hasDownloads = try values.decodeIfPresent(Bool.self, forKey: "has_downloads")
            self.isArchived = try values.decodeIfPresent(Bool.self, forKey: "archived")
            self.isDisabled = try values.decodeIfPresent(Bool.self, forKey: "disabled")
            self.visibility = try values.decodeIfPresent(String.self, forKey: "visibility")
            self.pushedAt = try values.decodeIfPresent(String.self, forKey: "pushed_at")
            self.createdAt = try values.decodeIfPresent(String.self, forKey: "created_at")
            self.updatedAt = try values.decodeIfPresent(String.self, forKey: "updated_at")
            self.permissions = try values.decodeIfPresent(Permissions.self, forKey: "permissions")
            self.allowRebaseMerge = try values.decodeIfPresent(Bool.self, forKey: "allow_rebase_merge")
            self.tempCloneToken = try values.decodeIfPresent(String.self, forKey: "temp_clone_token")
            self.allowSquashMerge = try values.decodeIfPresent(Bool.self, forKey: "allow_squash_merge")
            self.allowAutoMerge = try values.decodeIfPresent(Bool.self, forKey: "allow_auto_merge")
            self.deleteBranchOnMerge = try values.decodeIfPresent(Bool.self, forKey: "delete_branch_on_merge")
            self.allowUpdateBranch = try values.decodeIfPresent(Bool.self, forKey: "allow_update_branch")
            self.useSquashPrTitleAsDefault = try values.decodeIfPresent(Bool.self, forKey: "use_squash_pr_title_as_default")
            self.squashMergeCommitTitle = try values.decodeIfPresent(SquashMergeCommitTitle.self, forKey: "squash_merge_commit_title")
            self.squashMergeCommitMessage = try values.decodeIfPresent(SquashMergeCommitMessage.self, forKey: "squash_merge_commit_message")
            self.mergeCommitTitle = try values.decodeIfPresent(MergeCommitTitle.self, forKey: "merge_commit_title")
            self.mergeCommitMessage = try values.decodeIfPresent(MergeCommitMessage.self, forKey: "merge_commit_message")
            self.allowMergeCommit = try values.decodeIfPresent(Bool.self, forKey: "allow_merge_commit")
            self.subscribersCount = try values.decodeIfPresent(Int.self, forKey: "subscribers_count")
            self.networkCount = try values.decodeIfPresent(Int.self, forKey: "network_count")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(nodeID, forKey: "node_id")
            try values.encodeIfPresent(name, forKey: "name")
            try values.encodeIfPresent(fullName, forKey: "full_name")
            try values.encodeIfPresent(owner, forKey: "owner")
            try values.encodeIfPresent(isPrivate, forKey: "private")
            try values.encodeIfPresent(htmlURL, forKey: "html_url")
            try values.encodeIfPresent(description, forKey: "description")
            try values.encodeIfPresent(isFork, forKey: "fork")
            try values.encodeIfPresent(url, forKey: "url")
            try values.encodeIfPresent(archiveURL, forKey: "archive_url")
            try values.encodeIfPresent(assigneesURL, forKey: "assignees_url")
            try values.encodeIfPresent(blobsURL, forKey: "blobs_url")
            try values.encodeIfPresent(branchesURL, forKey: "branches_url")
            try values.encodeIfPresent(collaboratorsURL, forKey: "collaborators_url")
            try values.encodeIfPresent(commentsURL, forKey: "comments_url")
            try values.encodeIfPresent(commitsURL, forKey: "commits_url")
            try values.encodeIfPresent(compareURL, forKey: "compare_url")
            try values.encodeIfPresent(contentsURL, forKey: "contents_url")
            try values.encodeIfPresent(contributorsURL, forKey: "contributors_url")
            try values.encodeIfPresent(deploymentsURL, forKey: "deployments_url")
            try values.encodeIfPresent(downloadsURL, forKey: "downloads_url")
            try values.encodeIfPresent(eventsURL, forKey: "events_url")
            try values.encodeIfPresent(forksURL, forKey: "forks_url")
            try values.encodeIfPresent(gitCommitsURL, forKey: "git_commits_url")
            try values.encodeIfPresent(gitRefsURL, forKey: "git_refs_url")
            try values.encodeIfPresent(gitTagsURL, forKey: "git_tags_url")
            try values.encodeIfPresent(gitURL, forKey: "git_url")
            try values.encodeIfPresent(issueCommentURL, forKey: "issue_comment_url")
            try values.encodeIfPresent(issueEventsURL, forKey: "issue_events_url")
            try values.encodeIfPresent(issuesURL, forKey: "issues_url")
            try values.encodeIfPresent(keysURL, forKey: "keys_url")
            try values.encodeIfPresent(labelsURL, forKey: "labels_url")
            try values.encodeIfPresent(languagesURL, forKey: "languages_url")
            try values.encodeIfPresent(mergesURL, forKey: "merges_url")
            try values.encodeIfPresent(milestonesURL, forKey: "milestones_url")
            try values.encodeIfPresent(notificationsURL, forKey: "notifications_url")
            try values.encodeIfPresent(pullsURL, forKey: "pulls_url")
            try values.encodeIfPresent(releasesURL, forKey: "releases_url")
            try values.encodeIfPresent(sshURL, forKey: "ssh_url")
            try values.encodeIfPresent(stargazersURL, forKey: "stargazers_url")
            try values.encodeIfPresent(statusesURL, forKey: "statuses_url")
            try values.encodeIfPresent(subscribersURL, forKey: "subscribers_url")
            try values.encodeIfPresent(subscriptionURL, forKey: "subscription_url")
            try values.encodeIfPresent(tagsURL, forKey: "tags_url")
            try values.encodeIfPresent(teamsURL, forKey: "teams_url")
            try values.encodeIfPresent(treesURL, forKey: "trees_url")
            try values.encodeIfPresent(cloneURL, forKey: "clone_url")
            try values.encodeIfPresent(mirrorURL, forKey: "mirror_url")
            try values.encodeIfPresent(hooksURL, forKey: "hooks_url")
            try values.encodeIfPresent(svnURL, forKey: "svn_url")
            try values.encodeIfPresent(homepage, forKey: "homepage")
            try values.encodeIfPresent(language, forKey: "language")
            try values.encodeIfPresent(forksCount, forKey: "forks_count")
            try values.encodeIfPresent(stargazersCount, forKey: "stargazers_count")
            try values.encodeIfPresent(watchersCount, forKey: "watchers_count")
            try values.encodeIfPresent(size, forKey: "size")
            try values.encodeIfPresent(defaultBranch, forKey: "default_branch")
            try values.encodeIfPresent(openIssuesCount, forKey: "open_issues_count")
            try values.encodeIfPresent(isTemplate, forKey: "is_template")
            try values.encodeIfPresent(topics, forKey: "topics")
            try values.encodeIfPresent(hasIssues, forKey: "has_issues")
            try values.encodeIfPresent(hasProjects, forKey: "has_projects")
            try values.encodeIfPresent(hasWiki, forKey: "has_wiki")
            try values.encodeIfPresent(hasPages, forKey: "has_pages")
            try values.encodeIfPresent(hasDownloads, forKey: "has_downloads")
            try values.encodeIfPresent(isArchived, forKey: "archived")
            try values.encodeIfPresent(isDisabled, forKey: "disabled")
            try values.encodeIfPresent(visibility, forKey: "visibility")
            try values.encodeIfPresent(pushedAt, forKey: "pushed_at")
            try values.encodeIfPresent(createdAt, forKey: "created_at")
            try values.encodeIfPresent(updatedAt, forKey: "updated_at")
            try values.encodeIfPresent(permissions, forKey: "permissions")
            try values.encodeIfPresent(allowRebaseMerge, forKey: "allow_rebase_merge")
            try values.encodeIfPresent(tempCloneToken, forKey: "temp_clone_token")
            try values.encodeIfPresent(allowSquashMerge, forKey: "allow_squash_merge")
            try values.encodeIfPresent(allowAutoMerge, forKey: "allow_auto_merge")
            try values.encodeIfPresent(deleteBranchOnMerge, forKey: "delete_branch_on_merge")
            try values.encodeIfPresent(allowUpdateBranch, forKey: "allow_update_branch")
            try values.encodeIfPresent(useSquashPrTitleAsDefault, forKey: "use_squash_pr_title_as_default")
            try values.encodeIfPresent(squashMergeCommitTitle, forKey: "squash_merge_commit_title")
            try values.encodeIfPresent(squashMergeCommitMessage, forKey: "squash_merge_commit_message")
            try values.encodeIfPresent(mergeCommitTitle, forKey: "merge_commit_title")
            try values.encodeIfPresent(mergeCommitMessage, forKey: "merge_commit_message")
            try values.encodeIfPresent(allowMergeCommit, forKey: "allow_merge_commit")
            try values.encodeIfPresent(subscribersCount, forKey: "subscribers_count")
            try values.encodeIfPresent(networkCount, forKey: "network_count")
        }
    }

    /// The default value for a squash merge commit title:
    /// 
    /// - `PR_TITLE` - default to the pull request's title.
    /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    public enum SquashMergeCommitTitle: String, Codable, CaseIterable {
        case prTitle = "PR_TITLE"
        case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
    }

    /// The default value for a squash merge commit message:
    /// 
    /// - `PR_BODY` - default to the pull request's body.
    /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
    /// - `BLANK` - default to a blank commit message.
    public enum SquashMergeCommitMessage: String, Codable, CaseIterable {
        case prBody = "PR_BODY"
        case commitMessages = "COMMIT_MESSAGES"
        case blank = "BLANK"
    }

    /// The default value for a merge commit title.
    /// 
    /// - `PR_TITLE` - default to the pull request's title.
    /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    public enum MergeCommitTitle: String, Codable, CaseIterable {
        case prTitle = "PR_TITLE"
        case mergeMessage = "MERGE_MESSAGE"
    }

    /// The default value for a merge commit message.
    /// 
    /// - `PR_TITLE` - default to the pull request's title.
    /// - `PR_BODY` - default to the pull request's body.
    /// - `BLANK` - default to a blank commit message.
    public enum MergeCommitMessage: String, Codable, CaseIterable {
        case prBody = "PR_BODY"
        case prTitle = "PR_TITLE"
        case blank = "BLANK"
    }

    public init(id: Int, nodeID: String, name: String, fullName: String, license: NullableLicenseSimple? = nil, organization: NullableSimpleUser? = nil, forks: Int, permissions: Permissions? = nil, owner: SimpleUser, isPrivate: Bool, htmlURL: URL, description: String? = nil, isFork: Bool, url: URL, archiveURL: String, assigneesURL: String, blobsURL: String, branchesURL: String, collaboratorsURL: String, commentsURL: String, commitsURL: String, compareURL: String, contentsURL: String, contributorsURL: URL, deploymentsURL: URL, downloadsURL: URL, eventsURL: URL, forksURL: URL, gitCommitsURL: String, gitRefsURL: String, gitTagsURL: String, gitURL: String, issueCommentURL: String, issueEventsURL: String, issuesURL: String, keysURL: String, labelsURL: String, languagesURL: URL, mergesURL: URL, milestonesURL: String, notificationsURL: String, pullsURL: String, releasesURL: String, sshURL: String, stargazersURL: URL, statusesURL: String, subscribersURL: URL, subscriptionURL: URL, tagsURL: URL, teamsURL: URL, treesURL: String, cloneURL: String, mirrorURL: URL? = nil, hooksURL: URL, svnURL: URL, homepage: URL? = nil, language: String? = nil, forksCount: Int, stargazersCount: Int, watchersCount: Int, size: Int, defaultBranch: String, openIssuesCount: Int, isTemplate: Bool? = nil, topics: [String]? = nil, hasIssues: Bool, hasProjects: Bool, hasWiki: Bool, hasPages: Bool, hasDownloads: Bool, isArchived: Bool, isDisabled: Bool, visibility: String? = nil, pushedAt: Date? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, allowRebaseMerge: Bool? = nil, templateRepository: TemplateRepository? = nil, tempCloneToken: String? = nil, allowSquashMerge: Bool? = nil, allowAutoMerge: Bool? = nil, deleteBranchOnMerge: Bool? = nil, allowUpdateBranch: Bool? = nil, useSquashPrTitleAsDefault: Bool? = nil, squashMergeCommitTitle: SquashMergeCommitTitle? = nil, squashMergeCommitMessage: SquashMergeCommitMessage? = nil, mergeCommitTitle: MergeCommitTitle? = nil, mergeCommitMessage: MergeCommitMessage? = nil, allowMergeCommit: Bool? = nil, allowForking: Bool? = nil, isWebCommitSignoffRequired: Bool? = nil, subscribersCount: Int? = nil, networkCount: Int? = nil, openIssues: Int, watchers: Int, masterBranch: String? = nil, starredAt: String? = nil, isAnonymousAccessEnabled: Bool? = nil) {
        self.id = id
        self.nodeID = nodeID
        self.name = name
        self.fullName = fullName
        self.license = license
        self.organization = organization
        self.forks = forks
        self.permissions = permissions
        self.owner = owner
        self.isPrivate = isPrivate
        self.htmlURL = htmlURL
        self.description = description
        self.isFork = isFork
        self.url = url
        self.archiveURL = archiveURL
        self.assigneesURL = assigneesURL
        self.blobsURL = blobsURL
        self.branchesURL = branchesURL
        self.collaboratorsURL = collaboratorsURL
        self.commentsURL = commentsURL
        self.commitsURL = commitsURL
        self.compareURL = compareURL
        self.contentsURL = contentsURL
        self.contributorsURL = contributorsURL
        self.deploymentsURL = deploymentsURL
        self.downloadsURL = downloadsURL
        self.eventsURL = eventsURL
        self.forksURL = forksURL
        self.gitCommitsURL = gitCommitsURL
        self.gitRefsURL = gitRefsURL
        self.gitTagsURL = gitTagsURL
        self.gitURL = gitURL
        self.issueCommentURL = issueCommentURL
        self.issueEventsURL = issueEventsURL
        self.issuesURL = issuesURL
        self.keysURL = keysURL
        self.labelsURL = labelsURL
        self.languagesURL = languagesURL
        self.mergesURL = mergesURL
        self.milestonesURL = milestonesURL
        self.notificationsURL = notificationsURL
        self.pullsURL = pullsURL
        self.releasesURL = releasesURL
        self.sshURL = sshURL
        self.stargazersURL = stargazersURL
        self.statusesURL = statusesURL
        self.subscribersURL = subscribersURL
        self.subscriptionURL = subscriptionURL
        self.tagsURL = tagsURL
        self.teamsURL = teamsURL
        self.treesURL = treesURL
        self.cloneURL = cloneURL
        self.mirrorURL = mirrorURL
        self.hooksURL = hooksURL
        self.svnURL = svnURL
        self.homepage = homepage
        self.language = language
        self.forksCount = forksCount
        self.stargazersCount = stargazersCount
        self.watchersCount = watchersCount
        self.size = size
        self.defaultBranch = defaultBranch
        self.openIssuesCount = openIssuesCount
        self.isTemplate = isTemplate ?? false
        self.topics = topics
        self.hasIssues = hasIssues
        self.hasProjects = hasProjects
        self.hasWiki = hasWiki
        self.hasPages = hasPages
        self.hasDownloads = hasDownloads
        self.isArchived = isArchived
        self.isDisabled = isDisabled
        self.visibility = visibility
        self.pushedAt = pushedAt
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.allowRebaseMerge = allowRebaseMerge ?? true
        self.templateRepository = templateRepository
        self.tempCloneToken = tempCloneToken
        self.allowSquashMerge = allowSquashMerge ?? true
        self.allowAutoMerge = allowAutoMerge ?? false
        self.deleteBranchOnMerge = deleteBranchOnMerge ?? false
        self.allowUpdateBranch = allowUpdateBranch ?? false
        self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault ?? false
        self.squashMergeCommitTitle = squashMergeCommitTitle
        self.squashMergeCommitMessage = squashMergeCommitMessage
        self.mergeCommitTitle = mergeCommitTitle
        self.mergeCommitMessage = mergeCommitMessage
        self.allowMergeCommit = allowMergeCommit ?? true
        self.allowForking = allowForking
        self.isWebCommitSignoffRequired = isWebCommitSignoffRequired ?? false
        self.subscribersCount = subscribersCount
        self.networkCount = networkCount
        self.openIssues = openIssues
        self.watchers = watchers
        self.masterBranch = masterBranch
        self.starredAt = starredAt
        self.isAnonymousAccessEnabled = isAnonymousAccessEnabled
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.name = try values.decode(String.self, forKey: "name")
        self.fullName = try values.decode(String.self, forKey: "full_name")
        self.license = try values.decodeIfPresent(NullableLicenseSimple.self, forKey: "license")
        self.organization = try values.decodeIfPresent(NullableSimpleUser.self, forKey: "organization")
        self.forks = try values.decode(Int.self, forKey: "forks")
        self.permissions = try values.decodeIfPresent(Permissions.self, forKey: "permissions")
        self.owner = try values.decode(SimpleUser.self, forKey: "owner")
        self.isPrivate = try values.decode(Bool.self, forKey: "private")
        self.htmlURL = try values.decode(URL.self, forKey: "html_url")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.isFork = try values.decode(Bool.self, forKey: "fork")
        self.url = try values.decode(URL.self, forKey: "url")
        self.archiveURL = try values.decode(String.self, forKey: "archive_url")
        self.assigneesURL = try values.decode(String.self, forKey: "assignees_url")
        self.blobsURL = try values.decode(String.self, forKey: "blobs_url")
        self.branchesURL = try values.decode(String.self, forKey: "branches_url")
        self.collaboratorsURL = try values.decode(String.self, forKey: "collaborators_url")
        self.commentsURL = try values.decode(String.self, forKey: "comments_url")
        self.commitsURL = try values.decode(String.self, forKey: "commits_url")
        self.compareURL = try values.decode(String.self, forKey: "compare_url")
        self.contentsURL = try values.decode(String.self, forKey: "contents_url")
        self.contributorsURL = try values.decode(URL.self, forKey: "contributors_url")
        self.deploymentsURL = try values.decode(URL.self, forKey: "deployments_url")
        self.downloadsURL = try values.decode(URL.self, forKey: "downloads_url")
        self.eventsURL = try values.decode(URL.self, forKey: "events_url")
        self.forksURL = try values.decode(URL.self, forKey: "forks_url")
        self.gitCommitsURL = try values.decode(String.self, forKey: "git_commits_url")
        self.gitRefsURL = try values.decode(String.self, forKey: "git_refs_url")
        self.gitTagsURL = try values.decode(String.self, forKey: "git_tags_url")
        self.gitURL = try values.decode(String.self, forKey: "git_url")
        self.issueCommentURL = try values.decode(String.self, forKey: "issue_comment_url")
        self.issueEventsURL = try values.decode(String.self, forKey: "issue_events_url")
        self.issuesURL = try values.decode(String.self, forKey: "issues_url")
        self.keysURL = try values.decode(String.self, forKey: "keys_url")
        self.labelsURL = try values.decode(String.self, forKey: "labels_url")
        self.languagesURL = try values.decode(URL.self, forKey: "languages_url")
        self.mergesURL = try values.decode(URL.self, forKey: "merges_url")
        self.milestonesURL = try values.decode(String.self, forKey: "milestones_url")
        self.notificationsURL = try values.decode(String.self, forKey: "notifications_url")
        self.pullsURL = try values.decode(String.self, forKey: "pulls_url")
        self.releasesURL = try values.decode(String.self, forKey: "releases_url")
        self.sshURL = try values.decode(String.self, forKey: "ssh_url")
        self.stargazersURL = try values.decode(URL.self, forKey: "stargazers_url")
        self.statusesURL = try values.decode(String.self, forKey: "statuses_url")
        self.subscribersURL = try values.decode(URL.self, forKey: "subscribers_url")
        self.subscriptionURL = try values.decode(URL.self, forKey: "subscription_url")
        self.tagsURL = try values.decode(URL.self, forKey: "tags_url")
        self.teamsURL = try values.decode(URL.self, forKey: "teams_url")
        self.treesURL = try values.decode(String.self, forKey: "trees_url")
        self.cloneURL = try values.decode(String.self, forKey: "clone_url")
        self.mirrorURL = try values.decodeIfPresent(URL.self, forKey: "mirror_url")
        self.hooksURL = try values.decode(URL.self, forKey: "hooks_url")
        self.svnURL = try values.decode(URL.self, forKey: "svn_url")
        self.homepage = try values.decodeIfPresent(URL.self, forKey: "homepage")
        self.language = try values.decodeIfPresent(String.self, forKey: "language")
        self.forksCount = try values.decode(Int.self, forKey: "forks_count")
        self.stargazersCount = try values.decode(Int.self, forKey: "stargazers_count")
        self.watchersCount = try values.decode(Int.self, forKey: "watchers_count")
        self.size = try values.decode(Int.self, forKey: "size")
        self.defaultBranch = try values.decode(String.self, forKey: "default_branch")
        self.openIssuesCount = try values.decode(Int.self, forKey: "open_issues_count")
        self.isTemplate = try values.decodeIfPresent(Bool.self, forKey: "is_template") ?? false
        self.topics = try values.decodeIfPresent([String].self, forKey: "topics")
        self.hasIssues = try values.decode(Bool.self, forKey: "has_issues")
        self.hasProjects = try values.decode(Bool.self, forKey: "has_projects")
        self.hasWiki = try values.decode(Bool.self, forKey: "has_wiki")
        self.hasPages = try values.decode(Bool.self, forKey: "has_pages")
        self.hasDownloads = try values.decode(Bool.self, forKey: "has_downloads")
        self.isArchived = try values.decode(Bool.self, forKey: "archived")
        self.isDisabled = try values.decode(Bool.self, forKey: "disabled")
        self.visibility = try values.decodeIfPresent(String.self, forKey: "visibility")
        self.pushedAt = try values.decodeIfPresent(Date.self, forKey: "pushed_at")
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.updatedAt = try values.decodeIfPresent(Date.self, forKey: "updated_at")
        self.allowRebaseMerge = try values.decodeIfPresent(Bool.self, forKey: "allow_rebase_merge") ?? true
        self.templateRepository = try values.decodeIfPresent(TemplateRepository.self, forKey: "template_repository")
        self.tempCloneToken = try values.decodeIfPresent(String.self, forKey: "temp_clone_token")
        self.allowSquashMerge = try values.decodeIfPresent(Bool.self, forKey: "allow_squash_merge") ?? true
        self.allowAutoMerge = try values.decodeIfPresent(Bool.self, forKey: "allow_auto_merge") ?? false
        self.deleteBranchOnMerge = try values.decodeIfPresent(Bool.self, forKey: "delete_branch_on_merge") ?? false
        self.allowUpdateBranch = try values.decodeIfPresent(Bool.self, forKey: "allow_update_branch") ?? false
        self.useSquashPrTitleAsDefault = try values.decodeIfPresent(Bool.self, forKey: "use_squash_pr_title_as_default") ?? false
        self.squashMergeCommitTitle = try values.decodeIfPresent(SquashMergeCommitTitle.self, forKey: "squash_merge_commit_title")
        self.squashMergeCommitMessage = try values.decodeIfPresent(SquashMergeCommitMessage.self, forKey: "squash_merge_commit_message")
        self.mergeCommitTitle = try values.decodeIfPresent(MergeCommitTitle.self, forKey: "merge_commit_title")
        self.mergeCommitMessage = try values.decodeIfPresent(MergeCommitMessage.self, forKey: "merge_commit_message")
        self.allowMergeCommit = try values.decodeIfPresent(Bool.self, forKey: "allow_merge_commit") ?? true
        self.allowForking = try values.decodeIfPresent(Bool.self, forKey: "allow_forking")
        self.isWebCommitSignoffRequired = try values.decodeIfPresent(Bool.self, forKey: "web_commit_signoff_required") ?? false
        self.subscribersCount = try values.decodeIfPresent(Int.self, forKey: "subscribers_count")
        self.networkCount = try values.decodeIfPresent(Int.self, forKey: "network_count")
        self.openIssues = try values.decode(Int.self, forKey: "open_issues")
        self.watchers = try values.decode(Int.self, forKey: "watchers")
        self.masterBranch = try values.decodeIfPresent(String.self, forKey: "master_branch")
        self.starredAt = try values.decodeIfPresent(String.self, forKey: "starred_at")
        self.isAnonymousAccessEnabled = try values.decodeIfPresent(Bool.self, forKey: "anonymous_access_enabled")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(name, forKey: "name")
        try values.encode(fullName, forKey: "full_name")
        try values.encodeIfPresent(license, forKey: "license")
        try values.encodeIfPresent(organization, forKey: "organization")
        try values.encode(forks, forKey: "forks")
        try values.encodeIfPresent(permissions, forKey: "permissions")
        try values.encode(owner, forKey: "owner")
        try values.encode(isPrivate, forKey: "private")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(isFork, forKey: "fork")
        try values.encode(url, forKey: "url")
        try values.encode(archiveURL, forKey: "archive_url")
        try values.encode(assigneesURL, forKey: "assignees_url")
        try values.encode(blobsURL, forKey: "blobs_url")
        try values.encode(branchesURL, forKey: "branches_url")
        try values.encode(collaboratorsURL, forKey: "collaborators_url")
        try values.encode(commentsURL, forKey: "comments_url")
        try values.encode(commitsURL, forKey: "commits_url")
        try values.encode(compareURL, forKey: "compare_url")
        try values.encode(contentsURL, forKey: "contents_url")
        try values.encode(contributorsURL, forKey: "contributors_url")
        try values.encode(deploymentsURL, forKey: "deployments_url")
        try values.encode(downloadsURL, forKey: "downloads_url")
        try values.encode(eventsURL, forKey: "events_url")
        try values.encode(forksURL, forKey: "forks_url")
        try values.encode(gitCommitsURL, forKey: "git_commits_url")
        try values.encode(gitRefsURL, forKey: "git_refs_url")
        try values.encode(gitTagsURL, forKey: "git_tags_url")
        try values.encode(gitURL, forKey: "git_url")
        try values.encode(issueCommentURL, forKey: "issue_comment_url")
        try values.encode(issueEventsURL, forKey: "issue_events_url")
        try values.encode(issuesURL, forKey: "issues_url")
        try values.encode(keysURL, forKey: "keys_url")
        try values.encode(labelsURL, forKey: "labels_url")
        try values.encode(languagesURL, forKey: "languages_url")
        try values.encode(mergesURL, forKey: "merges_url")
        try values.encode(milestonesURL, forKey: "milestones_url")
        try values.encode(notificationsURL, forKey: "notifications_url")
        try values.encode(pullsURL, forKey: "pulls_url")
        try values.encode(releasesURL, forKey: "releases_url")
        try values.encode(sshURL, forKey: "ssh_url")
        try values.encode(stargazersURL, forKey: "stargazers_url")
        try values.encode(statusesURL, forKey: "statuses_url")
        try values.encode(subscribersURL, forKey: "subscribers_url")
        try values.encode(subscriptionURL, forKey: "subscription_url")
        try values.encode(tagsURL, forKey: "tags_url")
        try values.encode(teamsURL, forKey: "teams_url")
        try values.encode(treesURL, forKey: "trees_url")
        try values.encode(cloneURL, forKey: "clone_url")
        try values.encodeIfPresent(mirrorURL, forKey: "mirror_url")
        try values.encode(hooksURL, forKey: "hooks_url")
        try values.encode(svnURL, forKey: "svn_url")
        try values.encodeIfPresent(homepage, forKey: "homepage")
        try values.encodeIfPresent(language, forKey: "language")
        try values.encode(forksCount, forKey: "forks_count")
        try values.encode(stargazersCount, forKey: "stargazers_count")
        try values.encode(watchersCount, forKey: "watchers_count")
        try values.encode(size, forKey: "size")
        try values.encode(defaultBranch, forKey: "default_branch")
        try values.encode(openIssuesCount, forKey: "open_issues_count")
        try values.encodeIfPresent(isTemplate, forKey: "is_template")
        try values.encodeIfPresent(topics, forKey: "topics")
        try values.encode(hasIssues, forKey: "has_issues")
        try values.encode(hasProjects, forKey: "has_projects")
        try values.encode(hasWiki, forKey: "has_wiki")
        try values.encode(hasPages, forKey: "has_pages")
        try values.encode(hasDownloads, forKey: "has_downloads")
        try values.encode(isArchived, forKey: "archived")
        try values.encode(isDisabled, forKey: "disabled")
        try values.encodeIfPresent(visibility, forKey: "visibility")
        try values.encodeIfPresent(pushedAt, forKey: "pushed_at")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(updatedAt, forKey: "updated_at")
        try values.encodeIfPresent(allowRebaseMerge, forKey: "allow_rebase_merge")
        try values.encodeIfPresent(templateRepository, forKey: "template_repository")
        try values.encodeIfPresent(tempCloneToken, forKey: "temp_clone_token")
        try values.encodeIfPresent(allowSquashMerge, forKey: "allow_squash_merge")
        try values.encodeIfPresent(allowAutoMerge, forKey: "allow_auto_merge")
        try values.encodeIfPresent(deleteBranchOnMerge, forKey: "delete_branch_on_merge")
        try values.encodeIfPresent(allowUpdateBranch, forKey: "allow_update_branch")
        try values.encodeIfPresent(useSquashPrTitleAsDefault, forKey: "use_squash_pr_title_as_default")
        try values.encodeIfPresent(squashMergeCommitTitle, forKey: "squash_merge_commit_title")
        try values.encodeIfPresent(squashMergeCommitMessage, forKey: "squash_merge_commit_message")
        try values.encodeIfPresent(mergeCommitTitle, forKey: "merge_commit_title")
        try values.encodeIfPresent(mergeCommitMessage, forKey: "merge_commit_message")
        try values.encodeIfPresent(allowMergeCommit, forKey: "allow_merge_commit")
        try values.encodeIfPresent(allowForking, forKey: "allow_forking")
        try values.encodeIfPresent(isWebCommitSignoffRequired, forKey: "web_commit_signoff_required")
        try values.encodeIfPresent(subscribersCount, forKey: "subscribers_count")
        try values.encodeIfPresent(networkCount, forKey: "network_count")
        try values.encode(openIssues, forKey: "open_issues")
        try values.encode(watchers, forKey: "watchers")
        try values.encodeIfPresent(masterBranch, forKey: "master_branch")
        try values.encodeIfPresent(starredAt, forKey: "starred_at")
        try values.encodeIfPresent(isAnonymousAccessEnabled, forKey: "anonymous_access_enabled")
    }
}
