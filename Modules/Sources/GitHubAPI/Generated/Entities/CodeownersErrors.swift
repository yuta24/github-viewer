// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A list of errors found in a repo's CODEOWNERS file
public struct CodeownersErrors: Codable {
    public var errors: [Error]

    public struct Error: Codable {
        /// The line number where this errors occurs.
        public var line: Int
        /// The column number where this errors occurs.
        public var column: Int
        /// The contents of the line where the error occurs.
        ///
        /// Example: "* user"
        public var source: String?
        /// The type of error.
        ///
        /// Example: "Invalid owner"
        public var kind: String
        /// Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
        ///
        /// Example: "The pattern `/` will never match anything, did you mean `*` instead?"
        public var suggestion: String?
        /// A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
        ///
        /// Example:
        ///
        /// "Invalid owner on line 7:
        /// 
        ///   * user
        ///     ^"
        public var message: String
        /// The path of the file where the error occured.
        ///
        /// Example: ".github/CODEOWNERS"
        public var path: String

        public init(line: Int, column: Int, source: String? = nil, kind: String, suggestion: String? = nil, message: String, path: String) {
            self.line = line
            self.column = column
            self.source = source
            self.kind = kind
            self.suggestion = suggestion
            self.message = message
            self.path = path
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.line = try values.decode(Int.self, forKey: "line")
            self.column = try values.decode(Int.self, forKey: "column")
            self.source = try values.decodeIfPresent(String.self, forKey: "source")
            self.kind = try values.decode(String.self, forKey: "kind")
            self.suggestion = try values.decodeIfPresent(String.self, forKey: "suggestion")
            self.message = try values.decode(String.self, forKey: "message")
            self.path = try values.decode(String.self, forKey: "path")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(line, forKey: "line")
            try values.encode(column, forKey: "column")
            try values.encodeIfPresent(source, forKey: "source")
            try values.encode(kind, forKey: "kind")
            try values.encodeIfPresent(suggestion, forKey: "suggestion")
            try values.encode(message, forKey: "message")
            try values.encode(path, forKey: "path")
        }
    }

    public init(errors: [Error]) {
        self.errors = errors
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.errors = try values.decode([Error].self, forKey: "errors")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(errors, forKey: "errors")
    }
}
