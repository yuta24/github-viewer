// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Details of a deployment environment
public struct Environment: Codable, Identifiable {
    /// The id of the environment.
    ///
    /// Example: 56780428
    public var id: Int
    /// Example: "MDExOkVudmlyb25tZW50NTY3ODA0Mjg="
    public var nodeID: String
    /// The name of the environment.
    ///
    /// Example: "staging"
    public var name: String
    /// Example: "https://api.github.com/repos/github/hello-world/environments/staging"
    public var url: String
    /// Example: "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging"
    public var htmlURL: String
    /// The time that the environment was created, in ISO 8601 format.
    ///
    /// Example: "2020-11-23T22:00:40Z"
    public var createdAt: Date
    /// The time that the environment was last updated, in ISO 8601 format.
    ///
    /// Example: "2020-11-23T22:00:40Z"
    public var updatedAt: Date
    public var protectionRules: [ProtectionRule]?
    /// The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
    public var deploymentBranchPolicy: DeploymentBranchPolicySettings?

    public struct ProtectionRule: Codable {
        public var a: A?
        public var b: B?
        public var c: C?

        public struct A: Codable, Identifiable {
            /// Example: 3515
            public var id: Int
            /// Example: "MDQ6R2F0ZTM1MTU="
            public var nodeID: String
            /// Example: "wait_timer"
            public var type: String
            /// The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
            ///
            /// Example: 30
            public var waitTimer: Int?

            public init(id: Int, nodeID: String, type: String, waitTimer: Int? = nil) {
                self.id = id
                self.nodeID = nodeID
                self.type = type
                self.waitTimer = waitTimer
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.id = try values.decode(Int.self, forKey: "id")
                self.nodeID = try values.decode(String.self, forKey: "node_id")
                self.type = try values.decode(String.self, forKey: "type")
                self.waitTimer = try values.decodeIfPresent(Int.self, forKey: "wait_timer")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(id, forKey: "id")
                try values.encode(nodeID, forKey: "node_id")
                try values.encode(type, forKey: "type")
                try values.encodeIfPresent(waitTimer, forKey: "wait_timer")
            }
        }

        public struct B: Codable, Identifiable {
            /// Example: 3755
            public var id: Int
            /// Example: "MDQ6R2F0ZTM3NTU="
            public var nodeID: String
            /// Example: "required_reviewers"
            public var type: String
            /// The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
            public var reviewers: [Reviewer]?

            public struct Reviewer: Codable {
                /// The type of reviewer.
                ///
                /// Example: "User"
                public var type: DeploymentReviewerType?
                public var reviewer: Reviewer?

                public struct Reviewer: Codable {
                    public var simpleUser: SimpleUser?
                    /// Groups of organization members that gives permissions on specified repositories.
                    public var team: Team?

                    public init(simpleUser: SimpleUser? = nil, team: Team? = nil) {
                        self.simpleUser = simpleUser
                        self.team = team
                    }

                    public init(from decoder: Decoder) throws {
                        let container = try decoder.singleValueContainer()
                        self.simpleUser = try? container.decode(SimpleUser.self)
                        self.team = try? container.decode(Team.self)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.singleValueContainer()
                        if let value = simpleUser { try container.encode(value) }
                        if let value = team { try container.encode(value) }
                    }
                }

                public init(type: DeploymentReviewerType? = nil, reviewer: Reviewer? = nil) {
                    self.type = type
                    self.reviewer = reviewer
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.type = try values.decodeIfPresent(DeploymentReviewerType.self, forKey: "type")
                    self.reviewer = try values.decodeIfPresent(Reviewer.self, forKey: "reviewer")
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encodeIfPresent(type, forKey: "type")
                    try values.encodeIfPresent(reviewer, forKey: "reviewer")
                }
            }

            public init(id: Int, nodeID: String, type: String, reviewers: [Reviewer]? = nil) {
                self.id = id
                self.nodeID = nodeID
                self.type = type
                self.reviewers = reviewers
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.id = try values.decode(Int.self, forKey: "id")
                self.nodeID = try values.decode(String.self, forKey: "node_id")
                self.type = try values.decode(String.self, forKey: "type")
                self.reviewers = try values.decodeIfPresent([Reviewer].self, forKey: "reviewers")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(id, forKey: "id")
                try values.encode(nodeID, forKey: "node_id")
                try values.encode(type, forKey: "type")
                try values.encodeIfPresent(reviewers, forKey: "reviewers")
            }
        }

        public struct C: Codable, Identifiable {
            /// Example: 3515
            public var id: Int
            /// Example: "MDQ6R2F0ZTM1MTU="
            public var nodeID: String
            /// Example: "branch_policy"
            public var type: String

            public init(id: Int, nodeID: String, type: String) {
                self.id = id
                self.nodeID = nodeID
                self.type = type
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.id = try values.decode(Int.self, forKey: "id")
                self.nodeID = try values.decode(String.self, forKey: "node_id")
                self.type = try values.decode(String.self, forKey: "type")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(id, forKey: "id")
                try values.encode(nodeID, forKey: "node_id")
                try values.encode(type, forKey: "type")
            }
        }

        public init(a: A? = nil, b: B? = nil, c: C? = nil) {
            self.a = a
            self.b = b
            self.c = c
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.a = try? container.decode(A.self)
            self.b = try? container.decode(B.self)
            self.c = try? container.decode(C.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = a { try container.encode(value) }
            if let value = b { try container.encode(value) }
            if let value = c { try container.encode(value) }
        }
    }

    public init(id: Int, nodeID: String, name: String, url: String, htmlURL: String, createdAt: Date, updatedAt: Date, protectionRules: [ProtectionRule]? = nil, deploymentBranchPolicy: DeploymentBranchPolicySettings? = nil) {
        self.id = id
        self.nodeID = nodeID
        self.name = name
        self.url = url
        self.htmlURL = htmlURL
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.protectionRules = protectionRules
        self.deploymentBranchPolicy = deploymentBranchPolicy
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.name = try values.decode(String.self, forKey: "name")
        self.url = try values.decode(String.self, forKey: "url")
        self.htmlURL = try values.decode(String.self, forKey: "html_url")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.protectionRules = try values.decodeIfPresent([ProtectionRule].self, forKey: "protection_rules")
        self.deploymentBranchPolicy = try values.decodeIfPresent(DeploymentBranchPolicySettings.self, forKey: "deployment_branch_policy")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(name, forKey: "name")
        try values.encode(url, forKey: "url")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encodeIfPresent(protectionRules, forKey: "protection_rules")
        try values.encodeIfPresent(deploymentBranchPolicy, forKey: "deployment_branch_policy")
    }
}
