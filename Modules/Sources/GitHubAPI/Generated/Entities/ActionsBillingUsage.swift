// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ActionsBillingUsage: Codable {
    /// The sum of the free and paid GitHub Actions minutes used.
    public var totalMinutesUsed: Int
    /// The total paid GitHub Actions minutes used.
    public var totalPaidMinutesUsed: Int
    /// The amount of free GitHub Actions minutes available.
    public var includedMinutes: Int
    public var minutesUsedBreakdown: MinutesUsedBreakdown

    public struct MinutesUsedBreakdown: Codable {
        /// Total minutes used on Ubuntu runner machines.
        public var ubuntu: Int?
        /// Total minutes used on macOS runner machines.
        public var macos: Int?
        /// Total minutes used on Windows runner machines.
        public var windows: Int?
        /// Total minutes used on Ubuntu 4 core runner machines.
        public var ubuntu4Core: Int?
        /// Total minutes used on Ubuntu 8 core runner machines.
        public var ubuntu8Core: Int?
        /// Total minutes used on Ubuntu 16 core runner machines.
        public var ubuntu16Core: Int?
        /// Total minutes used on Ubuntu 32 core runner machines.
        public var ubuntu32Core: Int?
        /// Total minutes used on Ubuntu 64 core runner machines.
        public var ubuntu64Core: Int?
        /// Total minutes used on Windows 4 core runner machines.
        public var windows4Core: Int?
        /// Total minutes used on Windows 8 core runner machines.
        public var windows8Core: Int?
        /// Total minutes used on Windows 16 core runner machines.
        public var windows16Core: Int?
        /// Total minutes used on Windows 32 core runner machines.
        public var windows32Core: Int?
        /// Total minutes used on Windows 64 core runner machines.
        public var windows64Core: Int?
        /// Total minutes used on all runner machines.
        public var total: Int?

        public init(ubuntu: Int? = nil, macos: Int? = nil, windows: Int? = nil, ubuntu4Core: Int? = nil, ubuntu8Core: Int? = nil, ubuntu16Core: Int? = nil, ubuntu32Core: Int? = nil, ubuntu64Core: Int? = nil, windows4Core: Int? = nil, windows8Core: Int? = nil, windows16Core: Int? = nil, windows32Core: Int? = nil, windows64Core: Int? = nil, total: Int? = nil) {
            self.ubuntu = ubuntu
            self.macos = macos
            self.windows = windows
            self.ubuntu4Core = ubuntu4Core
            self.ubuntu8Core = ubuntu8Core
            self.ubuntu16Core = ubuntu16Core
            self.ubuntu32Core = ubuntu32Core
            self.ubuntu64Core = ubuntu64Core
            self.windows4Core = windows4Core
            self.windows8Core = windows8Core
            self.windows16Core = windows16Core
            self.windows32Core = windows32Core
            self.windows64Core = windows64Core
            self.total = total
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.ubuntu = try values.decodeIfPresent(Int.self, forKey: "UBUNTU")
            self.macos = try values.decodeIfPresent(Int.self, forKey: "MACOS")
            self.windows = try values.decodeIfPresent(Int.self, forKey: "WINDOWS")
            self.ubuntu4Core = try values.decodeIfPresent(Int.self, forKey: "ubuntu_4_core")
            self.ubuntu8Core = try values.decodeIfPresent(Int.self, forKey: "ubuntu_8_core")
            self.ubuntu16Core = try values.decodeIfPresent(Int.self, forKey: "ubuntu_16_core")
            self.ubuntu32Core = try values.decodeIfPresent(Int.self, forKey: "ubuntu_32_core")
            self.ubuntu64Core = try values.decodeIfPresent(Int.self, forKey: "ubuntu_64_core")
            self.windows4Core = try values.decodeIfPresent(Int.self, forKey: "windows_4_core")
            self.windows8Core = try values.decodeIfPresent(Int.self, forKey: "windows_8_core")
            self.windows16Core = try values.decodeIfPresent(Int.self, forKey: "windows_16_core")
            self.windows32Core = try values.decodeIfPresent(Int.self, forKey: "windows_32_core")
            self.windows64Core = try values.decodeIfPresent(Int.self, forKey: "windows_64_core")
            self.total = try values.decodeIfPresent(Int.self, forKey: "total")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(ubuntu, forKey: "UBUNTU")
            try values.encodeIfPresent(macos, forKey: "MACOS")
            try values.encodeIfPresent(windows, forKey: "WINDOWS")
            try values.encodeIfPresent(ubuntu4Core, forKey: "ubuntu_4_core")
            try values.encodeIfPresent(ubuntu8Core, forKey: "ubuntu_8_core")
            try values.encodeIfPresent(ubuntu16Core, forKey: "ubuntu_16_core")
            try values.encodeIfPresent(ubuntu32Core, forKey: "ubuntu_32_core")
            try values.encodeIfPresent(ubuntu64Core, forKey: "ubuntu_64_core")
            try values.encodeIfPresent(windows4Core, forKey: "windows_4_core")
            try values.encodeIfPresent(windows8Core, forKey: "windows_8_core")
            try values.encodeIfPresent(windows16Core, forKey: "windows_16_core")
            try values.encodeIfPresent(windows32Core, forKey: "windows_32_core")
            try values.encodeIfPresent(windows64Core, forKey: "windows_64_core")
            try values.encodeIfPresent(total, forKey: "total")
        }
    }

    public init(totalMinutesUsed: Int, totalPaidMinutesUsed: Int, includedMinutes: Int, minutesUsedBreakdown: MinutesUsedBreakdown) {
        self.totalMinutesUsed = totalMinutesUsed
        self.totalPaidMinutesUsed = totalPaidMinutesUsed
        self.includedMinutes = includedMinutes
        self.minutesUsedBreakdown = minutesUsedBreakdown
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.totalMinutesUsed = try values.decode(Int.self, forKey: "total_minutes_used")
        self.totalPaidMinutesUsed = try values.decode(Int.self, forKey: "total_paid_minutes_used")
        self.includedMinutes = try values.decode(Int.self, forKey: "included_minutes")
        self.minutesUsedBreakdown = try values.decode(MinutesUsedBreakdown.self, forKey: "minutes_used_breakdown")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(totalMinutesUsed, forKey: "total_minutes_used")
        try values.encode(totalPaidMinutesUsed, forKey: "total_paid_minutes_used")
        try values.encode(includedMinutes, forKey: "included_minutes")
        try values.encode(minutesUsedBreakdown, forKey: "minutes_used_breakdown")
    }
}
