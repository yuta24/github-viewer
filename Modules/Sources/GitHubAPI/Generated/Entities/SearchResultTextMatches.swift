// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SearchResultTextMatch: Codable {
    public var objectURL: String?
    public var objectType: String?
    public var property: String?
    public var fragment: String?
    public var matches: [Match]?

    public struct Match: Codable {
        public var text: String?
        public var indices: [Int]?

        public init(text: String? = nil, indices: [Int]? = nil) {
            self.text = text
            self.indices = indices
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.text = try values.decodeIfPresent(String.self, forKey: "text")
            self.indices = try values.decodeIfPresent([Int].self, forKey: "indices")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(text, forKey: "text")
            try values.encodeIfPresent(indices, forKey: "indices")
        }
    }

    public init(objectURL: String? = nil, objectType: String? = nil, property: String? = nil, fragment: String? = nil, matches: [Match]? = nil) {
        self.objectURL = objectURL
        self.objectType = objectType
        self.property = property
        self.fragment = fragment
        self.matches = matches
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.objectURL = try values.decodeIfPresent(String.self, forKey: "object_url")
        self.objectType = try values.decodeIfPresent(String.self, forKey: "object_type")
        self.property = try values.decodeIfPresent(String.self, forKey: "property")
        self.fragment = try values.decodeIfPresent(String.self, forKey: "fragment")
        self.matches = try values.decodeIfPresent([Match].self, forKey: "matches")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(objectURL, forKey: "object_url")
        try values.encodeIfPresent(objectType, forKey: "object_type")
        try values.encodeIfPresent(property, forKey: "property")
        try values.encodeIfPresent(fragment, forKey: "fragment")
        try values.encodeIfPresent(matches, forKey: "matches")
    }
}
