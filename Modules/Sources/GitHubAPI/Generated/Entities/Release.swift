// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A release.
public struct Release: Codable, Identifiable {
    public var url: URL
    public var htmlURL: URL
    public var assetsURL: URL
    public var uploadURL: String
    public var tarballURL: URL?
    public var zipballURL: URL?
    public var id: Int
    public var nodeID: String
    /// The name of the tag.
    ///
    /// Example: "v1.0.0"
    public var tagName: String
    /// Specifies the commitish value that determines where the Git tag is created from.
    ///
    /// Example: "master"
    public var targetCommitish: String
    public var name: String?
    public var body: String?
    /// True to create a draft (unpublished) release, false to create a published one.
    ///
    /// Example: false
    public var isDraft: Bool
    /// Whether to identify the release as a prerelease or a full release.
    ///
    /// Example: false
    public var isPrerelease: Bool
    public var createdAt: Date
    public var publishedAt: Date?
    /// Simple User
    public var author: SimpleUser
    public var assets: [ReleaseAsset]
    public var bodyHTML: String?
    public var bodyText: String?
    public var mentionsCount: Int?
    /// The URL of the release discussion.
    public var discussionURL: URL?
    /// Reaction Rollup
    public var reactions: ReactionRollup?

    public init(url: URL, htmlURL: URL, assetsURL: URL, uploadURL: String, tarballURL: URL? = nil, zipballURL: URL? = nil, id: Int, nodeID: String, tagName: String, targetCommitish: String, name: String? = nil, body: String? = nil, isDraft: Bool, isPrerelease: Bool, createdAt: Date, publishedAt: Date? = nil, author: SimpleUser, assets: [ReleaseAsset], bodyHTML: String? = nil, bodyText: String? = nil, mentionsCount: Int? = nil, discussionURL: URL? = nil, reactions: ReactionRollup? = nil) {
        self.url = url
        self.htmlURL = htmlURL
        self.assetsURL = assetsURL
        self.uploadURL = uploadURL
        self.tarballURL = tarballURL
        self.zipballURL = zipballURL
        self.id = id
        self.nodeID = nodeID
        self.tagName = tagName
        self.targetCommitish = targetCommitish
        self.name = name
        self.body = body
        self.isDraft = isDraft
        self.isPrerelease = isPrerelease
        self.createdAt = createdAt
        self.publishedAt = publishedAt
        self.author = author
        self.assets = assets
        self.bodyHTML = bodyHTML
        self.bodyText = bodyText
        self.mentionsCount = mentionsCount
        self.discussionURL = discussionURL
        self.reactions = reactions
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.url = try values.decode(URL.self, forKey: "url")
        self.htmlURL = try values.decode(URL.self, forKey: "html_url")
        self.assetsURL = try values.decode(URL.self, forKey: "assets_url")
        self.uploadURL = try values.decode(String.self, forKey: "upload_url")
        self.tarballURL = try values.decodeIfPresent(URL.self, forKey: "tarball_url")
        self.zipballURL = try values.decodeIfPresent(URL.self, forKey: "zipball_url")
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.tagName = try values.decode(String.self, forKey: "tag_name")
        self.targetCommitish = try values.decode(String.self, forKey: "target_commitish")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.body = try values.decodeIfPresent(String.self, forKey: "body")
        self.isDraft = try values.decode(Bool.self, forKey: "draft")
        self.isPrerelease = try values.decode(Bool.self, forKey: "prerelease")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.publishedAt = try values.decodeIfPresent(Date.self, forKey: "published_at")
        self.author = try values.decode(SimpleUser.self, forKey: "author")
        self.assets = try values.decode([ReleaseAsset].self, forKey: "assets")
        self.bodyHTML = try values.decodeIfPresent(String.self, forKey: "body_html")
        self.bodyText = try values.decodeIfPresent(String.self, forKey: "body_text")
        self.mentionsCount = try values.decodeIfPresent(Int.self, forKey: "mentions_count")
        self.discussionURL = try values.decodeIfPresent(URL.self, forKey: "discussion_url")
        self.reactions = try values.decodeIfPresent(ReactionRollup.self, forKey: "reactions")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(url, forKey: "url")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encode(assetsURL, forKey: "assets_url")
        try values.encode(uploadURL, forKey: "upload_url")
        try values.encodeIfPresent(tarballURL, forKey: "tarball_url")
        try values.encodeIfPresent(zipballURL, forKey: "zipball_url")
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(tagName, forKey: "tag_name")
        try values.encode(targetCommitish, forKey: "target_commitish")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(body, forKey: "body")
        try values.encode(isDraft, forKey: "draft")
        try values.encode(isPrerelease, forKey: "prerelease")
        try values.encode(createdAt, forKey: "created_at")
        try values.encodeIfPresent(publishedAt, forKey: "published_at")
        try values.encode(author, forKey: "author")
        try values.encode(assets, forKey: "assets")
        try values.encodeIfPresent(bodyHTML, forKey: "body_html")
        try values.encodeIfPresent(bodyText, forKey: "body_text")
        try values.encodeIfPresent(mentionsCount, forKey: "mentions_count")
        try values.encodeIfPresent(discussionURL, forKey: "discussion_url")
        try values.encodeIfPresent(reactions, forKey: "reactions")
    }
}
