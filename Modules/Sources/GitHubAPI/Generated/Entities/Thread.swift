// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Thread: Codable, Identifiable {
    public var id: String
    /// Minimal Repository
    public var repository: MinimalRepository
    public var subject: Subject
    public var reason: String
    public var isUnread: Bool
    public var updatedAt: String
    public var lastReadAt: String?
    public var url: String
    /// Example: "https://api.github.com/notifications/threads/2/subscription"
    public var subscriptionURL: String

    public struct Subject: Codable {
        public var title: String
        public var url: String
        public var latestCommentURL: String
        public var type: String

        public init(title: String, url: String, latestCommentURL: String, type: String) {
            self.title = title
            self.url = url
            self.latestCommentURL = latestCommentURL
            self.type = type
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.title = try values.decode(String.self, forKey: "title")
            self.url = try values.decode(String.self, forKey: "url")
            self.latestCommentURL = try values.decode(String.self, forKey: "latest_comment_url")
            self.type = try values.decode(String.self, forKey: "type")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(title, forKey: "title")
            try values.encode(url, forKey: "url")
            try values.encode(latestCommentURL, forKey: "latest_comment_url")
            try values.encode(type, forKey: "type")
        }
    }

    public init(id: String, repository: MinimalRepository, subject: Subject, reason: String, isUnread: Bool, updatedAt: String, lastReadAt: String? = nil, url: String, subscriptionURL: String) {
        self.id = id
        self.repository = repository
        self.subject = subject
        self.reason = reason
        self.isUnread = isUnread
        self.updatedAt = updatedAt
        self.lastReadAt = lastReadAt
        self.url = url
        self.subscriptionURL = subscriptionURL
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.repository = try values.decode(MinimalRepository.self, forKey: "repository")
        self.subject = try values.decode(Subject.self, forKey: "subject")
        self.reason = try values.decode(String.self, forKey: "reason")
        self.isUnread = try values.decode(Bool.self, forKey: "unread")
        self.updatedAt = try values.decode(String.self, forKey: "updated_at")
        self.lastReadAt = try values.decodeIfPresent(String.self, forKey: "last_read_at")
        self.url = try values.decode(String.self, forKey: "url")
        self.subscriptionURL = try values.decode(String.self, forKey: "subscription_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(repository, forKey: "repository")
        try values.encode(subject, forKey: "subject")
        try values.encode(reason, forKey: "reason")
        try values.encode(isUnread, forKey: "unread")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encodeIfPresent(lastReadAt, forKey: "last_read_at")
        try values.encode(url, forKey: "url")
        try values.encode(subscriptionURL, forKey: "subscription_url")
    }
}
