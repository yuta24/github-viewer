// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PublicUser: Codable, Identifiable {
    public var login: String
    public var id: Int
    public var nodeID: String
    public var avatarURL: URL
    public var gravatarID: String?
    public var url: URL
    public var htmlURL: URL
    public var followersURL: URL
    public var followingURL: String
    public var gistsURL: String
    public var starredURL: String
    public var subscriptionsURL: URL
    public var organizationsURL: URL
    public var reposURL: URL
    public var eventsURL: String
    public var receivedEventsURL: URL
    public var type: String
    public var isSiteAdmin: Bool
    public var name: String?
    public var company: String?
    public var blog: String?
    public var location: String?
    public var email: String?
    public var isHireable: Bool?
    public var bio: String?
    public var twitterUsername: String?
    public var publicRepos: Int
    public var publicGists: Int
    public var followers: Int
    public var following: Int
    public var createdAt: Date
    public var updatedAt: Date
    public var plan: Plan?
    public var suspendedAt: Date?
    public var privateGists: Int?
    public var totalPrivateRepos: Int?
    public var ownedPrivateRepos: Int?
    public var diskUsage: Int?
    public var collaborators: Int?

    public struct Plan: Codable {
        public var collaborators: Int
        public var name: String
        public var space: Int
        public var privateRepos: Int

        public init(collaborators: Int, name: String, space: Int, privateRepos: Int) {
            self.collaborators = collaborators
            self.name = name
            self.space = space
            self.privateRepos = privateRepos
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.collaborators = try values.decode(Int.self, forKey: "collaborators")
            self.name = try values.decode(String.self, forKey: "name")
            self.space = try values.decode(Int.self, forKey: "space")
            self.privateRepos = try values.decode(Int.self, forKey: "private_repos")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(collaborators, forKey: "collaborators")
            try values.encode(name, forKey: "name")
            try values.encode(space, forKey: "space")
            try values.encode(privateRepos, forKey: "private_repos")
        }
    }

    public init(login: String, id: Int, nodeID: String, avatarURL: URL, gravatarID: String? = nil, url: URL, htmlURL: URL, followersURL: URL, followingURL: String, gistsURL: String, starredURL: String, subscriptionsURL: URL, organizationsURL: URL, reposURL: URL, eventsURL: String, receivedEventsURL: URL, type: String, isSiteAdmin: Bool, name: String? = nil, company: String? = nil, blog: String? = nil, location: String? = nil, email: String? = nil, isHireable: Bool? = nil, bio: String? = nil, twitterUsername: String? = nil, publicRepos: Int, publicGists: Int, followers: Int, following: Int, createdAt: Date, updatedAt: Date, plan: Plan? = nil, suspendedAt: Date? = nil, privateGists: Int? = nil, totalPrivateRepos: Int? = nil, ownedPrivateRepos: Int? = nil, diskUsage: Int? = nil, collaborators: Int? = nil) {
        self.login = login
        self.id = id
        self.nodeID = nodeID
        self.avatarURL = avatarURL
        self.gravatarID = gravatarID
        self.url = url
        self.htmlURL = htmlURL
        self.followersURL = followersURL
        self.followingURL = followingURL
        self.gistsURL = gistsURL
        self.starredURL = starredURL
        self.subscriptionsURL = subscriptionsURL
        self.organizationsURL = organizationsURL
        self.reposURL = reposURL
        self.eventsURL = eventsURL
        self.receivedEventsURL = receivedEventsURL
        self.type = type
        self.isSiteAdmin = isSiteAdmin
        self.name = name
        self.company = company
        self.blog = blog
        self.location = location
        self.email = email
        self.isHireable = isHireable
        self.bio = bio
        self.twitterUsername = twitterUsername
        self.publicRepos = publicRepos
        self.publicGists = publicGists
        self.followers = followers
        self.following = following
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.plan = plan
        self.suspendedAt = suspendedAt
        self.privateGists = privateGists
        self.totalPrivateRepos = totalPrivateRepos
        self.ownedPrivateRepos = ownedPrivateRepos
        self.diskUsage = diskUsage
        self.collaborators = collaborators
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.login = try values.decode(String.self, forKey: "login")
        self.id = try values.decode(Int.self, forKey: "id")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.avatarURL = try values.decode(URL.self, forKey: "avatar_url")
        self.gravatarID = try values.decodeIfPresent(String.self, forKey: "gravatar_id")
        self.url = try values.decode(URL.self, forKey: "url")
        self.htmlURL = try values.decode(URL.self, forKey: "html_url")
        self.followersURL = try values.decode(URL.self, forKey: "followers_url")
        self.followingURL = try values.decode(String.self, forKey: "following_url")
        self.gistsURL = try values.decode(String.self, forKey: "gists_url")
        self.starredURL = try values.decode(String.self, forKey: "starred_url")
        self.subscriptionsURL = try values.decode(URL.self, forKey: "subscriptions_url")
        self.organizationsURL = try values.decode(URL.self, forKey: "organizations_url")
        self.reposURL = try values.decode(URL.self, forKey: "repos_url")
        self.eventsURL = try values.decode(String.self, forKey: "events_url")
        self.receivedEventsURL = try values.decode(URL.self, forKey: "received_events_url")
        self.type = try values.decode(String.self, forKey: "type")
        self.isSiteAdmin = try values.decode(Bool.self, forKey: "site_admin")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.company = try values.decodeIfPresent(String.self, forKey: "company")
        self.blog = try values.decodeIfPresent(String.self, forKey: "blog")
        self.location = try values.decodeIfPresent(String.self, forKey: "location")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.isHireable = try values.decodeIfPresent(Bool.self, forKey: "hireable")
        self.bio = try values.decodeIfPresent(String.self, forKey: "bio")
        self.twitterUsername = try values.decodeIfPresent(String.self, forKey: "twitter_username")
        self.publicRepos = try values.decode(Int.self, forKey: "public_repos")
        self.publicGists = try values.decode(Int.self, forKey: "public_gists")
        self.followers = try values.decode(Int.self, forKey: "followers")
        self.following = try values.decode(Int.self, forKey: "following")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.plan = try values.decodeIfPresent(Plan.self, forKey: "plan")
        self.suspendedAt = try values.decodeIfPresent(Date.self, forKey: "suspended_at")
        self.privateGists = try values.decodeIfPresent(Int.self, forKey: "private_gists")
        self.totalPrivateRepos = try values.decodeIfPresent(Int.self, forKey: "total_private_repos")
        self.ownedPrivateRepos = try values.decodeIfPresent(Int.self, forKey: "owned_private_repos")
        self.diskUsage = try values.decodeIfPresent(Int.self, forKey: "disk_usage")
        self.collaborators = try values.decodeIfPresent(Int.self, forKey: "collaborators")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(login, forKey: "login")
        try values.encode(id, forKey: "id")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(avatarURL, forKey: "avatar_url")
        try values.encodeIfPresent(gravatarID, forKey: "gravatar_id")
        try values.encode(url, forKey: "url")
        try values.encode(htmlURL, forKey: "html_url")
        try values.encode(followersURL, forKey: "followers_url")
        try values.encode(followingURL, forKey: "following_url")
        try values.encode(gistsURL, forKey: "gists_url")
        try values.encode(starredURL, forKey: "starred_url")
        try values.encode(subscriptionsURL, forKey: "subscriptions_url")
        try values.encode(organizationsURL, forKey: "organizations_url")
        try values.encode(reposURL, forKey: "repos_url")
        try values.encode(eventsURL, forKey: "events_url")
        try values.encode(receivedEventsURL, forKey: "received_events_url")
        try values.encode(type, forKey: "type")
        try values.encode(isSiteAdmin, forKey: "site_admin")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(company, forKey: "company")
        try values.encodeIfPresent(blog, forKey: "blog")
        try values.encodeIfPresent(location, forKey: "location")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encodeIfPresent(isHireable, forKey: "hireable")
        try values.encodeIfPresent(bio, forKey: "bio")
        try values.encodeIfPresent(twitterUsername, forKey: "twitter_username")
        try values.encode(publicRepos, forKey: "public_repos")
        try values.encode(publicGists, forKey: "public_gists")
        try values.encode(followers, forKey: "followers")
        try values.encode(following, forKey: "following")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encodeIfPresent(plan, forKey: "plan")
        try values.encodeIfPresent(suspendedAt, forKey: "suspended_at")
        try values.encodeIfPresent(privateGists, forKey: "private_gists")
        try values.encodeIfPresent(totalPrivateRepos, forKey: "total_private_repos")
        try values.encodeIfPresent(ownedPrivateRepos, forKey: "owned_private_repos")
        try values.encodeIfPresent(diskUsage, forKey: "disk_usage")
        try values.encodeIfPresent(collaborators, forKey: "collaborators")
    }
}
