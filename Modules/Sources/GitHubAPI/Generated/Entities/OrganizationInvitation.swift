// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct OrganizationInvitation: Codable, Identifiable {
    public var id: Int
    public var login: String?
    public var email: String?
    public var role: String
    public var createdAt: String
    public var failedAt: String?
    public var failedReason: String?
    /// Simple User
    public var inviter: SimpleUser
    public var teamCount: Int
    /// Example: "MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x"
    public var nodeID: String
    /// Example: "https://api.github.com/organizations/16/invitations/1/teams"
    public var invitationTeamsURL: String

    public init(id: Int, login: String? = nil, email: String? = nil, role: String, createdAt: String, failedAt: String? = nil, failedReason: String? = nil, inviter: SimpleUser, teamCount: Int, nodeID: String, invitationTeamsURL: String) {
        self.id = id
        self.login = login
        self.email = email
        self.role = role
        self.createdAt = createdAt
        self.failedAt = failedAt
        self.failedReason = failedReason
        self.inviter = inviter
        self.teamCount = teamCount
        self.nodeID = nodeID
        self.invitationTeamsURL = invitationTeamsURL
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.login = try values.decodeIfPresent(String.self, forKey: "login")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.role = try values.decode(String.self, forKey: "role")
        self.createdAt = try values.decode(String.self, forKey: "created_at")
        self.failedAt = try values.decodeIfPresent(String.self, forKey: "failed_at")
        self.failedReason = try values.decodeIfPresent(String.self, forKey: "failed_reason")
        self.inviter = try values.decode(SimpleUser.self, forKey: "inviter")
        self.teamCount = try values.decode(Int.self, forKey: "team_count")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.invitationTeamsURL = try values.decode(String.self, forKey: "invitation_teams_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(login, forKey: "login")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encode(role, forKey: "role")
        try values.encode(createdAt, forKey: "created_at")
        try values.encodeIfPresent(failedAt, forKey: "failed_at")
        try values.encodeIfPresent(failedReason, forKey: "failed_reason")
        try values.encode(inviter, forKey: "inviter")
        try values.encode(teamCount, forKey: "team_count")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(invitationTeamsURL, forKey: "invitation_teams_url")
    }
}
