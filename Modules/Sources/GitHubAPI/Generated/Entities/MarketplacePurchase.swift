// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct MarketplacePurchase: Codable, Identifiable {
    public var url: String
    public var type: String
    public var id: Int
    public var login: String
    public var organizationBillingEmail: String?
    public var email: String?
    public var marketplacePendingChange: MarketplacePendingChange?
    public var marketplacePurchase: MarketplacePurchase

    public struct MarketplacePendingChange: Codable, Identifiable {
        public var isInstalled: Bool?
        public var effectiveDate: String?
        public var unitCount: Int?
        public var id: Int?
        /// Marketplace Listing Plan
        public var plan: MarketplaceListingPlan?

        public init(isInstalled: Bool? = nil, effectiveDate: String? = nil, unitCount: Int? = nil, id: Int? = nil, plan: MarketplaceListingPlan? = nil) {
            self.isInstalled = isInstalled
            self.effectiveDate = effectiveDate
            self.unitCount = unitCount
            self.id = id
            self.plan = plan
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isInstalled = try values.decodeIfPresent(Bool.self, forKey: "is_installed")
            self.effectiveDate = try values.decodeIfPresent(String.self, forKey: "effective_date")
            self.unitCount = try values.decodeIfPresent(Int.self, forKey: "unit_count")
            self.id = try values.decodeIfPresent(Int.self, forKey: "id")
            self.plan = try values.decodeIfPresent(MarketplaceListingPlan.self, forKey: "plan")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(isInstalled, forKey: "is_installed")
            try values.encodeIfPresent(effectiveDate, forKey: "effective_date")
            try values.encodeIfPresent(unitCount, forKey: "unit_count")
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(plan, forKey: "plan")
        }
    }

    public struct MarketplacePurchase: Codable {
        public var billingCycle: String?
        public var nextBillingDate: String?
        public var isInstalled: Bool?
        public var unitCount: Int?
        public var isOnFreeTrial: Bool?
        public var freeTrialEndsOn: String?
        public var updatedAt: String?
        /// Marketplace Listing Plan
        public var plan: MarketplaceListingPlan?

        public init(billingCycle: String? = nil, nextBillingDate: String? = nil, isInstalled: Bool? = nil, unitCount: Int? = nil, isOnFreeTrial: Bool? = nil, freeTrialEndsOn: String? = nil, updatedAt: String? = nil, plan: MarketplaceListingPlan? = nil) {
            self.billingCycle = billingCycle
            self.nextBillingDate = nextBillingDate
            self.isInstalled = isInstalled
            self.unitCount = unitCount
            self.isOnFreeTrial = isOnFreeTrial
            self.freeTrialEndsOn = freeTrialEndsOn
            self.updatedAt = updatedAt
            self.plan = plan
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.billingCycle = try values.decodeIfPresent(String.self, forKey: "billing_cycle")
            self.nextBillingDate = try values.decodeIfPresent(String.self, forKey: "next_billing_date")
            self.isInstalled = try values.decodeIfPresent(Bool.self, forKey: "is_installed")
            self.unitCount = try values.decodeIfPresent(Int.self, forKey: "unit_count")
            self.isOnFreeTrial = try values.decodeIfPresent(Bool.self, forKey: "on_free_trial")
            self.freeTrialEndsOn = try values.decodeIfPresent(String.self, forKey: "free_trial_ends_on")
            self.updatedAt = try values.decodeIfPresent(String.self, forKey: "updated_at")
            self.plan = try values.decodeIfPresent(MarketplaceListingPlan.self, forKey: "plan")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(billingCycle, forKey: "billing_cycle")
            try values.encodeIfPresent(nextBillingDate, forKey: "next_billing_date")
            try values.encodeIfPresent(isInstalled, forKey: "is_installed")
            try values.encodeIfPresent(unitCount, forKey: "unit_count")
            try values.encodeIfPresent(isOnFreeTrial, forKey: "on_free_trial")
            try values.encodeIfPresent(freeTrialEndsOn, forKey: "free_trial_ends_on")
            try values.encodeIfPresent(updatedAt, forKey: "updated_at")
            try values.encodeIfPresent(plan, forKey: "plan")
        }
    }

    public init(url: String, type: String, id: Int, login: String, organizationBillingEmail: String? = nil, email: String? = nil, marketplacePendingChange: MarketplacePendingChange? = nil, marketplacePurchase: MarketplacePurchase) {
        self.url = url
        self.type = type
        self.id = id
        self.login = login
        self.organizationBillingEmail = organizationBillingEmail
        self.email = email
        self.marketplacePendingChange = marketplacePendingChange
        self.marketplacePurchase = marketplacePurchase
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.url = try values.decode(String.self, forKey: "url")
        self.type = try values.decode(String.self, forKey: "type")
        self.id = try values.decode(Int.self, forKey: "id")
        self.login = try values.decode(String.self, forKey: "login")
        self.organizationBillingEmail = try values.decodeIfPresent(String.self, forKey: "organization_billing_email")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.marketplacePendingChange = try values.decodeIfPresent(MarketplacePendingChange.self, forKey: "marketplace_pending_change")
        self.marketplacePurchase = try values.decode(MarketplacePurchase.self, forKey: "marketplace_purchase")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(url, forKey: "url")
        try values.encode(type, forKey: "type")
        try values.encode(id, forKey: "id")
        try values.encode(login, forKey: "login")
        try values.encodeIfPresent(organizationBillingEmail, forKey: "organization_billing_email")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encodeIfPresent(marketplacePendingChange, forKey: "marketplace_pending_change")
        try values.encode(marketplacePurchase, forKey: "marketplace_purchase")
    }
}
