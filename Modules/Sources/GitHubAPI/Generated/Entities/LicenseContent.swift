// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct LicenseContent: Codable {
    public var name: String
    public var path: String
    public var sha: String
    public var size: Int
    public var url: URL
    public var htmlURL: URL?
    public var gitURL: URL?
    public var downloadURL: URL?
    public var type: String
    public var content: String
    public var encoding: String
    public var links: Links
    /// License Simple
    public var license: NullableLicenseSimple?

    public struct Links: Codable {
        public var git: URL?
        public var html: URL?
        public var this: URL

        public init(git: URL? = nil, html: URL? = nil, this: URL) {
            self.git = git
            self.html = html
            self.this = this
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.git = try values.decodeIfPresent(URL.self, forKey: "git")
            self.html = try values.decodeIfPresent(URL.self, forKey: "html")
            self.this = try values.decode(URL.self, forKey: "self")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(git, forKey: "git")
            try values.encodeIfPresent(html, forKey: "html")
            try values.encode(this, forKey: "self")
        }
    }

    public init(name: String, path: String, sha: String, size: Int, url: URL, htmlURL: URL? = nil, gitURL: URL? = nil, downloadURL: URL? = nil, type: String, content: String, encoding: String, links: Links, license: NullableLicenseSimple? = nil) {
        self.name = name
        self.path = path
        self.sha = sha
        self.size = size
        self.url = url
        self.htmlURL = htmlURL
        self.gitURL = gitURL
        self.downloadURL = downloadURL
        self.type = type
        self.content = content
        self.encoding = encoding
        self.links = links
        self.license = license
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decode(String.self, forKey: "name")
        self.path = try values.decode(String.self, forKey: "path")
        self.sha = try values.decode(String.self, forKey: "sha")
        self.size = try values.decode(Int.self, forKey: "size")
        self.url = try values.decode(URL.self, forKey: "url")
        self.htmlURL = try values.decodeIfPresent(URL.self, forKey: "html_url")
        self.gitURL = try values.decodeIfPresent(URL.self, forKey: "git_url")
        self.downloadURL = try values.decodeIfPresent(URL.self, forKey: "download_url")
        self.type = try values.decode(String.self, forKey: "type")
        self.content = try values.decode(String.self, forKey: "content")
        self.encoding = try values.decode(String.self, forKey: "encoding")
        self.links = try values.decode(Links.self, forKey: "_links")
        self.license = try values.decodeIfPresent(NullableLicenseSimple.self, forKey: "license")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(name, forKey: "name")
        try values.encode(path, forKey: "path")
        try values.encode(sha, forKey: "sha")
        try values.encode(size, forKey: "size")
        try values.encode(url, forKey: "url")
        try values.encodeIfPresent(htmlURL, forKey: "html_url")
        try values.encodeIfPresent(gitURL, forKey: "git_url")
        try values.encodeIfPresent(downloadURL, forKey: "download_url")
        try values.encode(type, forKey: "type")
        try values.encode(content, forKey: "content")
        try values.encode(encoding, forKey: "encoding")
        try values.encode(links, forKey: "_links")
        try values.encodeIfPresent(license, forKey: "license")
    }
}
