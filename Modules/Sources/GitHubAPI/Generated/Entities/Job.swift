// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Information of a job execution in a workflow run
public struct Job: Codable, Identifiable {
    /// The id of the job.
    ///
    /// Example: 21
    public var id: Int
    /// The id of the associated workflow run.
    public var runID: Int
    /// Example: "https://api.github.com/repos/github/hello-world/actions/runs/5"
    public var runURL: String
    /// Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
    public var runAttempt: Int?
    /// Example: "MDg6Q2hlY2tSdW40"
    public var nodeID: String
    /// The SHA of the commit that is being run.
    ///
    /// Example: "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
    public var headSha: String
    /// Example: "https://api.github.com/repos/github/hello-world/actions/jobs/21"
    public var url: String
    /// Example: "https://github.com/github/hello-world/runs/4"
    public var htmlURL: String?
    /// The phase of the lifecycle that the job is currently in.
    ///
    /// Example: "queued"
    public var status: Status
    /// The outcome of the job.
    ///
    /// Example: "success"
    public var conclusion: Conclusion?
    /// The time that the job started, in ISO 8601 format.
    ///
    /// Example: "2019-08-08T08:00:00-07:00"
    public var startedAt: Date
    /// The time that the job finished, in ISO 8601 format.
    ///
    /// Example: "2019-08-08T08:00:00-07:00"
    public var completedAt: Date?
    /// The name of the job.
    ///
    /// Example: "test-coverage"
    public var name: String
    /// Steps in this job.
    public var steps: [Step]?
    /// Example: "https://api.github.com/repos/github/hello-world/check-runs/4"
    public var checkRunURL: String
    /// Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
    ///
    /// Example: ["self-hosted", "foo", "bar"]
    public var labels: [String]
    /// The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
    public var runnerID: Int?
    /// The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
    ///
    /// Example: "my runner"
    public var runnerName: String?
    /// The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
    public var runnerGroupID: Int?
    /// The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
    ///
    /// Example: "my runner group"
    public var runnerGroupName: String?

    /// The phase of the lifecycle that the job is currently in.
    ///
    /// Example: "queued"
    public enum Status: String, Codable, CaseIterable {
        case queued
        case inProgress = "in_progress"
        case completed
    }

    /// The outcome of the job.
    ///
    /// Example: "success"
    public enum Conclusion: String, Codable, CaseIterable {
        case success
        case failure
        case neutral
        case cancelled
        case skipped
        case timedOut = "timed_out"
        case actionRequired = "action_required"
    }

    public struct Step: Codable {
        /// The phase of the lifecycle that the job is currently in.
        ///
        /// Example: "queued"
        public var status: Status
        /// The outcome of the job.
        ///
        /// Example: "success"
        public var conclusion: String?
        /// The name of the job.
        ///
        /// Example: "test-coverage"
        public var name: String
        public var number: Int
        /// The time that the step started, in ISO 8601 format.
        ///
        /// Example: "2019-08-08T08:00:00-07:00"
        public var startedAt: Date?
        /// The time that the job finished, in ISO 8601 format.
        ///
        /// Example: "2019-08-08T08:00:00-07:00"
        public var completedAt: Date?

        /// The phase of the lifecycle that the job is currently in.
        ///
        /// Example: "queued"
        public enum Status: String, Codable, CaseIterable {
            case queued
            case inProgress = "in_progress"
            case completed
        }

        public init(status: Status, conclusion: String? = nil, name: String, number: Int, startedAt: Date? = nil, completedAt: Date? = nil) {
            self.status = status
            self.conclusion = conclusion
            self.name = name
            self.number = number
            self.startedAt = startedAt
            self.completedAt = completedAt
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.status = try values.decode(Status.self, forKey: "status")
            self.conclusion = try values.decodeIfPresent(String.self, forKey: "conclusion")
            self.name = try values.decode(String.self, forKey: "name")
            self.number = try values.decode(Int.self, forKey: "number")
            self.startedAt = try values.decodeIfPresent(Date.self, forKey: "started_at")
            self.completedAt = try values.decodeIfPresent(Date.self, forKey: "completed_at")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(status, forKey: "status")
            try values.encodeIfPresent(conclusion, forKey: "conclusion")
            try values.encode(name, forKey: "name")
            try values.encode(number, forKey: "number")
            try values.encodeIfPresent(startedAt, forKey: "started_at")
            try values.encodeIfPresent(completedAt, forKey: "completed_at")
        }
    }

    public init(id: Int, runID: Int, runURL: String, runAttempt: Int? = nil, nodeID: String, headSha: String, url: String, htmlURL: String? = nil, status: Status, conclusion: Conclusion? = nil, startedAt: Date, completedAt: Date? = nil, name: String, steps: [Step]? = nil, checkRunURL: String, labels: [String], runnerID: Int? = nil, runnerName: String? = nil, runnerGroupID: Int? = nil, runnerGroupName: String? = nil) {
        self.id = id
        self.runID = runID
        self.runURL = runURL
        self.runAttempt = runAttempt
        self.nodeID = nodeID
        self.headSha = headSha
        self.url = url
        self.htmlURL = htmlURL
        self.status = status
        self.conclusion = conclusion
        self.startedAt = startedAt
        self.completedAt = completedAt
        self.name = name
        self.steps = steps
        self.checkRunURL = checkRunURL
        self.labels = labels
        self.runnerID = runnerID
        self.runnerName = runnerName
        self.runnerGroupID = runnerGroupID
        self.runnerGroupName = runnerGroupName
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.runID = try values.decode(Int.self, forKey: "run_id")
        self.runURL = try values.decode(String.self, forKey: "run_url")
        self.runAttempt = try values.decodeIfPresent(Int.self, forKey: "run_attempt")
        self.nodeID = try values.decode(String.self, forKey: "node_id")
        self.headSha = try values.decode(String.self, forKey: "head_sha")
        self.url = try values.decode(String.self, forKey: "url")
        self.htmlURL = try values.decodeIfPresent(String.self, forKey: "html_url")
        self.status = try values.decode(Status.self, forKey: "status")
        self.conclusion = try values.decodeIfPresent(Conclusion.self, forKey: "conclusion")
        self.startedAt = try values.decode(Date.self, forKey: "started_at")
        self.completedAt = try values.decodeIfPresent(Date.self, forKey: "completed_at")
        self.name = try values.decode(String.self, forKey: "name")
        self.steps = try values.decodeIfPresent([Step].self, forKey: "steps")
        self.checkRunURL = try values.decode(String.self, forKey: "check_run_url")
        self.labels = try values.decode([String].self, forKey: "labels")
        self.runnerID = try values.decodeIfPresent(Int.self, forKey: "runner_id")
        self.runnerName = try values.decodeIfPresent(String.self, forKey: "runner_name")
        self.runnerGroupID = try values.decodeIfPresent(Int.self, forKey: "runner_group_id")
        self.runnerGroupName = try values.decodeIfPresent(String.self, forKey: "runner_group_name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(runID, forKey: "run_id")
        try values.encode(runURL, forKey: "run_url")
        try values.encodeIfPresent(runAttempt, forKey: "run_attempt")
        try values.encode(nodeID, forKey: "node_id")
        try values.encode(headSha, forKey: "head_sha")
        try values.encode(url, forKey: "url")
        try values.encodeIfPresent(htmlURL, forKey: "html_url")
        try values.encode(status, forKey: "status")
        try values.encodeIfPresent(conclusion, forKey: "conclusion")
        try values.encode(startedAt, forKey: "started_at")
        try values.encodeIfPresent(completedAt, forKey: "completed_at")
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(steps, forKey: "steps")
        try values.encode(checkRunURL, forKey: "check_run_url")
        try values.encode(labels, forKey: "labels")
        try values.encodeIfPresent(runnerID, forKey: "runner_id")
        try values.encodeIfPresent(runnerName, forKey: "runner_name")
        try values.encodeIfPresent(runnerGroupID, forKey: "runner_group_id")
        try values.encodeIfPresent(runnerGroupName, forKey: "runner_group_name")
    }
}
