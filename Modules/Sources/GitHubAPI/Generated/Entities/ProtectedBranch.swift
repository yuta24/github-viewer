// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Branch protections protect branches
public struct ProtectedBranch: Codable {
    public var url: URL
    /// Status Check Policy
    public var requiredStatusChecks: StatusCheckPolicy?
    public var requiredPullRequestReviews: RequiredPullRequestReviews?
    public var requiredSignatures: RequiredSignatures?
    public var enforceAdmins: EnforceAdmins?
    public var requiredLinearHistory: RequiredLinearHistory?
    public var allowForcePushes: AllowForcePushes?
    public var allowDeletions: AllowDeletions?
    /// Branch Restriction Policy
    public var restrictions: BranchRestrictionPolicy?
    public var requiredConversationResolution: RequiredConversationResolution?
    public var blockCreations: BlockCreations?

    public struct RequiredPullRequestReviews: Codable {
        public var url: URL
        public var dismissStaleReviews: Bool?
        public var requireCodeOwnerReviews: Bool?
        public var requiredApprovingReviewCount: Int?
        public var dismissalRestrictions: DismissalRestrictions?
        public var bypassPullRequestAllowances: BypassPullRequestAllowances?

        public struct DismissalRestrictions: Codable {
            public var url: URL
            public var usersURL: URL
            public var teamsURL: URL
            public var users: [SimpleUser]
            public var teams: [Team]
            public var apps: [Integration]?

            public init(url: URL, usersURL: URL, teamsURL: URL, users: [SimpleUser], teams: [Team], apps: [Integration]? = nil) {
                self.url = url
                self.usersURL = usersURL
                self.teamsURL = teamsURL
                self.users = users
                self.teams = teams
                self.apps = apps
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.url = try values.decode(URL.self, forKey: "url")
                self.usersURL = try values.decode(URL.self, forKey: "users_url")
                self.teamsURL = try values.decode(URL.self, forKey: "teams_url")
                self.users = try values.decode([SimpleUser].self, forKey: "users")
                self.teams = try values.decode([Team].self, forKey: "teams")
                self.apps = try values.decodeIfPresent([Integration].self, forKey: "apps")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(url, forKey: "url")
                try values.encode(usersURL, forKey: "users_url")
                try values.encode(teamsURL, forKey: "teams_url")
                try values.encode(users, forKey: "users")
                try values.encode(teams, forKey: "teams")
                try values.encodeIfPresent(apps, forKey: "apps")
            }
        }

        public struct BypassPullRequestAllowances: Codable {
            public var users: [SimpleUser]
            public var teams: [Team]
            public var apps: [Integration]?

            public init(users: [SimpleUser], teams: [Team], apps: [Integration]? = nil) {
                self.users = users
                self.teams = teams
                self.apps = apps
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.users = try values.decode([SimpleUser].self, forKey: "users")
                self.teams = try values.decode([Team].self, forKey: "teams")
                self.apps = try values.decodeIfPresent([Integration].self, forKey: "apps")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(users, forKey: "users")
                try values.encode(teams, forKey: "teams")
                try values.encodeIfPresent(apps, forKey: "apps")
            }
        }

        public init(url: URL, dismissStaleReviews: Bool? = nil, requireCodeOwnerReviews: Bool? = nil, requiredApprovingReviewCount: Int? = nil, dismissalRestrictions: DismissalRestrictions? = nil, bypassPullRequestAllowances: BypassPullRequestAllowances? = nil) {
            self.url = url
            self.dismissStaleReviews = dismissStaleReviews
            self.requireCodeOwnerReviews = requireCodeOwnerReviews
            self.requiredApprovingReviewCount = requiredApprovingReviewCount
            self.dismissalRestrictions = dismissalRestrictions
            self.bypassPullRequestAllowances = bypassPullRequestAllowances
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.url = try values.decode(URL.self, forKey: "url")
            self.dismissStaleReviews = try values.decodeIfPresent(Bool.self, forKey: "dismiss_stale_reviews")
            self.requireCodeOwnerReviews = try values.decodeIfPresent(Bool.self, forKey: "require_code_owner_reviews")
            self.requiredApprovingReviewCount = try values.decodeIfPresent(Int.self, forKey: "required_approving_review_count")
            self.dismissalRestrictions = try values.decodeIfPresent(DismissalRestrictions.self, forKey: "dismissal_restrictions")
            self.bypassPullRequestAllowances = try values.decodeIfPresent(BypassPullRequestAllowances.self, forKey: "bypass_pull_request_allowances")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(url, forKey: "url")
            try values.encodeIfPresent(dismissStaleReviews, forKey: "dismiss_stale_reviews")
            try values.encodeIfPresent(requireCodeOwnerReviews, forKey: "require_code_owner_reviews")
            try values.encodeIfPresent(requiredApprovingReviewCount, forKey: "required_approving_review_count")
            try values.encodeIfPresent(dismissalRestrictions, forKey: "dismissal_restrictions")
            try values.encodeIfPresent(bypassPullRequestAllowances, forKey: "bypass_pull_request_allowances")
        }
    }

    public struct RequiredSignatures: Codable {
        /// Example: "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
        public var url: URL
        /// Example: true
        public var isEnabled: Bool

        public init(url: URL, isEnabled: Bool) {
            self.url = url
            self.isEnabled = isEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.url = try values.decode(URL.self, forKey: "url")
            self.isEnabled = try values.decode(Bool.self, forKey: "enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(url, forKey: "url")
            try values.encode(isEnabled, forKey: "enabled")
        }
    }

    public struct EnforceAdmins: Codable {
        public var url: URL
        public var isEnabled: Bool

        public init(url: URL, isEnabled: Bool) {
            self.url = url
            self.isEnabled = isEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.url = try values.decode(URL.self, forKey: "url")
            self.isEnabled = try values.decode(Bool.self, forKey: "enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(url, forKey: "url")
            try values.encode(isEnabled, forKey: "enabled")
        }
    }

    public struct RequiredLinearHistory: Codable {
        public var isEnabled: Bool

        public init(isEnabled: Bool) {
            self.isEnabled = isEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isEnabled = try values.decode(Bool.self, forKey: "enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(isEnabled, forKey: "enabled")
        }
    }

    public struct AllowForcePushes: Codable {
        public var isEnabled: Bool

        public init(isEnabled: Bool) {
            self.isEnabled = isEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isEnabled = try values.decode(Bool.self, forKey: "enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(isEnabled, forKey: "enabled")
        }
    }

    public struct AllowDeletions: Codable {
        public var isEnabled: Bool

        public init(isEnabled: Bool) {
            self.isEnabled = isEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isEnabled = try values.decode(Bool.self, forKey: "enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(isEnabled, forKey: "enabled")
        }
    }

    public struct RequiredConversationResolution: Codable {
        public var isEnabled: Bool?

        public init(isEnabled: Bool? = nil) {
            self.isEnabled = isEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(isEnabled, forKey: "enabled")
        }
    }

    public struct BlockCreations: Codable {
        public var isEnabled: Bool

        public init(isEnabled: Bool) {
            self.isEnabled = isEnabled
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isEnabled = try values.decode(Bool.self, forKey: "enabled")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(isEnabled, forKey: "enabled")
        }
    }

    public init(url: URL, requiredStatusChecks: StatusCheckPolicy? = nil, requiredPullRequestReviews: RequiredPullRequestReviews? = nil, requiredSignatures: RequiredSignatures? = nil, enforceAdmins: EnforceAdmins? = nil, requiredLinearHistory: RequiredLinearHistory? = nil, allowForcePushes: AllowForcePushes? = nil, allowDeletions: AllowDeletions? = nil, restrictions: BranchRestrictionPolicy? = nil, requiredConversationResolution: RequiredConversationResolution? = nil, blockCreations: BlockCreations? = nil) {
        self.url = url
        self.requiredStatusChecks = requiredStatusChecks
        self.requiredPullRequestReviews = requiredPullRequestReviews
        self.requiredSignatures = requiredSignatures
        self.enforceAdmins = enforceAdmins
        self.requiredLinearHistory = requiredLinearHistory
        self.allowForcePushes = allowForcePushes
        self.allowDeletions = allowDeletions
        self.restrictions = restrictions
        self.requiredConversationResolution = requiredConversationResolution
        self.blockCreations = blockCreations
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.url = try values.decode(URL.self, forKey: "url")
        self.requiredStatusChecks = try values.decodeIfPresent(StatusCheckPolicy.self, forKey: "required_status_checks")
        self.requiredPullRequestReviews = try values.decodeIfPresent(RequiredPullRequestReviews.self, forKey: "required_pull_request_reviews")
        self.requiredSignatures = try values.decodeIfPresent(RequiredSignatures.self, forKey: "required_signatures")
        self.enforceAdmins = try values.decodeIfPresent(EnforceAdmins.self, forKey: "enforce_admins")
        self.requiredLinearHistory = try values.decodeIfPresent(RequiredLinearHistory.self, forKey: "required_linear_history")
        self.allowForcePushes = try values.decodeIfPresent(AllowForcePushes.self, forKey: "allow_force_pushes")
        self.allowDeletions = try values.decodeIfPresent(AllowDeletions.self, forKey: "allow_deletions")
        self.restrictions = try values.decodeIfPresent(BranchRestrictionPolicy.self, forKey: "restrictions")
        self.requiredConversationResolution = try values.decodeIfPresent(RequiredConversationResolution.self, forKey: "required_conversation_resolution")
        self.blockCreations = try values.decodeIfPresent(BlockCreations.self, forKey: "block_creations")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(url, forKey: "url")
        try values.encodeIfPresent(requiredStatusChecks, forKey: "required_status_checks")
        try values.encodeIfPresent(requiredPullRequestReviews, forKey: "required_pull_request_reviews")
        try values.encodeIfPresent(requiredSignatures, forKey: "required_signatures")
        try values.encodeIfPresent(enforceAdmins, forKey: "enforce_admins")
        try values.encodeIfPresent(requiredLinearHistory, forKey: "required_linear_history")
        try values.encodeIfPresent(allowForcePushes, forKey: "allow_force_pushes")
        try values.encodeIfPresent(allowDeletions, forKey: "allow_deletions")
        try values.encodeIfPresent(restrictions, forKey: "restrictions")
        try values.encodeIfPresent(requiredConversationResolution, forKey: "required_conversation_resolution")
        try values.encodeIfPresent(blockCreations, forKey: "block_creations")
    }
}
